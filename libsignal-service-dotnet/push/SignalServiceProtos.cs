// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: SignalService.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace libsignalservice.push {

  /// <summary>Holder for reflection information generated from SignalService.proto</summary>
  public static partial class SignalServiceReflection {

    #region Descriptor
    /// <summary>File descriptor for SignalService.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static SignalServiceReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChNTaWduYWxTZXJ2aWNlLnByb3RvEg1zaWduYWxzZXJ2aWNlItcCCghFbnZl",
            "bG9wZRIqCgR0eXBlGAEgASgOMhwuc2lnbmFsc2VydmljZS5FbnZlbG9wZS5U",
            "eXBlEg4KBnNvdXJjZRgCIAEoCRISCgpzb3VyY2VVdWlkGAsgASgJEhQKDHNv",
            "dXJjZURldmljZRgHIAEoDRINCgVyZWxheRgDIAEoCRIRCgl0aW1lc3RhbXAY",
            "BSABKAQSFQoNbGVnYWN5TWVzc2FnZRgGIAEoDBIPCgdjb250ZW50GAggASgM",
            "EhIKCnNlcnZlckd1aWQYCSABKAkSFwoPc2VydmVyVGltZXN0YW1wGAogASgE",
            "Im4KBFR5cGUSCwoHVU5LTk9XThAAEg4KCkNJUEhFUlRFWFQQARIQCgxLRVlf",
            "RVhDSEFOR0UQAhIRCg1QUkVLRVlfQlVORExFEAMSCwoHUkVDRUlQVBAFEhcK",
            "E1VOSURFTlRJRklFRF9TRU5ERVIQBiK/AgoHQ29udGVudBIvCgtkYXRhTWVz",
            "c2FnZRgBIAEoCzIaLnNpZ25hbHNlcnZpY2UuRGF0YU1lc3NhZ2USLwoLc3lu",
            "Y01lc3NhZ2UYAiABKAsyGi5zaWduYWxzZXJ2aWNlLlN5bmNNZXNzYWdlEjUK",
            "DmNhbGxpbmdNZXNzYWdlGAMgASgLMh0uc2lnbmFsc2VydmljZS5DYWxsaW5n",
            "TWVzc2FnZRIvCgtudWxsTWVzc2FnZRgEIAEoCzIaLnNpZ25hbHNlcnZpY2Uu",
            "TnVsbE1lc3NhZ2USNQoOcmVjZWlwdE1lc3NhZ2UYBSABKAsyHS5zaWduYWxz",
            "ZXJ2aWNlLlJlY2VpcHRNZXNzYWdlEjMKDXR5cGluZ01lc3NhZ2UYBiABKAsy",
            "HC5zaWduYWxzZXJ2aWNlLlR5cGluZ01lc3NhZ2UiiQgKDkNhbGxpbmdNZXNz",
            "YWdlEjIKBW9mZmVyGAEgASgLMiMuc2lnbmFsc2VydmljZS5DYWxsaW5nTWVz",
            "c2FnZS5PZmZlchI0CgZhbnN3ZXIYAiABKAsyJC5zaWduYWxzZXJ2aWNlLkNh",
            "bGxpbmdNZXNzYWdlLkFuc3dlchJBCg1pY2VDYW5kaWRhdGVzGAMgAygLMiou",
            "c2lnbmFsc2VydmljZS5DYWxsaW5nTWVzc2FnZS5JY2VDYW5kaWRhdGUSOgoM",
            "bGVnYWN5SGFuZ3VwGAQgASgLMiQuc2lnbmFsc2VydmljZS5DYWxsaW5nTWVz",
            "c2FnZS5IYW5ndXASMAoEYnVzeRgFIAEoCzIiLnNpZ25hbHNlcnZpY2UuQ2Fs",
            "bGluZ01lc3NhZ2UuQnVzeRI0CgZoYW5ndXAYByABKAsyJC5zaWduYWxzZXJ2",
            "aWNlLkNhbGxpbmdNZXNzYWdlLkhhbmd1cBIZChFzdXBwb3J0c011bHRpUmlu",
            "ZxgIIAEoCBIbChNkZXN0aW5hdGlvbkRldmljZUlkGAkgASgNEjQKBm9wYXF1",
            "ZRgKIAEoCzIkLnNpZ25hbHNlcnZpY2UuQ2FsbGluZ01lc3NhZ2UuT3BhcXVl",
            "GqABCgVPZmZlchIOCgZjYWxsSWQYASABKAQSCwoDc2RwGAIgASgJEjYKBHR5",
            "cGUYAyABKA4yKC5zaWduYWxzZXJ2aWNlLkNhbGxpbmdNZXNzYWdlLk9mZmVy",
            "LlR5cGUSDgoGb3BhcXVlGAQgASgMIjIKBFR5cGUSFAoQT0ZGRVJfQVVESU9f",
            "Q0FMTBAAEhQKEE9GRkVSX1ZJREVPX0NBTEwQARo1CgZBbnN3ZXISDgoGY2Fs",
            "bElkGAEgASgEEgsKA3NkcBgCIAEoCRIOCgZvcGFxdWUYAyABKAwaVgoMSWNl",
            "Q2FuZGlkYXRlEg4KBmNhbGxJZBgBIAEoBBILCgNtaWQYAiABKAkSDAoEbGlu",
            "ZRgDIAEoDRILCgNzZHAYBCABKAkSDgoGb3BhcXVlGAUgASgMGhYKBEJ1c3kS",
            "DgoGY2FsbElkGAEgASgEGtUBCgZIYW5ndXASDgoGY2FsbElkGAEgASgEEjcK",
            "BHR5cGUYAiABKA4yKS5zaWduYWxzZXJ2aWNlLkNhbGxpbmdNZXNzYWdlLkhh",
            "bmd1cC5UeXBlEhAKCGRldmljZUlkGAMgASgNInAKBFR5cGUSEQoNSEFOR1VQ",
            "X05PUk1BTBAAEhMKD0hBTkdVUF9BQ0NFUFRFRBABEhMKD0hBTkdVUF9ERUNM",
            "SU5FRBACEg8KC0hBTkdVUF9CVVNZEAMSGgoWSEFOR1VQX05FRURfUEVSTUlT",
            "U0lPThAEGhYKBk9wYXF1ZRIMCgRkYXRhGAEgASgMIrQWCgtEYXRhTWVzc2Fn",
            "ZRIMCgRib2R5GAEgASgJEjUKC2F0dGFjaG1lbnRzGAIgAygLMiAuc2lnbmFs",
            "c2VydmljZS5BdHRhY2htZW50UG9pbnRlchIqCgVncm91cBgDIAEoCzIbLnNp",
            "Z25hbHNlcnZpY2UuR3JvdXBDb250ZXh0Ei4KB2dyb3VwVjIYDyABKAsyHS5z",
            "aWduYWxzZXJ2aWNlLkdyb3VwQ29udGV4dFYyEg0KBWZsYWdzGAQgASgNEhMK",
            "C2V4cGlyZVRpbWVyGAUgASgNEhIKCnByb2ZpbGVLZXkYBiABKAwSEQoJdGlt",
            "ZXN0YW1wGAcgASgEEi8KBXF1b3RlGAggASgLMiAuc2lnbmFsc2VydmljZS5E",
            "YXRhTWVzc2FnZS5RdW90ZRIzCgdjb250YWN0GAkgAygLMiIuc2lnbmFsc2Vy",
            "dmljZS5EYXRhTWVzc2FnZS5Db250YWN0EjMKB3ByZXZpZXcYCiADKAsyIi5z",
            "aWduYWxzZXJ2aWNlLkRhdGFNZXNzYWdlLlByZXZpZXcSMwoHc3RpY2tlchgL",
            "IAEoCzIiLnNpZ25hbHNlcnZpY2UuRGF0YU1lc3NhZ2UuU3RpY2tlchIfChdy",
            "ZXF1aXJlZFByb3RvY29sVmVyc2lvbhgMIAEoDRISCgppc1ZpZXdPbmNlGA4g",
            "ASgIEjUKCHJlYWN0aW9uGBAgASgLMiMuc2lnbmFsc2VydmljZS5EYXRhTWVz",
            "c2FnZS5SZWFjdGlvbhIxCgZkZWxldGUYESABKAsyIS5zaWduYWxzZXJ2aWNl",
            "LkRhdGFNZXNzYWdlLkRlbGV0ZRI4Cgpib2R5UmFuZ2VzGBIgAygLMiQuc2ln",
            "bmFsc2VydmljZS5EYXRhTWVzc2FnZS5Cb2R5UmFuZ2USQwoPZ3JvdXBDYWxs",
            "VXBkYXRlGBMgASgLMiouc2lnbmFsc2VydmljZS5EYXRhTWVzc2FnZS5Hcm91",
            "cENhbGxVcGRhdGUatwIKBVF1b3RlEgoKAmlkGAEgASgEEg4KBmF1dGhvchgC",
            "IAEoCRISCgphdXRob3JVdWlkGAUgASgJEgwKBHRleHQYAyABKAkSRgoLYXR0",
            "YWNobWVudHMYBCADKAsyMS5zaWduYWxzZXJ2aWNlLkRhdGFNZXNzYWdlLlF1",
            "b3RlLlF1b3RlZEF0dGFjaG1lbnQSOAoKYm9keVJhbmdlcxgGIAMoCzIkLnNp",
            "Z25hbHNlcnZpY2UuRGF0YU1lc3NhZ2UuQm9keVJhbmdlGm4KEFF1b3RlZEF0",
            "dGFjaG1lbnQSEwoLY29udGVudFR5cGUYASABKAkSEAoIZmlsZU5hbWUYAiAB",
            "KAkSMwoJdGh1bWJuYWlsGAMgASgLMiAuc2lnbmFsc2VydmljZS5BdHRhY2ht",
            "ZW50UG9pbnRlchrECAoHQ29udGFjdBI1CgRuYW1lGAEgASgLMicuc2lnbmFs",
            "c2VydmljZS5EYXRhTWVzc2FnZS5Db250YWN0Lk5hbWUSOAoGbnVtYmVyGAMg",
            "AygLMiguc2lnbmFsc2VydmljZS5EYXRhTWVzc2FnZS5Db250YWN0LlBob25l",
            "EjcKBWVtYWlsGAQgAygLMiguc2lnbmFsc2VydmljZS5EYXRhTWVzc2FnZS5D",
            "b250YWN0LkVtYWlsEkEKB2FkZHJlc3MYBSADKAsyMC5zaWduYWxzZXJ2aWNl",
            "LkRhdGFNZXNzYWdlLkNvbnRhY3QuUG9zdGFsQWRkcmVzcxI5CgZhdmF0YXIY",
            "BiABKAsyKS5zaWduYWxzZXJ2aWNlLkRhdGFNZXNzYWdlLkNvbnRhY3QuQXZh",
            "dGFyEhQKDG9yZ2FuaXphdGlvbhgHIAEoCRp2CgROYW1lEhEKCWdpdmVuTmFt",
            "ZRgBIAEoCRISCgpmYW1pbHlOYW1lGAIgASgJEg4KBnByZWZpeBgDIAEoCRIO",
            "CgZzdWZmaXgYBCABKAkSEgoKbWlkZGxlTmFtZRgFIAEoCRITCgtkaXNwbGF5",
            "TmFtZRgGIAEoCRqWAQoFUGhvbmUSDQoFdmFsdWUYASABKAkSOwoEdHlwZRgC",
            "IAEoDjItLnNpZ25hbHNlcnZpY2UuRGF0YU1lc3NhZ2UuQ29udGFjdC5QaG9u",
            "ZS5UeXBlEg0KBWxhYmVsGAMgASgJIjIKBFR5cGUSCAoESE9NRRABEgoKBk1P",
            "QklMRRACEggKBFdPUksQAxIKCgZDVVNUT00QBBqWAQoFRW1haWwSDQoFdmFs",
            "dWUYASABKAkSOwoEdHlwZRgCIAEoDjItLnNpZ25hbHNlcnZpY2UuRGF0YU1l",
            "c3NhZ2UuQ29udGFjdC5FbWFpbC5UeXBlEg0KBWxhYmVsGAMgASgJIjIKBFR5",
            "cGUSCAoESE9NRRABEgoKBk1PQklMRRACEggKBFdPUksQAxIKCgZDVVNUT00Q",
            "BBqBAgoNUG9zdGFsQWRkcmVzcxJDCgR0eXBlGAEgASgOMjUuc2lnbmFsc2Vy",
            "dmljZS5EYXRhTWVzc2FnZS5Db250YWN0LlBvc3RhbEFkZHJlc3MuVHlwZRIN",
            "CgVsYWJlbBgCIAEoCRIOCgZzdHJlZXQYAyABKAkSDQoFcG9ib3gYBCABKAkS",
            "FAoMbmVpZ2hib3Job29kGAUgASgJEgwKBGNpdHkYBiABKAkSDgoGcmVnaW9u",
            "GAcgASgJEhAKCHBvc3Rjb2RlGAggASgJEg8KB2NvdW50cnkYCSABKAkiJgoE",
            "VHlwZRIICgRIT01FEAESCAoEV09SSxACEgoKBkNVU1RPTRADGk0KBkF2YXRh",
            "chIwCgZhdmF0YXIYASABKAsyIC5zaWduYWxzZXJ2aWNlLkF0dGFjaG1lbnRQ",
            "b2ludGVyEhEKCWlzUHJvZmlsZRgCIAEoCBp5CgdQcmV2aWV3EgsKA3VybBgB",
            "IAEoCRINCgV0aXRsZRgCIAEoCRIvCgVpbWFnZRgDIAEoCzIgLnNpZ25hbHNl",
            "cnZpY2UuQXR0YWNobWVudFBvaW50ZXISEwoLZGVzY3JpcHRpb24YBCABKAkS",
            "DAoEZGF0ZRgFIAEoBBptCgdTdGlja2VyEg4KBnBhY2tJZBgBIAEoDBIPCgdw",
            "YWNrS2V5GAIgASgMEhEKCXN0aWNrZXJJZBgDIAEoDRIuCgRkYXRhGAQgASgL",
            "MiAuc2lnbmFsc2VydmljZS5BdHRhY2htZW50UG9pbnRlchpiCghSZWFjdGlv",
            "bhINCgVlbW9qaRgBIAEoCRIOCgZyZW1vdmUYAiABKAgSGAoQdGFyZ2V0QXV0",
            "aG9yVXVpZBgEIAEoCRIXCg90YXJnZXRUaW1lc3RhbXAYBSABKARKBAgDEAQa",
            "JQoGRGVsZXRlEhsKE3RhcmdldFNlbnRUaW1lc3RhbXAYASABKAQaPwoJQm9k",
            "eVJhbmdlEg0KBXN0YXJ0GAEgASgNEg4KBmxlbmd0aBgCIAEoDRITCgttZW50",
            "aW9uVXVpZBgDIAEoCRogCg9Hcm91cENhbGxVcGRhdGUSDQoFZXJhSWQYASAB",
            "KAkiTQoFRmxhZ3MSDwoLRU5EX1NFU1NJT04QARIbChdFWFBJUkFUSU9OX1RJ",
            "TUVSX1VQREFURRACEhYKElBST0ZJTEVfS0VZX1VQREFURRAEIqIBCg9Qcm90",
            "b2NvbFZlcnNpb24SCwoHSU5JVElBTBAAEhIKDk1FU1NBR0VfVElNRVJTEAES",
            "DQoJVklFV19PTkNFEAISEwoPVklFV19PTkNFX1ZJREVPEAMSDQoJUkVBQ1RJ",
            "T05TEAQSHAoYQ0ROX1NFTEVDVE9SX0FUVEFDSE1FTlRTEAUSDAoITUVOVElP",
            "TlMQBhILCgdDVVJSRU5UEAYaAhABIh4KC051bGxNZXNzYWdlEg8KB3BhZGRp",
            "bmcYASABKAwidQoOUmVjZWlwdE1lc3NhZ2USMAoEdHlwZRgBIAEoDjIiLnNp",
            "Z25hbHNlcnZpY2UuUmVjZWlwdE1lc3NhZ2UuVHlwZRIRCgl0aW1lc3RhbXAY",
            "AiADKAQiHgoEVHlwZRIMCghERUxJVkVSWRAAEggKBFJFQUQQASKMAQoNVHlw",
            "aW5nTWVzc2FnZRIRCgl0aW1lc3RhbXAYASABKAQSMwoGYWN0aW9uGAIgASgO",
            "MiMuc2lnbmFsc2VydmljZS5UeXBpbmdNZXNzYWdlLkFjdGlvbhIPCgdncm91",
            "cElkGAMgASgMIiIKBkFjdGlvbhILCgdTVEFSVEVEEAASCwoHU1RPUFBFRBAB",
            "IsQBCghWZXJpZmllZBITCgtkZXN0aW5hdGlvbhgBIAEoCRIXCg9kZXN0aW5h",
            "dGlvblV1aWQYBSABKAkSEwoLaWRlbnRpdHlLZXkYAiABKAwSLAoFc3RhdGUY",
            "AyABKA4yHS5zaWduYWxzZXJ2aWNlLlZlcmlmaWVkLlN0YXRlEhMKC251bGxN",
            "ZXNzYWdlGAQgASgMIjIKBVN0YXRlEgsKB0RFRkFVTFQQABIMCghWRVJJRklF",
            "RBABEg4KClVOVkVSSUZJRUQQAiK5EgoLU3luY01lc3NhZ2USLQoEc2VudBgB",
            "IAEoCzIfLnNpZ25hbHNlcnZpY2UuU3luY01lc3NhZ2UuU2VudBI1Cghjb250",
            "YWN0cxgCIAEoCzIjLnNpZ25hbHNlcnZpY2UuU3luY01lc3NhZ2UuQ29udGFj",
            "dHMSMQoGZ3JvdXBzGAMgASgLMiEuc2lnbmFsc2VydmljZS5TeW5jTWVzc2Fn",
            "ZS5Hcm91cHMSMwoHcmVxdWVzdBgEIAEoCzIiLnNpZ25hbHNlcnZpY2UuU3lu",
            "Y01lc3NhZ2UuUmVxdWVzdBItCgRyZWFkGAUgAygLMh8uc2lnbmFsc2Vydmlj",
            "ZS5TeW5jTWVzc2FnZS5SZWFkEjMKB2Jsb2NrZWQYBiABKAsyIi5zaWduYWxz",
            "ZXJ2aWNlLlN5bmNNZXNzYWdlLkJsb2NrZWQSKQoIdmVyaWZpZWQYByABKAsy",
            "Fy5zaWduYWxzZXJ2aWNlLlZlcmlmaWVkEj8KDWNvbmZpZ3VyYXRpb24YCSAB",
            "KAsyKC5zaWduYWxzZXJ2aWNlLlN5bmNNZXNzYWdlLkNvbmZpZ3VyYXRpb24S",
            "DwoHcGFkZGluZxgIIAEoDBJNChRzdGlja2VyUGFja09wZXJhdGlvbhgKIAMo",
            "CzIvLnNpZ25hbHNlcnZpY2UuU3luY01lc3NhZ2UuU3RpY2tlclBhY2tPcGVy",
            "YXRpb24SPQoMdmlld09uY2VPcGVuGAsgASgLMicuc2lnbmFsc2VydmljZS5T",
            "eW5jTWVzc2FnZS5WaWV3T25jZU9wZW4SOwoLZmV0Y2hMYXRlc3QYDCABKAsy",
            "Ji5zaWduYWxzZXJ2aWNlLlN5bmNNZXNzYWdlLkZldGNoTGF0ZXN0Ei0KBGtl",
            "eXMYDSABKAsyHy5zaWduYWxzZXJ2aWNlLlN5bmNNZXNzYWdlLktleXMSUQoW",
            "bWVzc2FnZVJlcXVlc3RSZXNwb25zZRgOIAEoCzIxLnNpZ25hbHNlcnZpY2Uu",
            "U3luY01lc3NhZ2UuTWVzc2FnZVJlcXVlc3RSZXNwb25zZRryAgoEU2VudBIT",
            "CgtkZXN0aW5hdGlvbhgBIAEoCRIXCg9kZXN0aW5hdGlvblV1aWQYByABKAkS",
            "EQoJdGltZXN0YW1wGAIgASgEEisKB21lc3NhZ2UYAyABKAsyGi5zaWduYWxz",
            "ZXJ2aWNlLkRhdGFNZXNzYWdlEiAKGGV4cGlyYXRpb25TdGFydFRpbWVzdGFt",
            "cBgEIAEoBBJWChJ1bmlkZW50aWZpZWRTdGF0dXMYBSADKAsyOi5zaWduYWxz",
            "ZXJ2aWNlLlN5bmNNZXNzYWdlLlNlbnQuVW5pZGVudGlmaWVkRGVsaXZlcnlT",
            "dGF0dXMSIAoRaXNSZWNpcGllbnRVcGRhdGUYBiABKAg6BWZhbHNlGmAKGlVu",
            "aWRlbnRpZmllZERlbGl2ZXJ5U3RhdHVzEhMKC2Rlc3RpbmF0aW9uGAEgASgJ",
            "EhcKD2Rlc3RpbmF0aW9uVXVpZBgDIAEoCRIUCgx1bmlkZW50aWZpZWQYAiAB",
            "KAgaUwoIQ29udGFjdHMSLgoEYmxvYhgBIAEoCzIgLnNpZ25hbHNlcnZpY2Uu",
            "QXR0YWNobWVudFBvaW50ZXISFwoIY29tcGxldGUYAiABKAg6BWZhbHNlGjgK",
            "Bkdyb3VwcxIuCgRibG9iGAEgASgLMiAuc2lnbmFsc2VydmljZS5BdHRhY2ht",
            "ZW50UG9pbnRlcho7CgdCbG9ja2VkEg8KB251bWJlcnMYASADKAkSDQoFdXVp",
            "ZHMYAyADKAkSEAoIZ3JvdXBJZHMYAiADKAwamQEKB1JlcXVlc3QSNQoEdHlw",
            "ZRgBIAEoDjInLnNpZ25hbHNlcnZpY2UuU3luY01lc3NhZ2UuUmVxdWVzdC5U",
            "eXBlIlcKBFR5cGUSCwoHVU5LTk9XThAAEgwKCENPTlRBQ1RTEAESCgoGR1JP",
            "VVBTEAISCwoHQkxPQ0tFRBADEhEKDUNPTkZJR1VSQVRJT04QBBIICgRLRVlT",
            "EAUaHgoES2V5cxIWCg5zdG9yYWdlU2VydmljZRgBIAEoDBo9CgRSZWFkEg4K",
            "BnNlbmRlchgBIAEoCRISCgpzZW5kZXJVdWlkGAMgASgJEhEKCXRpbWVzdGFt",
            "cBgCIAEoBBqaAQoNQ29uZmlndXJhdGlvbhIUCgxyZWFkUmVjZWlwdHMYASAB",
            "KAgSJgoedW5pZGVudGlmaWVkRGVsaXZlcnlJbmRpY2F0b3JzGAIgASgIEhgK",
            "EHR5cGluZ0luZGljYXRvcnMYAyABKAgSGwoTcHJvdmlzaW9uaW5nVmVyc2lv",
            "bhgFIAEoDRIUCgxsaW5rUHJldmlld3MYBiABKAganAEKFFN0aWNrZXJQYWNr",
            "T3BlcmF0aW9uEg4KBnBhY2tJZBgBIAEoDBIPCgdwYWNrS2V5GAIgASgMEkIK",
            "BHR5cGUYAyABKA4yNC5zaWduYWxzZXJ2aWNlLlN5bmNNZXNzYWdlLlN0aWNr",
            "ZXJQYWNrT3BlcmF0aW9uLlR5cGUiHwoEVHlwZRILCgdJTlNUQUxMEAASCgoG",
            "UkVNT1ZFEAEaRQoMVmlld09uY2VPcGVuEg4KBnNlbmRlchgBIAEoCRISCgpz",
            "ZW5kZXJVdWlkGAMgASgJEhEKCXRpbWVzdGFtcBgCIAEoBBrlAQoWTWVzc2Fn",
            "ZVJlcXVlc3RSZXNwb25zZRISCgp0aHJlYWRFMTY0GAEgASgJEhIKCnRocmVh",
            "ZFV1aWQYAiABKAkSDwoHZ3JvdXBJZBgDIAEoDBJECgR0eXBlGAQgASgOMjYu",
            "c2lnbmFsc2VydmljZS5TeW5jTWVzc2FnZS5NZXNzYWdlUmVxdWVzdFJlc3Bv",
            "bnNlLlR5cGUiTAoEVHlwZRILCgdVTktOT1dOEAASCgoGQUNDRVBUEAESCgoG",
            "REVMRVRFEAISCQoFQkxPQ0sQAxIUChBCTE9DS19BTkRfREVMRVRFEAQahgEK",
            "C0ZldGNoTGF0ZXN0EjkKBHR5cGUYASABKA4yKy5zaWduYWxzZXJ2aWNlLlN5",
            "bmNNZXNzYWdlLkZldGNoTGF0ZXN0LlR5cGUiPAoEVHlwZRILCgdVTktOT1dO",
            "EAASEQoNTE9DQUxfUFJPRklMRRABEhQKEFNUT1JBR0VfTUFOSUZFU1QQAiLm",
            "AgoRQXR0YWNobWVudFBvaW50ZXISDwoFY2RuSWQYASABKAZIABIQCgZjZG5L",
            "ZXkYDyABKAlIABITCgtjb250ZW50VHlwZRgCIAEoCRILCgNrZXkYAyABKAwS",
            "DAoEc2l6ZRgEIAEoDRIRCgl0aHVtYm5haWwYBSABKAwSDgoGZGlnZXN0GAYg",
            "ASgMEhAKCGZpbGVOYW1lGAcgASgJEg0KBWZsYWdzGAggASgNEg0KBXdpZHRo",
            "GAkgASgNEg4KBmhlaWdodBgKIAEoDRIPCgdjYXB0aW9uGAsgASgJEhAKCGJs",
            "dXJIYXNoGAwgASgJEhcKD3VwbG9hZFRpbWVzdGFtcBgNIAEoBBIRCgljZG5O",
            "dW1iZXIYDiABKA0iMwoFRmxhZ3MSEQoNVk9JQ0VfTUVTU0FHRRABEg4KCkJP",
            "UkRFUkxFU1MQAhIHCgNHSUYQA0IXChVhdHRhY2htZW50X2lkZW50aWZpZXIi",
            "6QEKDEdyb3VwQ29udGV4dBIKCgJpZBgBIAEoDBIuCgR0eXBlGAIgASgOMiAu",
            "c2lnbmFsc2VydmljZS5Hcm91cENvbnRleHQuVHlwZRIMCgRuYW1lGAMgASgJ",
            "EhMKC21lbWJlcnNFMTY0GAQgAygJEjAKBmF2YXRhchgFIAEoCzIgLnNpZ25h",
            "bHNlcnZpY2UuQXR0YWNobWVudFBvaW50ZXIiSAoEVHlwZRILCgdVTktOT1dO",
            "EAASCgoGVVBEQVRFEAESCwoHREVMSVZFUhACEggKBFFVSVQQAxIQCgxSRVFV",
            "RVNUX0lORk8QBCJKCg5Hcm91cENvbnRleHRWMhIRCgltYXN0ZXJLZXkYASAB",
            "KAwSEAoIcmV2aXNpb24YAiABKA0SEwoLZ3JvdXBDaGFuZ2UYAyABKAwirAIK",
            "DkNvbnRhY3REZXRhaWxzEg4KBm51bWJlchgBIAEoCRIMCgR1dWlkGAkgASgJ",
            "EgwKBG5hbWUYAiABKAkSNAoGYXZhdGFyGAMgASgLMiQuc2lnbmFsc2Vydmlj",
            "ZS5Db250YWN0RGV0YWlscy5BdmF0YXISDQoFY29sb3IYBCABKAkSKQoIdmVy",
            "aWZpZWQYBSABKAsyFy5zaWduYWxzZXJ2aWNlLlZlcmlmaWVkEhIKCnByb2Zp",
            "bGVLZXkYBiABKAwSDwoHYmxvY2tlZBgHIAEoCBITCgtleHBpcmVUaW1lchgI",
            "IAEoDRIVCg1pbmJveFBvc2l0aW9uGAogASgNGi0KBkF2YXRhchITCgtjb250",
            "ZW50VHlwZRgBIAEoCRIOCgZsZW5ndGgYAiABKA0i3QIKDEdyb3VwRGV0YWls",
            "cxIKCgJpZBgBIAEoDBIMCgRuYW1lGAIgASgJEhMKC21lbWJlcnNFMTY0GAMg",
            "AygJEjMKB21lbWJlcnMYCSADKAsyIi5zaWduYWxzZXJ2aWNlLkdyb3VwRGV0",
            "YWlscy5NZW1iZXISMgoGYXZhdGFyGAQgASgLMiIuc2lnbmFsc2VydmljZS5H",
            "cm91cERldGFpbHMuQXZhdGFyEhQKBmFjdGl2ZRgFIAEoCDoEdHJ1ZRITCgtl",
            "eHBpcmVUaW1lchgGIAEoDRINCgVjb2xvchgHIAEoCRIPCgdibG9ja2VkGAgg",
            "ASgIEhUKDWluYm94UG9zaXRpb24YCiABKA0aLQoGQXZhdGFyEhMKC2NvbnRl",
            "bnRUeXBlGAEgASgJEg4KBmxlbmd0aBgCIAEoDRokCgZNZW1iZXISDAoEdXVp",
            "ZBgBIAEoCRIMCgRlMTY0GAIgASgJQl0KLm9yZy53aGlzcGVyc3lzdGVtcy5z",
            "aWduYWxzZXJ2aWNlLmludGVybmFsLnB1c2hCE1NpZ25hbFNlcnZpY2VQcm90",
            "b3OqAhVsaWJzaWduYWxzZXJ2aWNlLnB1c2g="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::libsignalservice.push.Envelope), global::libsignalservice.push.Envelope.Parser, new[]{ "Type", "Source", "SourceUuid", "SourceDevice", "Relay", "Timestamp", "LegacyMessage", "Content", "ServerGuid", "ServerTimestamp" }, null, new[]{ typeof(global::libsignalservice.push.Envelope.Types.Type) }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::libsignalservice.push.Content), global::libsignalservice.push.Content.Parser, new[]{ "DataMessage", "SyncMessage", "CallingMessage", "NullMessage", "ReceiptMessage", "TypingMessage" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::libsignalservice.push.CallingMessage), global::libsignalservice.push.CallingMessage.Parser, new[]{ "Offer", "Answer", "IceCandidates", "LegacyHangup", "Busy", "Hangup", "SupportsMultiRing", "DestinationDeviceId", "Opaque" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::libsignalservice.push.CallingMessage.Types.Offer), global::libsignalservice.push.CallingMessage.Types.Offer.Parser, new[]{ "CallId", "Sdp", "Type", "Opaque" }, null, new[]{ typeof(global::libsignalservice.push.CallingMessage.Types.Offer.Types.Type) }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::libsignalservice.push.CallingMessage.Types.Answer), global::libsignalservice.push.CallingMessage.Types.Answer.Parser, new[]{ "CallId", "Sdp", "Opaque" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::libsignalservice.push.CallingMessage.Types.IceCandidate), global::libsignalservice.push.CallingMessage.Types.IceCandidate.Parser, new[]{ "CallId", "Mid", "Line", "Sdp", "Opaque" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::libsignalservice.push.CallingMessage.Types.Busy), global::libsignalservice.push.CallingMessage.Types.Busy.Parser, new[]{ "CallId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::libsignalservice.push.CallingMessage.Types.Hangup), global::libsignalservice.push.CallingMessage.Types.Hangup.Parser, new[]{ "CallId", "Type", "DeviceId" }, null, new[]{ typeof(global::libsignalservice.push.CallingMessage.Types.Hangup.Types.Type) }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::libsignalservice.push.CallingMessage.Types.Opaque), global::libsignalservice.push.CallingMessage.Types.Opaque.Parser, new[]{ "Data" }, null, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::libsignalservice.push.DataMessage), global::libsignalservice.push.DataMessage.Parser, new[]{ "Body", "Attachments", "Group", "GroupV2", "Flags", "ExpireTimer", "ProfileKey", "Timestamp", "Quote", "Contact", "Preview", "Sticker", "RequiredProtocolVersion", "IsViewOnce", "Reaction", "Delete", "BodyRanges", "GroupCallUpdate" }, null, new[]{ typeof(global::libsignalservice.push.DataMessage.Types.Flags), typeof(global::libsignalservice.push.DataMessage.Types.ProtocolVersion) }, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::libsignalservice.push.DataMessage.Types.Quote), global::libsignalservice.push.DataMessage.Types.Quote.Parser, new[]{ "Id", "Author", "AuthorUuid", "Text", "Attachments", "BodyRanges" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::libsignalservice.push.DataMessage.Types.Quote.Types.QuotedAttachment), global::libsignalservice.push.DataMessage.Types.Quote.Types.QuotedAttachment.Parser, new[]{ "ContentType", "FileName", "Thumbnail" }, null, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::libsignalservice.push.DataMessage.Types.Contact), global::libsignalservice.push.DataMessage.Types.Contact.Parser, new[]{ "Name", "Number", "Email", "Address", "Avatar", "Organization" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::libsignalservice.push.DataMessage.Types.Contact.Types.Name), global::libsignalservice.push.DataMessage.Types.Contact.Types.Name.Parser, new[]{ "GivenName", "FamilyName", "Prefix", "Suffix", "MiddleName", "DisplayName" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::libsignalservice.push.DataMessage.Types.Contact.Types.Phone), global::libsignalservice.push.DataMessage.Types.Contact.Types.Phone.Parser, new[]{ "Value", "Type", "Label" }, null, new[]{ typeof(global::libsignalservice.push.DataMessage.Types.Contact.Types.Phone.Types.Type) }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::libsignalservice.push.DataMessage.Types.Contact.Types.Email), global::libsignalservice.push.DataMessage.Types.Contact.Types.Email.Parser, new[]{ "Value", "Type", "Label" }, null, new[]{ typeof(global::libsignalservice.push.DataMessage.Types.Contact.Types.Email.Types.Type) }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::libsignalservice.push.DataMessage.Types.Contact.Types.PostalAddress), global::libsignalservice.push.DataMessage.Types.Contact.Types.PostalAddress.Parser, new[]{ "Type", "Label", "Street", "Pobox", "Neighborhood", "City", "Region", "Postcode", "Country" }, null, new[]{ typeof(global::libsignalservice.push.DataMessage.Types.Contact.Types.PostalAddress.Types.Type) }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::libsignalservice.push.DataMessage.Types.Contact.Types.Avatar), global::libsignalservice.push.DataMessage.Types.Contact.Types.Avatar.Parser, new[]{ "Avatar_", "IsProfile" }, null, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::libsignalservice.push.DataMessage.Types.Preview), global::libsignalservice.push.DataMessage.Types.Preview.Parser, new[]{ "Url", "Title", "Image", "Description", "Date" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::libsignalservice.push.DataMessage.Types.Sticker), global::libsignalservice.push.DataMessage.Types.Sticker.Parser, new[]{ "PackId", "PackKey", "StickerId", "Data" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::libsignalservice.push.DataMessage.Types.Reaction), global::libsignalservice.push.DataMessage.Types.Reaction.Parser, new[]{ "Emoji", "Remove", "TargetAuthorUuid", "TargetTimestamp" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::libsignalservice.push.DataMessage.Types.Delete), global::libsignalservice.push.DataMessage.Types.Delete.Parser, new[]{ "TargetSentTimestamp" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::libsignalservice.push.DataMessage.Types.BodyRange), global::libsignalservice.push.DataMessage.Types.BodyRange.Parser, new[]{ "Start", "Length", "MentionUuid" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::libsignalservice.push.DataMessage.Types.GroupCallUpdate), global::libsignalservice.push.DataMessage.Types.GroupCallUpdate.Parser, new[]{ "EraId" }, null, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::libsignalservice.push.NullMessage), global::libsignalservice.push.NullMessage.Parser, new[]{ "Padding" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::libsignalservice.push.ReceiptMessage), global::libsignalservice.push.ReceiptMessage.Parser, new[]{ "Type", "Timestamp" }, null, new[]{ typeof(global::libsignalservice.push.ReceiptMessage.Types.Type) }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::libsignalservice.push.TypingMessage), global::libsignalservice.push.TypingMessage.Parser, new[]{ "Timestamp", "Action", "GroupId" }, null, new[]{ typeof(global::libsignalservice.push.TypingMessage.Types.Action) }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::libsignalservice.push.Verified), global::libsignalservice.push.Verified.Parser, new[]{ "Destination", "DestinationUuid", "IdentityKey", "State", "NullMessage" }, null, new[]{ typeof(global::libsignalservice.push.Verified.Types.State) }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::libsignalservice.push.SyncMessage), global::libsignalservice.push.SyncMessage.Parser, new[]{ "Sent", "Contacts", "Groups", "Request", "Read", "Blocked", "Verified", "Configuration", "Padding", "StickerPackOperation", "ViewOnceOpen", "FetchLatest", "Keys", "MessageRequestResponse" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::libsignalservice.push.SyncMessage.Types.Sent), global::libsignalservice.push.SyncMessage.Types.Sent.Parser, new[]{ "Destination", "DestinationUuid", "Timestamp", "Message", "ExpirationStartTimestamp", "UnidentifiedStatus", "IsRecipientUpdate" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::libsignalservice.push.SyncMessage.Types.Sent.Types.UnidentifiedDeliveryStatus), global::libsignalservice.push.SyncMessage.Types.Sent.Types.UnidentifiedDeliveryStatus.Parser, new[]{ "Destination", "DestinationUuid", "Unidentified" }, null, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::libsignalservice.push.SyncMessage.Types.Contacts), global::libsignalservice.push.SyncMessage.Types.Contacts.Parser, new[]{ "Blob", "Complete" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::libsignalservice.push.SyncMessage.Types.Groups), global::libsignalservice.push.SyncMessage.Types.Groups.Parser, new[]{ "Blob" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::libsignalservice.push.SyncMessage.Types.Blocked), global::libsignalservice.push.SyncMessage.Types.Blocked.Parser, new[]{ "Numbers", "Uuids", "GroupIds" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::libsignalservice.push.SyncMessage.Types.Request), global::libsignalservice.push.SyncMessage.Types.Request.Parser, new[]{ "Type" }, null, new[]{ typeof(global::libsignalservice.push.SyncMessage.Types.Request.Types.Type) }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::libsignalservice.push.SyncMessage.Types.Keys), global::libsignalservice.push.SyncMessage.Types.Keys.Parser, new[]{ "StorageService" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::libsignalservice.push.SyncMessage.Types.Read), global::libsignalservice.push.SyncMessage.Types.Read.Parser, new[]{ "Sender", "SenderUuid", "Timestamp" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::libsignalservice.push.SyncMessage.Types.Configuration), global::libsignalservice.push.SyncMessage.Types.Configuration.Parser, new[]{ "ReadReceipts", "UnidentifiedDeliveryIndicators", "TypingIndicators", "ProvisioningVersion", "LinkPreviews" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::libsignalservice.push.SyncMessage.Types.StickerPackOperation), global::libsignalservice.push.SyncMessage.Types.StickerPackOperation.Parser, new[]{ "PackId", "PackKey", "Type" }, null, new[]{ typeof(global::libsignalservice.push.SyncMessage.Types.StickerPackOperation.Types.Type) }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::libsignalservice.push.SyncMessage.Types.ViewOnceOpen), global::libsignalservice.push.SyncMessage.Types.ViewOnceOpen.Parser, new[]{ "Sender", "SenderUuid", "Timestamp" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::libsignalservice.push.SyncMessage.Types.MessageRequestResponse), global::libsignalservice.push.SyncMessage.Types.MessageRequestResponse.Parser, new[]{ "ThreadE164", "ThreadUuid", "GroupId", "Type" }, null, new[]{ typeof(global::libsignalservice.push.SyncMessage.Types.MessageRequestResponse.Types.Type) }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::libsignalservice.push.SyncMessage.Types.FetchLatest), global::libsignalservice.push.SyncMessage.Types.FetchLatest.Parser, new[]{ "Type" }, null, new[]{ typeof(global::libsignalservice.push.SyncMessage.Types.FetchLatest.Types.Type) }, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::libsignalservice.push.AttachmentPointer), global::libsignalservice.push.AttachmentPointer.Parser, new[]{ "CdnId", "CdnKey", "ContentType", "Key", "Size", "Thumbnail", "Digest", "FileName", "Flags", "Width", "Height", "Caption", "BlurHash", "UploadTimestamp", "CdnNumber" }, new[]{ "AttachmentIdentifier" }, new[]{ typeof(global::libsignalservice.push.AttachmentPointer.Types.Flags) }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::libsignalservice.push.GroupContext), global::libsignalservice.push.GroupContext.Parser, new[]{ "Id", "Type", "Name", "MembersE164", "Avatar" }, null, new[]{ typeof(global::libsignalservice.push.GroupContext.Types.Type) }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::libsignalservice.push.GroupContextV2), global::libsignalservice.push.GroupContextV2.Parser, new[]{ "MasterKey", "Revision", "GroupChange" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::libsignalservice.push.ContactDetails), global::libsignalservice.push.ContactDetails.Parser, new[]{ "Number", "Uuid", "Name", "Avatar", "Color", "Verified", "ProfileKey", "Blocked", "ExpireTimer", "InboxPosition" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::libsignalservice.push.ContactDetails.Types.Avatar), global::libsignalservice.push.ContactDetails.Types.Avatar.Parser, new[]{ "ContentType", "Length" }, null, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::libsignalservice.push.GroupDetails), global::libsignalservice.push.GroupDetails.Parser, new[]{ "Id", "Name", "MembersE164", "Members", "Avatar", "Active", "ExpireTimer", "Color", "Blocked", "InboxPosition" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::libsignalservice.push.GroupDetails.Types.Avatar), global::libsignalservice.push.GroupDetails.Types.Avatar.Parser, new[]{ "ContentType", "Length" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::libsignalservice.push.GroupDetails.Types.Member), global::libsignalservice.push.GroupDetails.Types.Member.Parser, new[]{ "Uuid", "E164" }, null, null, null, null)})
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class Envelope : pb::IMessage<Envelope> {
    private static readonly pb::MessageParser<Envelope> _parser = new pb::MessageParser<Envelope>(() => new Envelope());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Envelope> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::libsignalservice.push.SignalServiceReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Envelope() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Envelope(Envelope other) : this() {
      _hasBits0 = other._hasBits0;
      type_ = other.type_;
      source_ = other.source_;
      sourceUuid_ = other.sourceUuid_;
      sourceDevice_ = other.sourceDevice_;
      relay_ = other.relay_;
      timestamp_ = other.timestamp_;
      legacyMessage_ = other.legacyMessage_;
      content_ = other.content_;
      serverGuid_ = other.serverGuid_;
      serverTimestamp_ = other.serverTimestamp_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Envelope Clone() {
      return new Envelope(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private readonly static global::libsignalservice.push.Envelope.Types.Type TypeDefaultValue = global::libsignalservice.push.Envelope.Types.Type.Unknown;

    private global::libsignalservice.push.Envelope.Types.Type type_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::libsignalservice.push.Envelope.Types.Type Type {
      get { if ((_hasBits0 & 1) != 0) { return type_; } else { return TypeDefaultValue; } }
      set {
        _hasBits0 |= 1;
        type_ = value;
      }
    }
    /// <summary>Gets whether the "type" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasType {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "type" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearType() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "source" field.</summary>
    public const int SourceFieldNumber = 2;
    private readonly static string SourceDefaultValue = "";

    private string source_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Source {
      get { return source_ ?? SourceDefaultValue; }
      set {
        source_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "source" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasSource {
      get { return source_ != null; }
    }
    /// <summary>Clears the value of the "source" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSource() {
      source_ = null;
    }

    /// <summary>Field number for the "sourceUuid" field.</summary>
    public const int SourceUuidFieldNumber = 11;
    private readonly static string SourceUuidDefaultValue = "";

    private string sourceUuid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SourceUuid {
      get { return sourceUuid_ ?? SourceUuidDefaultValue; }
      set {
        sourceUuid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "sourceUuid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasSourceUuid {
      get { return sourceUuid_ != null; }
    }
    /// <summary>Clears the value of the "sourceUuid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSourceUuid() {
      sourceUuid_ = null;
    }

    /// <summary>Field number for the "sourceDevice" field.</summary>
    public const int SourceDeviceFieldNumber = 7;
    private readonly static uint SourceDeviceDefaultValue = 0;

    private uint sourceDevice_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SourceDevice {
      get { if ((_hasBits0 & 4) != 0) { return sourceDevice_; } else { return SourceDeviceDefaultValue; } }
      set {
        _hasBits0 |= 4;
        sourceDevice_ = value;
      }
    }
    /// <summary>Gets whether the "sourceDevice" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasSourceDevice {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "sourceDevice" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSourceDevice() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "relay" field.</summary>
    public const int RelayFieldNumber = 3;
    private readonly static string RelayDefaultValue = "";

    private string relay_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Relay {
      get { return relay_ ?? RelayDefaultValue; }
      set {
        relay_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "relay" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasRelay {
      get { return relay_ != null; }
    }
    /// <summary>Clears the value of the "relay" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearRelay() {
      relay_ = null;
    }

    /// <summary>Field number for the "timestamp" field.</summary>
    public const int TimestampFieldNumber = 5;
    private readonly static ulong TimestampDefaultValue = 0UL;

    private ulong timestamp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Timestamp {
      get { if ((_hasBits0 & 2) != 0) { return timestamp_; } else { return TimestampDefaultValue; } }
      set {
        _hasBits0 |= 2;
        timestamp_ = value;
      }
    }
    /// <summary>Gets whether the "timestamp" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTimestamp {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "timestamp" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTimestamp() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "legacyMessage" field.</summary>
    public const int LegacyMessageFieldNumber = 6;
    private readonly static pb::ByteString LegacyMessageDefaultValue = pb::ByteString.Empty;

    private pb::ByteString legacyMessage_;
    /// <summary>
    /// Contains an encrypted DataMessage
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString LegacyMessage {
      get { return legacyMessage_ ?? LegacyMessageDefaultValue; }
      set {
        legacyMessage_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "legacyMessage" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasLegacyMessage {
      get { return legacyMessage_ != null; }
    }
    /// <summary>Clears the value of the "legacyMessage" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearLegacyMessage() {
      legacyMessage_ = null;
    }

    /// <summary>Field number for the "content" field.</summary>
    public const int ContentFieldNumber = 8;
    private readonly static pb::ByteString ContentDefaultValue = pb::ByteString.Empty;

    private pb::ByteString content_;
    /// <summary>
    /// Contains an encrypted Content
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Content {
      get { return content_ ?? ContentDefaultValue; }
      set {
        content_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "content" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasContent {
      get { return content_ != null; }
    }
    /// <summary>Clears the value of the "content" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearContent() {
      content_ = null;
    }

    /// <summary>Field number for the "serverGuid" field.</summary>
    public const int ServerGuidFieldNumber = 9;
    private readonly static string ServerGuidDefaultValue = "";

    private string serverGuid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ServerGuid {
      get { return serverGuid_ ?? ServerGuidDefaultValue; }
      set {
        serverGuid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "serverGuid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasServerGuid {
      get { return serverGuid_ != null; }
    }
    /// <summary>Clears the value of the "serverGuid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearServerGuid() {
      serverGuid_ = null;
    }

    /// <summary>Field number for the "serverTimestamp" field.</summary>
    public const int ServerTimestampFieldNumber = 10;
    private readonly static ulong ServerTimestampDefaultValue = 0UL;

    private ulong serverTimestamp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong ServerTimestamp {
      get { if ((_hasBits0 & 8) != 0) { return serverTimestamp_; } else { return ServerTimestampDefaultValue; } }
      set {
        _hasBits0 |= 8;
        serverTimestamp_ = value;
      }
    }
    /// <summary>Gets whether the "serverTimestamp" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasServerTimestamp {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "serverTimestamp" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearServerTimestamp() {
      _hasBits0 &= ~8;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Envelope);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Envelope other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      if (Source != other.Source) return false;
      if (SourceUuid != other.SourceUuid) return false;
      if (SourceDevice != other.SourceDevice) return false;
      if (Relay != other.Relay) return false;
      if (Timestamp != other.Timestamp) return false;
      if (LegacyMessage != other.LegacyMessage) return false;
      if (Content != other.Content) return false;
      if (ServerGuid != other.ServerGuid) return false;
      if (ServerTimestamp != other.ServerTimestamp) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasType) hash ^= Type.GetHashCode();
      if (HasSource) hash ^= Source.GetHashCode();
      if (HasSourceUuid) hash ^= SourceUuid.GetHashCode();
      if (HasSourceDevice) hash ^= SourceDevice.GetHashCode();
      if (HasRelay) hash ^= Relay.GetHashCode();
      if (HasTimestamp) hash ^= Timestamp.GetHashCode();
      if (HasLegacyMessage) hash ^= LegacyMessage.GetHashCode();
      if (HasContent) hash ^= Content.GetHashCode();
      if (HasServerGuid) hash ^= ServerGuid.GetHashCode();
      if (HasServerTimestamp) hash ^= ServerTimestamp.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasType) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Type);
      }
      if (HasSource) {
        output.WriteRawTag(18);
        output.WriteString(Source);
      }
      if (HasRelay) {
        output.WriteRawTag(26);
        output.WriteString(Relay);
      }
      if (HasTimestamp) {
        output.WriteRawTag(40);
        output.WriteUInt64(Timestamp);
      }
      if (HasLegacyMessage) {
        output.WriteRawTag(50);
        output.WriteBytes(LegacyMessage);
      }
      if (HasSourceDevice) {
        output.WriteRawTag(56);
        output.WriteUInt32(SourceDevice);
      }
      if (HasContent) {
        output.WriteRawTag(66);
        output.WriteBytes(Content);
      }
      if (HasServerGuid) {
        output.WriteRawTag(74);
        output.WriteString(ServerGuid);
      }
      if (HasServerTimestamp) {
        output.WriteRawTag(80);
        output.WriteUInt64(ServerTimestamp);
      }
      if (HasSourceUuid) {
        output.WriteRawTag(90);
        output.WriteString(SourceUuid);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasType) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (HasSource) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Source);
      }
      if (HasSourceUuid) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SourceUuid);
      }
      if (HasSourceDevice) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SourceDevice);
      }
      if (HasRelay) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Relay);
      }
      if (HasTimestamp) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Timestamp);
      }
      if (HasLegacyMessage) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(LegacyMessage);
      }
      if (HasContent) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Content);
      }
      if (HasServerGuid) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ServerGuid);
      }
      if (HasServerTimestamp) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(ServerTimestamp);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Envelope other) {
      if (other == null) {
        return;
      }
      if (other.HasType) {
        Type = other.Type;
      }
      if (other.HasSource) {
        Source = other.Source;
      }
      if (other.HasSourceUuid) {
        SourceUuid = other.SourceUuid;
      }
      if (other.HasSourceDevice) {
        SourceDevice = other.SourceDevice;
      }
      if (other.HasRelay) {
        Relay = other.Relay;
      }
      if (other.HasTimestamp) {
        Timestamp = other.Timestamp;
      }
      if (other.HasLegacyMessage) {
        LegacyMessage = other.LegacyMessage;
      }
      if (other.HasContent) {
        Content = other.Content;
      }
      if (other.HasServerGuid) {
        ServerGuid = other.ServerGuid;
      }
      if (other.HasServerTimestamp) {
        ServerTimestamp = other.ServerTimestamp;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Type = (global::libsignalservice.push.Envelope.Types.Type) input.ReadEnum();
            break;
          }
          case 18: {
            Source = input.ReadString();
            break;
          }
          case 26: {
            Relay = input.ReadString();
            break;
          }
          case 40: {
            Timestamp = input.ReadUInt64();
            break;
          }
          case 50: {
            LegacyMessage = input.ReadBytes();
            break;
          }
          case 56: {
            SourceDevice = input.ReadUInt32();
            break;
          }
          case 66: {
            Content = input.ReadBytes();
            break;
          }
          case 74: {
            ServerGuid = input.ReadString();
            break;
          }
          case 80: {
            ServerTimestamp = input.ReadUInt64();
            break;
          }
          case 90: {
            SourceUuid = input.ReadString();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the Envelope message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum Type {
        [pbr::OriginalName("UNKNOWN")] Unknown = 0,
        [pbr::OriginalName("CIPHERTEXT")] Ciphertext = 1,
        [pbr::OriginalName("KEY_EXCHANGE")] KeyExchange = 2,
        [pbr::OriginalName("PREKEY_BUNDLE")] PrekeyBundle = 3,
        [pbr::OriginalName("RECEIPT")] Receipt = 5,
        [pbr::OriginalName("UNIDENTIFIED_SENDER")] UnidentifiedSender = 6,
      }

    }
    #endregion

  }

  public sealed partial class Content : pb::IMessage<Content> {
    private static readonly pb::MessageParser<Content> _parser = new pb::MessageParser<Content>(() => new Content());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Content> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::libsignalservice.push.SignalServiceReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Content() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Content(Content other) : this() {
      dataMessage_ = other.dataMessage_ != null ? other.dataMessage_.Clone() : null;
      syncMessage_ = other.syncMessage_ != null ? other.syncMessage_.Clone() : null;
      callingMessage_ = other.callingMessage_ != null ? other.callingMessage_.Clone() : null;
      nullMessage_ = other.nullMessage_ != null ? other.nullMessage_.Clone() : null;
      receiptMessage_ = other.receiptMessage_ != null ? other.receiptMessage_.Clone() : null;
      typingMessage_ = other.typingMessage_ != null ? other.typingMessage_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Content Clone() {
      return new Content(this);
    }

    /// <summary>Field number for the "dataMessage" field.</summary>
    public const int DataMessageFieldNumber = 1;
    private global::libsignalservice.push.DataMessage dataMessage_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::libsignalservice.push.DataMessage DataMessage {
      get { return dataMessage_; }
      set {
        dataMessage_ = value;
      }
    }

    /// <summary>Field number for the "syncMessage" field.</summary>
    public const int SyncMessageFieldNumber = 2;
    private global::libsignalservice.push.SyncMessage syncMessage_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::libsignalservice.push.SyncMessage SyncMessage {
      get { return syncMessage_; }
      set {
        syncMessage_ = value;
      }
    }

    /// <summary>Field number for the "callingMessage" field.</summary>
    public const int CallingMessageFieldNumber = 3;
    private global::libsignalservice.push.CallingMessage callingMessage_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::libsignalservice.push.CallingMessage CallingMessage {
      get { return callingMessage_; }
      set {
        callingMessage_ = value;
      }
    }

    /// <summary>Field number for the "nullMessage" field.</summary>
    public const int NullMessageFieldNumber = 4;
    private global::libsignalservice.push.NullMessage nullMessage_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::libsignalservice.push.NullMessage NullMessage {
      get { return nullMessage_; }
      set {
        nullMessage_ = value;
      }
    }

    /// <summary>Field number for the "receiptMessage" field.</summary>
    public const int ReceiptMessageFieldNumber = 5;
    private global::libsignalservice.push.ReceiptMessage receiptMessage_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::libsignalservice.push.ReceiptMessage ReceiptMessage {
      get { return receiptMessage_; }
      set {
        receiptMessage_ = value;
      }
    }

    /// <summary>Field number for the "typingMessage" field.</summary>
    public const int TypingMessageFieldNumber = 6;
    private global::libsignalservice.push.TypingMessage typingMessage_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::libsignalservice.push.TypingMessage TypingMessage {
      get { return typingMessage_; }
      set {
        typingMessage_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Content);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Content other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(DataMessage, other.DataMessage)) return false;
      if (!object.Equals(SyncMessage, other.SyncMessage)) return false;
      if (!object.Equals(CallingMessage, other.CallingMessage)) return false;
      if (!object.Equals(NullMessage, other.NullMessage)) return false;
      if (!object.Equals(ReceiptMessage, other.ReceiptMessage)) return false;
      if (!object.Equals(TypingMessage, other.TypingMessage)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (dataMessage_ != null) hash ^= DataMessage.GetHashCode();
      if (syncMessage_ != null) hash ^= SyncMessage.GetHashCode();
      if (callingMessage_ != null) hash ^= CallingMessage.GetHashCode();
      if (nullMessage_ != null) hash ^= NullMessage.GetHashCode();
      if (receiptMessage_ != null) hash ^= ReceiptMessage.GetHashCode();
      if (typingMessage_ != null) hash ^= TypingMessage.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (dataMessage_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(DataMessage);
      }
      if (syncMessage_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(SyncMessage);
      }
      if (callingMessage_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(CallingMessage);
      }
      if (nullMessage_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(NullMessage);
      }
      if (receiptMessage_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(ReceiptMessage);
      }
      if (typingMessage_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(TypingMessage);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (dataMessage_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DataMessage);
      }
      if (syncMessage_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SyncMessage);
      }
      if (callingMessage_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CallingMessage);
      }
      if (nullMessage_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(NullMessage);
      }
      if (receiptMessage_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ReceiptMessage);
      }
      if (typingMessage_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TypingMessage);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Content other) {
      if (other == null) {
        return;
      }
      if (other.dataMessage_ != null) {
        if (dataMessage_ == null) {
          DataMessage = new global::libsignalservice.push.DataMessage();
        }
        DataMessage.MergeFrom(other.DataMessage);
      }
      if (other.syncMessage_ != null) {
        if (syncMessage_ == null) {
          SyncMessage = new global::libsignalservice.push.SyncMessage();
        }
        SyncMessage.MergeFrom(other.SyncMessage);
      }
      if (other.callingMessage_ != null) {
        if (callingMessage_ == null) {
          CallingMessage = new global::libsignalservice.push.CallingMessage();
        }
        CallingMessage.MergeFrom(other.CallingMessage);
      }
      if (other.nullMessage_ != null) {
        if (nullMessage_ == null) {
          NullMessage = new global::libsignalservice.push.NullMessage();
        }
        NullMessage.MergeFrom(other.NullMessage);
      }
      if (other.receiptMessage_ != null) {
        if (receiptMessage_ == null) {
          ReceiptMessage = new global::libsignalservice.push.ReceiptMessage();
        }
        ReceiptMessage.MergeFrom(other.ReceiptMessage);
      }
      if (other.typingMessage_ != null) {
        if (typingMessage_ == null) {
          TypingMessage = new global::libsignalservice.push.TypingMessage();
        }
        TypingMessage.MergeFrom(other.TypingMessage);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (dataMessage_ == null) {
              DataMessage = new global::libsignalservice.push.DataMessage();
            }
            input.ReadMessage(DataMessage);
            break;
          }
          case 18: {
            if (syncMessage_ == null) {
              SyncMessage = new global::libsignalservice.push.SyncMessage();
            }
            input.ReadMessage(SyncMessage);
            break;
          }
          case 26: {
            if (callingMessage_ == null) {
              CallingMessage = new global::libsignalservice.push.CallingMessage();
            }
            input.ReadMessage(CallingMessage);
            break;
          }
          case 34: {
            if (nullMessage_ == null) {
              NullMessage = new global::libsignalservice.push.NullMessage();
            }
            input.ReadMessage(NullMessage);
            break;
          }
          case 42: {
            if (receiptMessage_ == null) {
              ReceiptMessage = new global::libsignalservice.push.ReceiptMessage();
            }
            input.ReadMessage(ReceiptMessage);
            break;
          }
          case 50: {
            if (typingMessage_ == null) {
              TypingMessage = new global::libsignalservice.push.TypingMessage();
            }
            input.ReadMessage(TypingMessage);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Everything in CallingMessage must be kept in sync with RingRTC (ringrtc-node).
  /// Whenever you change this, make sure you change textsecure.d.ts and RingRTC.
  /// </summary>
  public sealed partial class CallingMessage : pb::IMessage<CallingMessage> {
    private static readonly pb::MessageParser<CallingMessage> _parser = new pb::MessageParser<CallingMessage>(() => new CallingMessage());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CallingMessage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::libsignalservice.push.SignalServiceReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CallingMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CallingMessage(CallingMessage other) : this() {
      _hasBits0 = other._hasBits0;
      offer_ = other.offer_ != null ? other.offer_.Clone() : null;
      answer_ = other.answer_ != null ? other.answer_.Clone() : null;
      iceCandidates_ = other.iceCandidates_.Clone();
      legacyHangup_ = other.legacyHangup_ != null ? other.legacyHangup_.Clone() : null;
      busy_ = other.busy_ != null ? other.busy_.Clone() : null;
      hangup_ = other.hangup_ != null ? other.hangup_.Clone() : null;
      supportsMultiRing_ = other.supportsMultiRing_;
      destinationDeviceId_ = other.destinationDeviceId_;
      opaque_ = other.opaque_ != null ? other.opaque_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CallingMessage Clone() {
      return new CallingMessage(this);
    }

    /// <summary>Field number for the "offer" field.</summary>
    public const int OfferFieldNumber = 1;
    private global::libsignalservice.push.CallingMessage.Types.Offer offer_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::libsignalservice.push.CallingMessage.Types.Offer Offer {
      get { return offer_; }
      set {
        offer_ = value;
      }
    }

    /// <summary>Field number for the "answer" field.</summary>
    public const int AnswerFieldNumber = 2;
    private global::libsignalservice.push.CallingMessage.Types.Answer answer_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::libsignalservice.push.CallingMessage.Types.Answer Answer {
      get { return answer_; }
      set {
        answer_ = value;
      }
    }

    /// <summary>Field number for the "iceCandidates" field.</summary>
    public const int IceCandidatesFieldNumber = 3;
    private static readonly pb::FieldCodec<global::libsignalservice.push.CallingMessage.Types.IceCandidate> _repeated_iceCandidates_codec
        = pb::FieldCodec.ForMessage(26, global::libsignalservice.push.CallingMessage.Types.IceCandidate.Parser);
    private readonly pbc::RepeatedField<global::libsignalservice.push.CallingMessage.Types.IceCandidate> iceCandidates_ = new pbc::RepeatedField<global::libsignalservice.push.CallingMessage.Types.IceCandidate>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::libsignalservice.push.CallingMessage.Types.IceCandidate> IceCandidates {
      get { return iceCandidates_; }
    }

    /// <summary>Field number for the "legacyHangup" field.</summary>
    public const int LegacyHangupFieldNumber = 4;
    private global::libsignalservice.push.CallingMessage.Types.Hangup legacyHangup_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::libsignalservice.push.CallingMessage.Types.Hangup LegacyHangup {
      get { return legacyHangup_; }
      set {
        legacyHangup_ = value;
      }
    }

    /// <summary>Field number for the "busy" field.</summary>
    public const int BusyFieldNumber = 5;
    private global::libsignalservice.push.CallingMessage.Types.Busy busy_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::libsignalservice.push.CallingMessage.Types.Busy Busy {
      get { return busy_; }
      set {
        busy_ = value;
      }
    }

    /// <summary>Field number for the "hangup" field.</summary>
    public const int HangupFieldNumber = 7;
    private global::libsignalservice.push.CallingMessage.Types.Hangup hangup_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::libsignalservice.push.CallingMessage.Types.Hangup Hangup {
      get { return hangup_; }
      set {
        hangup_ = value;
      }
    }

    /// <summary>Field number for the "supportsMultiRing" field.</summary>
    public const int SupportsMultiRingFieldNumber = 8;
    private readonly static bool SupportsMultiRingDefaultValue = false;

    private bool supportsMultiRing_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool SupportsMultiRing {
      get { if ((_hasBits0 & 1) != 0) { return supportsMultiRing_; } else { return SupportsMultiRingDefaultValue; } }
      set {
        _hasBits0 |= 1;
        supportsMultiRing_ = value;
      }
    }
    /// <summary>Gets whether the "supportsMultiRing" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasSupportsMultiRing {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "supportsMultiRing" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSupportsMultiRing() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "destinationDeviceId" field.</summary>
    public const int DestinationDeviceIdFieldNumber = 9;
    private readonly static uint DestinationDeviceIdDefaultValue = 0;

    private uint destinationDeviceId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint DestinationDeviceId {
      get { if ((_hasBits0 & 2) != 0) { return destinationDeviceId_; } else { return DestinationDeviceIdDefaultValue; } }
      set {
        _hasBits0 |= 2;
        destinationDeviceId_ = value;
      }
    }
    /// <summary>Gets whether the "destinationDeviceId" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasDestinationDeviceId {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "destinationDeviceId" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearDestinationDeviceId() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "opaque" field.</summary>
    public const int OpaqueFieldNumber = 10;
    private global::libsignalservice.push.CallingMessage.Types.Opaque opaque_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::libsignalservice.push.CallingMessage.Types.Opaque Opaque {
      get { return opaque_; }
      set {
        opaque_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CallingMessage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CallingMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Offer, other.Offer)) return false;
      if (!object.Equals(Answer, other.Answer)) return false;
      if(!iceCandidates_.Equals(other.iceCandidates_)) return false;
      if (!object.Equals(LegacyHangup, other.LegacyHangup)) return false;
      if (!object.Equals(Busy, other.Busy)) return false;
      if (!object.Equals(Hangup, other.Hangup)) return false;
      if (SupportsMultiRing != other.SupportsMultiRing) return false;
      if (DestinationDeviceId != other.DestinationDeviceId) return false;
      if (!object.Equals(Opaque, other.Opaque)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (offer_ != null) hash ^= Offer.GetHashCode();
      if (answer_ != null) hash ^= Answer.GetHashCode();
      hash ^= iceCandidates_.GetHashCode();
      if (legacyHangup_ != null) hash ^= LegacyHangup.GetHashCode();
      if (busy_ != null) hash ^= Busy.GetHashCode();
      if (hangup_ != null) hash ^= Hangup.GetHashCode();
      if (HasSupportsMultiRing) hash ^= SupportsMultiRing.GetHashCode();
      if (HasDestinationDeviceId) hash ^= DestinationDeviceId.GetHashCode();
      if (opaque_ != null) hash ^= Opaque.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (offer_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Offer);
      }
      if (answer_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Answer);
      }
      iceCandidates_.WriteTo(output, _repeated_iceCandidates_codec);
      if (legacyHangup_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(LegacyHangup);
      }
      if (busy_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Busy);
      }
      if (hangup_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(Hangup);
      }
      if (HasSupportsMultiRing) {
        output.WriteRawTag(64);
        output.WriteBool(SupportsMultiRing);
      }
      if (HasDestinationDeviceId) {
        output.WriteRawTag(72);
        output.WriteUInt32(DestinationDeviceId);
      }
      if (opaque_ != null) {
        output.WriteRawTag(82);
        output.WriteMessage(Opaque);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (offer_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Offer);
      }
      if (answer_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Answer);
      }
      size += iceCandidates_.CalculateSize(_repeated_iceCandidates_codec);
      if (legacyHangup_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(LegacyHangup);
      }
      if (busy_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Busy);
      }
      if (hangup_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Hangup);
      }
      if (HasSupportsMultiRing) {
        size += 1 + 1;
      }
      if (HasDestinationDeviceId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(DestinationDeviceId);
      }
      if (opaque_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Opaque);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CallingMessage other) {
      if (other == null) {
        return;
      }
      if (other.offer_ != null) {
        if (offer_ == null) {
          Offer = new global::libsignalservice.push.CallingMessage.Types.Offer();
        }
        Offer.MergeFrom(other.Offer);
      }
      if (other.answer_ != null) {
        if (answer_ == null) {
          Answer = new global::libsignalservice.push.CallingMessage.Types.Answer();
        }
        Answer.MergeFrom(other.Answer);
      }
      iceCandidates_.Add(other.iceCandidates_);
      if (other.legacyHangup_ != null) {
        if (legacyHangup_ == null) {
          LegacyHangup = new global::libsignalservice.push.CallingMessage.Types.Hangup();
        }
        LegacyHangup.MergeFrom(other.LegacyHangup);
      }
      if (other.busy_ != null) {
        if (busy_ == null) {
          Busy = new global::libsignalservice.push.CallingMessage.Types.Busy();
        }
        Busy.MergeFrom(other.Busy);
      }
      if (other.hangup_ != null) {
        if (hangup_ == null) {
          Hangup = new global::libsignalservice.push.CallingMessage.Types.Hangup();
        }
        Hangup.MergeFrom(other.Hangup);
      }
      if (other.HasSupportsMultiRing) {
        SupportsMultiRing = other.SupportsMultiRing;
      }
      if (other.HasDestinationDeviceId) {
        DestinationDeviceId = other.DestinationDeviceId;
      }
      if (other.opaque_ != null) {
        if (opaque_ == null) {
          Opaque = new global::libsignalservice.push.CallingMessage.Types.Opaque();
        }
        Opaque.MergeFrom(other.Opaque);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (offer_ == null) {
              Offer = new global::libsignalservice.push.CallingMessage.Types.Offer();
            }
            input.ReadMessage(Offer);
            break;
          }
          case 18: {
            if (answer_ == null) {
              Answer = new global::libsignalservice.push.CallingMessage.Types.Answer();
            }
            input.ReadMessage(Answer);
            break;
          }
          case 26: {
            iceCandidates_.AddEntriesFrom(input, _repeated_iceCandidates_codec);
            break;
          }
          case 34: {
            if (legacyHangup_ == null) {
              LegacyHangup = new global::libsignalservice.push.CallingMessage.Types.Hangup();
            }
            input.ReadMessage(LegacyHangup);
            break;
          }
          case 42: {
            if (busy_ == null) {
              Busy = new global::libsignalservice.push.CallingMessage.Types.Busy();
            }
            input.ReadMessage(Busy);
            break;
          }
          case 58: {
            if (hangup_ == null) {
              Hangup = new global::libsignalservice.push.CallingMessage.Types.Hangup();
            }
            input.ReadMessage(Hangup);
            break;
          }
          case 64: {
            SupportsMultiRing = input.ReadBool();
            break;
          }
          case 72: {
            DestinationDeviceId = input.ReadUInt32();
            break;
          }
          case 82: {
            if (opaque_ == null) {
              Opaque = new global::libsignalservice.push.CallingMessage.Types.Opaque();
            }
            input.ReadMessage(Opaque);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the CallingMessage message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class Offer : pb::IMessage<Offer> {
        private static readonly pb::MessageParser<Offer> _parser = new pb::MessageParser<Offer>(() => new Offer());
        private pb::UnknownFieldSet _unknownFields;
        private int _hasBits0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Offer> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::libsignalservice.push.CallingMessage.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Offer() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Offer(Offer other) : this() {
          _hasBits0 = other._hasBits0;
          callId_ = other.callId_;
          sdp_ = other.sdp_;
          type_ = other.type_;
          opaque_ = other.opaque_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Offer Clone() {
          return new Offer(this);
        }

        /// <summary>Field number for the "callId" field.</summary>
        public const int CallIdFieldNumber = 1;
        private readonly static ulong CallIdDefaultValue = 0UL;

        private ulong callId_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ulong CallId {
          get { if ((_hasBits0 & 1) != 0) { return callId_; } else { return CallIdDefaultValue; } }
          set {
            _hasBits0 |= 1;
            callId_ = value;
          }
        }
        /// <summary>Gets whether the "callId" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasCallId {
          get { return (_hasBits0 & 1) != 0; }
        }
        /// <summary>Clears the value of the "callId" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearCallId() {
          _hasBits0 &= ~1;
        }

        /// <summary>Field number for the "sdp" field.</summary>
        public const int SdpFieldNumber = 2;
        private readonly static string SdpDefaultValue = "";

        private string sdp_;
        /// <summary>
        /// Legacy/deprecated; replaced by 'opaque'
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Sdp {
          get { return sdp_ ?? SdpDefaultValue; }
          set {
            sdp_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }
        /// <summary>Gets whether the "sdp" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasSdp {
          get { return sdp_ != null; }
        }
        /// <summary>Clears the value of the "sdp" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearSdp() {
          sdp_ = null;
        }

        /// <summary>Field number for the "type" field.</summary>
        public const int TypeFieldNumber = 3;
        private readonly static global::libsignalservice.push.CallingMessage.Types.Offer.Types.Type TypeDefaultValue = global::libsignalservice.push.CallingMessage.Types.Offer.Types.Type.OfferAudioCall;

        private global::libsignalservice.push.CallingMessage.Types.Offer.Types.Type type_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::libsignalservice.push.CallingMessage.Types.Offer.Types.Type Type {
          get { if ((_hasBits0 & 2) != 0) { return type_; } else { return TypeDefaultValue; } }
          set {
            _hasBits0 |= 2;
            type_ = value;
          }
        }
        /// <summary>Gets whether the "type" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasType {
          get { return (_hasBits0 & 2) != 0; }
        }
        /// <summary>Clears the value of the "type" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearType() {
          _hasBits0 &= ~2;
        }

        /// <summary>Field number for the "opaque" field.</summary>
        public const int OpaqueFieldNumber = 4;
        private readonly static pb::ByteString OpaqueDefaultValue = pb::ByteString.Empty;

        private pb::ByteString opaque_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pb::ByteString Opaque {
          get { return opaque_ ?? OpaqueDefaultValue; }
          set {
            opaque_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }
        /// <summary>Gets whether the "opaque" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasOpaque {
          get { return opaque_ != null; }
        }
        /// <summary>Clears the value of the "opaque" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearOpaque() {
          opaque_ = null;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Offer);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Offer other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (CallId != other.CallId) return false;
          if (Sdp != other.Sdp) return false;
          if (Type != other.Type) return false;
          if (Opaque != other.Opaque) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (HasCallId) hash ^= CallId.GetHashCode();
          if (HasSdp) hash ^= Sdp.GetHashCode();
          if (HasType) hash ^= Type.GetHashCode();
          if (HasOpaque) hash ^= Opaque.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (HasCallId) {
            output.WriteRawTag(8);
            output.WriteUInt64(CallId);
          }
          if (HasSdp) {
            output.WriteRawTag(18);
            output.WriteString(Sdp);
          }
          if (HasType) {
            output.WriteRawTag(24);
            output.WriteEnum((int) Type);
          }
          if (HasOpaque) {
            output.WriteRawTag(34);
            output.WriteBytes(Opaque);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (HasCallId) {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(CallId);
          }
          if (HasSdp) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Sdp);
          }
          if (HasType) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
          }
          if (HasOpaque) {
            size += 1 + pb::CodedOutputStream.ComputeBytesSize(Opaque);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Offer other) {
          if (other == null) {
            return;
          }
          if (other.HasCallId) {
            CallId = other.CallId;
          }
          if (other.HasSdp) {
            Sdp = other.Sdp;
          }
          if (other.HasType) {
            Type = other.Type;
          }
          if (other.HasOpaque) {
            Opaque = other.Opaque;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                CallId = input.ReadUInt64();
                break;
              }
              case 18: {
                Sdp = input.ReadString();
                break;
              }
              case 24: {
                Type = (global::libsignalservice.push.CallingMessage.Types.Offer.Types.Type) input.ReadEnum();
                break;
              }
              case 34: {
                Opaque = input.ReadBytes();
                break;
              }
            }
          }
        }

        #region Nested types
        /// <summary>Container for nested types declared in the Offer message type.</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static partial class Types {
          public enum Type {
            [pbr::OriginalName("OFFER_AUDIO_CALL")] OfferAudioCall = 0,
            [pbr::OriginalName("OFFER_VIDEO_CALL")] OfferVideoCall = 1,
          }

        }
        #endregion

      }

      public sealed partial class Answer : pb::IMessage<Answer> {
        private static readonly pb::MessageParser<Answer> _parser = new pb::MessageParser<Answer>(() => new Answer());
        private pb::UnknownFieldSet _unknownFields;
        private int _hasBits0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Answer> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::libsignalservice.push.CallingMessage.Descriptor.NestedTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Answer() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Answer(Answer other) : this() {
          _hasBits0 = other._hasBits0;
          callId_ = other.callId_;
          sdp_ = other.sdp_;
          opaque_ = other.opaque_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Answer Clone() {
          return new Answer(this);
        }

        /// <summary>Field number for the "callId" field.</summary>
        public const int CallIdFieldNumber = 1;
        private readonly static ulong CallIdDefaultValue = 0UL;

        private ulong callId_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ulong CallId {
          get { if ((_hasBits0 & 1) != 0) { return callId_; } else { return CallIdDefaultValue; } }
          set {
            _hasBits0 |= 1;
            callId_ = value;
          }
        }
        /// <summary>Gets whether the "callId" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasCallId {
          get { return (_hasBits0 & 1) != 0; }
        }
        /// <summary>Clears the value of the "callId" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearCallId() {
          _hasBits0 &= ~1;
        }

        /// <summary>Field number for the "sdp" field.</summary>
        public const int SdpFieldNumber = 2;
        private readonly static string SdpDefaultValue = "";

        private string sdp_;
        /// <summary>
        /// Legacy/deprecated; replaced by 'opaque'
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Sdp {
          get { return sdp_ ?? SdpDefaultValue; }
          set {
            sdp_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }
        /// <summary>Gets whether the "sdp" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasSdp {
          get { return sdp_ != null; }
        }
        /// <summary>Clears the value of the "sdp" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearSdp() {
          sdp_ = null;
        }

        /// <summary>Field number for the "opaque" field.</summary>
        public const int OpaqueFieldNumber = 3;
        private readonly static pb::ByteString OpaqueDefaultValue = pb::ByteString.Empty;

        private pb::ByteString opaque_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pb::ByteString Opaque {
          get { return opaque_ ?? OpaqueDefaultValue; }
          set {
            opaque_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }
        /// <summary>Gets whether the "opaque" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasOpaque {
          get { return opaque_ != null; }
        }
        /// <summary>Clears the value of the "opaque" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearOpaque() {
          opaque_ = null;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Answer);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Answer other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (CallId != other.CallId) return false;
          if (Sdp != other.Sdp) return false;
          if (Opaque != other.Opaque) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (HasCallId) hash ^= CallId.GetHashCode();
          if (HasSdp) hash ^= Sdp.GetHashCode();
          if (HasOpaque) hash ^= Opaque.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (HasCallId) {
            output.WriteRawTag(8);
            output.WriteUInt64(CallId);
          }
          if (HasSdp) {
            output.WriteRawTag(18);
            output.WriteString(Sdp);
          }
          if (HasOpaque) {
            output.WriteRawTag(26);
            output.WriteBytes(Opaque);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (HasCallId) {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(CallId);
          }
          if (HasSdp) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Sdp);
          }
          if (HasOpaque) {
            size += 1 + pb::CodedOutputStream.ComputeBytesSize(Opaque);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Answer other) {
          if (other == null) {
            return;
          }
          if (other.HasCallId) {
            CallId = other.CallId;
          }
          if (other.HasSdp) {
            Sdp = other.Sdp;
          }
          if (other.HasOpaque) {
            Opaque = other.Opaque;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                CallId = input.ReadUInt64();
                break;
              }
              case 18: {
                Sdp = input.ReadString();
                break;
              }
              case 26: {
                Opaque = input.ReadBytes();
                break;
              }
            }
          }
        }

      }

      public sealed partial class IceCandidate : pb::IMessage<IceCandidate> {
        private static readonly pb::MessageParser<IceCandidate> _parser = new pb::MessageParser<IceCandidate>(() => new IceCandidate());
        private pb::UnknownFieldSet _unknownFields;
        private int _hasBits0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<IceCandidate> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::libsignalservice.push.CallingMessage.Descriptor.NestedTypes[2]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public IceCandidate() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public IceCandidate(IceCandidate other) : this() {
          _hasBits0 = other._hasBits0;
          callId_ = other.callId_;
          mid_ = other.mid_;
          line_ = other.line_;
          sdp_ = other.sdp_;
          opaque_ = other.opaque_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public IceCandidate Clone() {
          return new IceCandidate(this);
        }

        /// <summary>Field number for the "callId" field.</summary>
        public const int CallIdFieldNumber = 1;
        private readonly static ulong CallIdDefaultValue = 0UL;

        private ulong callId_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ulong CallId {
          get { if ((_hasBits0 & 1) != 0) { return callId_; } else { return CallIdDefaultValue; } }
          set {
            _hasBits0 |= 1;
            callId_ = value;
          }
        }
        /// <summary>Gets whether the "callId" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasCallId {
          get { return (_hasBits0 & 1) != 0; }
        }
        /// <summary>Clears the value of the "callId" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearCallId() {
          _hasBits0 &= ~1;
        }

        /// <summary>Field number for the "mid" field.</summary>
        public const int MidFieldNumber = 2;
        private readonly static string MidDefaultValue = "";

        private string mid_;
        /// <summary>
        /// Legacy/deprecated; remove when old clients are gone.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Mid {
          get { return mid_ ?? MidDefaultValue; }
          set {
            mid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }
        /// <summary>Gets whether the "mid" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasMid {
          get { return mid_ != null; }
        }
        /// <summary>Clears the value of the "mid" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearMid() {
          mid_ = null;
        }

        /// <summary>Field number for the "line" field.</summary>
        public const int LineFieldNumber = 3;
        private readonly static uint LineDefaultValue = 0;

        private uint line_;
        /// <summary>
        /// Legacy/deprecated; remove when old clients are gone.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Line {
          get { if ((_hasBits0 & 2) != 0) { return line_; } else { return LineDefaultValue; } }
          set {
            _hasBits0 |= 2;
            line_ = value;
          }
        }
        /// <summary>Gets whether the "line" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasLine {
          get { return (_hasBits0 & 2) != 0; }
        }
        /// <summary>Clears the value of the "line" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearLine() {
          _hasBits0 &= ~2;
        }

        /// <summary>Field number for the "sdp" field.</summary>
        public const int SdpFieldNumber = 4;
        private readonly static string SdpDefaultValue = "";

        private string sdp_;
        /// <summary>
        /// Legacy/deprecated; replaced by 'opaque'
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Sdp {
          get { return sdp_ ?? SdpDefaultValue; }
          set {
            sdp_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }
        /// <summary>Gets whether the "sdp" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasSdp {
          get { return sdp_ != null; }
        }
        /// <summary>Clears the value of the "sdp" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearSdp() {
          sdp_ = null;
        }

        /// <summary>Field number for the "opaque" field.</summary>
        public const int OpaqueFieldNumber = 5;
        private readonly static pb::ByteString OpaqueDefaultValue = pb::ByteString.Empty;

        private pb::ByteString opaque_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pb::ByteString Opaque {
          get { return opaque_ ?? OpaqueDefaultValue; }
          set {
            opaque_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }
        /// <summary>Gets whether the "opaque" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasOpaque {
          get { return opaque_ != null; }
        }
        /// <summary>Clears the value of the "opaque" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearOpaque() {
          opaque_ = null;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as IceCandidate);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(IceCandidate other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (CallId != other.CallId) return false;
          if (Mid != other.Mid) return false;
          if (Line != other.Line) return false;
          if (Sdp != other.Sdp) return false;
          if (Opaque != other.Opaque) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (HasCallId) hash ^= CallId.GetHashCode();
          if (HasMid) hash ^= Mid.GetHashCode();
          if (HasLine) hash ^= Line.GetHashCode();
          if (HasSdp) hash ^= Sdp.GetHashCode();
          if (HasOpaque) hash ^= Opaque.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (HasCallId) {
            output.WriteRawTag(8);
            output.WriteUInt64(CallId);
          }
          if (HasMid) {
            output.WriteRawTag(18);
            output.WriteString(Mid);
          }
          if (HasLine) {
            output.WriteRawTag(24);
            output.WriteUInt32(Line);
          }
          if (HasSdp) {
            output.WriteRawTag(34);
            output.WriteString(Sdp);
          }
          if (HasOpaque) {
            output.WriteRawTag(42);
            output.WriteBytes(Opaque);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (HasCallId) {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(CallId);
          }
          if (HasMid) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Mid);
          }
          if (HasLine) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Line);
          }
          if (HasSdp) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Sdp);
          }
          if (HasOpaque) {
            size += 1 + pb::CodedOutputStream.ComputeBytesSize(Opaque);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(IceCandidate other) {
          if (other == null) {
            return;
          }
          if (other.HasCallId) {
            CallId = other.CallId;
          }
          if (other.HasMid) {
            Mid = other.Mid;
          }
          if (other.HasLine) {
            Line = other.Line;
          }
          if (other.HasSdp) {
            Sdp = other.Sdp;
          }
          if (other.HasOpaque) {
            Opaque = other.Opaque;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                CallId = input.ReadUInt64();
                break;
              }
              case 18: {
                Mid = input.ReadString();
                break;
              }
              case 24: {
                Line = input.ReadUInt32();
                break;
              }
              case 34: {
                Sdp = input.ReadString();
                break;
              }
              case 42: {
                Opaque = input.ReadBytes();
                break;
              }
            }
          }
        }

      }

      public sealed partial class Busy : pb::IMessage<Busy> {
        private static readonly pb::MessageParser<Busy> _parser = new pb::MessageParser<Busy>(() => new Busy());
        private pb::UnknownFieldSet _unknownFields;
        private int _hasBits0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Busy> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::libsignalservice.push.CallingMessage.Descriptor.NestedTypes[3]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Busy() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Busy(Busy other) : this() {
          _hasBits0 = other._hasBits0;
          callId_ = other.callId_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Busy Clone() {
          return new Busy(this);
        }

        /// <summary>Field number for the "callId" field.</summary>
        public const int CallIdFieldNumber = 1;
        private readonly static ulong CallIdDefaultValue = 0UL;

        private ulong callId_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ulong CallId {
          get { if ((_hasBits0 & 1) != 0) { return callId_; } else { return CallIdDefaultValue; } }
          set {
            _hasBits0 |= 1;
            callId_ = value;
          }
        }
        /// <summary>Gets whether the "callId" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasCallId {
          get { return (_hasBits0 & 1) != 0; }
        }
        /// <summary>Clears the value of the "callId" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearCallId() {
          _hasBits0 &= ~1;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Busy);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Busy other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (CallId != other.CallId) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (HasCallId) hash ^= CallId.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (HasCallId) {
            output.WriteRawTag(8);
            output.WriteUInt64(CallId);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (HasCallId) {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(CallId);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Busy other) {
          if (other == null) {
            return;
          }
          if (other.HasCallId) {
            CallId = other.CallId;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                CallId = input.ReadUInt64();
                break;
              }
            }
          }
        }

      }

      public sealed partial class Hangup : pb::IMessage<Hangup> {
        private static readonly pb::MessageParser<Hangup> _parser = new pb::MessageParser<Hangup>(() => new Hangup());
        private pb::UnknownFieldSet _unknownFields;
        private int _hasBits0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Hangup> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::libsignalservice.push.CallingMessage.Descriptor.NestedTypes[4]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Hangup() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Hangup(Hangup other) : this() {
          _hasBits0 = other._hasBits0;
          callId_ = other.callId_;
          type_ = other.type_;
          deviceId_ = other.deviceId_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Hangup Clone() {
          return new Hangup(this);
        }

        /// <summary>Field number for the "callId" field.</summary>
        public const int CallIdFieldNumber = 1;
        private readonly static ulong CallIdDefaultValue = 0UL;

        private ulong callId_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ulong CallId {
          get { if ((_hasBits0 & 1) != 0) { return callId_; } else { return CallIdDefaultValue; } }
          set {
            _hasBits0 |= 1;
            callId_ = value;
          }
        }
        /// <summary>Gets whether the "callId" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasCallId {
          get { return (_hasBits0 & 1) != 0; }
        }
        /// <summary>Clears the value of the "callId" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearCallId() {
          _hasBits0 &= ~1;
        }

        /// <summary>Field number for the "type" field.</summary>
        public const int TypeFieldNumber = 2;
        private readonly static global::libsignalservice.push.CallingMessage.Types.Hangup.Types.Type TypeDefaultValue = global::libsignalservice.push.CallingMessage.Types.Hangup.Types.Type.HangupNormal;

        private global::libsignalservice.push.CallingMessage.Types.Hangup.Types.Type type_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::libsignalservice.push.CallingMessage.Types.Hangup.Types.Type Type {
          get { if ((_hasBits0 & 2) != 0) { return type_; } else { return TypeDefaultValue; } }
          set {
            _hasBits0 |= 2;
            type_ = value;
          }
        }
        /// <summary>Gets whether the "type" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasType {
          get { return (_hasBits0 & 2) != 0; }
        }
        /// <summary>Clears the value of the "type" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearType() {
          _hasBits0 &= ~2;
        }

        /// <summary>Field number for the "deviceId" field.</summary>
        public const int DeviceIdFieldNumber = 3;
        private readonly static uint DeviceIdDefaultValue = 0;

        private uint deviceId_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint DeviceId {
          get { if ((_hasBits0 & 4) != 0) { return deviceId_; } else { return DeviceIdDefaultValue; } }
          set {
            _hasBits0 |= 4;
            deviceId_ = value;
          }
        }
        /// <summary>Gets whether the "deviceId" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasDeviceId {
          get { return (_hasBits0 & 4) != 0; }
        }
        /// <summary>Clears the value of the "deviceId" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearDeviceId() {
          _hasBits0 &= ~4;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Hangup);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Hangup other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (CallId != other.CallId) return false;
          if (Type != other.Type) return false;
          if (DeviceId != other.DeviceId) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (HasCallId) hash ^= CallId.GetHashCode();
          if (HasType) hash ^= Type.GetHashCode();
          if (HasDeviceId) hash ^= DeviceId.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (HasCallId) {
            output.WriteRawTag(8);
            output.WriteUInt64(CallId);
          }
          if (HasType) {
            output.WriteRawTag(16);
            output.WriteEnum((int) Type);
          }
          if (HasDeviceId) {
            output.WriteRawTag(24);
            output.WriteUInt32(DeviceId);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (HasCallId) {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(CallId);
          }
          if (HasType) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
          }
          if (HasDeviceId) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(DeviceId);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Hangup other) {
          if (other == null) {
            return;
          }
          if (other.HasCallId) {
            CallId = other.CallId;
          }
          if (other.HasType) {
            Type = other.Type;
          }
          if (other.HasDeviceId) {
            DeviceId = other.DeviceId;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                CallId = input.ReadUInt64();
                break;
              }
              case 16: {
                Type = (global::libsignalservice.push.CallingMessage.Types.Hangup.Types.Type) input.ReadEnum();
                break;
              }
              case 24: {
                DeviceId = input.ReadUInt32();
                break;
              }
            }
          }
        }

        #region Nested types
        /// <summary>Container for nested types declared in the Hangup message type.</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static partial class Types {
          public enum Type {
            [pbr::OriginalName("HANGUP_NORMAL")] HangupNormal = 0,
            [pbr::OriginalName("HANGUP_ACCEPTED")] HangupAccepted = 1,
            [pbr::OriginalName("HANGUP_DECLINED")] HangupDeclined = 2,
            [pbr::OriginalName("HANGUP_BUSY")] HangupBusy = 3,
            [pbr::OriginalName("HANGUP_NEED_PERMISSION")] HangupNeedPermission = 4,
          }

        }
        #endregion

      }

      public sealed partial class Opaque : pb::IMessage<Opaque> {
        private static readonly pb::MessageParser<Opaque> _parser = new pb::MessageParser<Opaque>(() => new Opaque());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Opaque> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::libsignalservice.push.CallingMessage.Descriptor.NestedTypes[5]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Opaque() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Opaque(Opaque other) : this() {
          data_ = other.data_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Opaque Clone() {
          return new Opaque(this);
        }

        /// <summary>Field number for the "data" field.</summary>
        public const int DataFieldNumber = 1;
        private readonly static pb::ByteString DataDefaultValue = pb::ByteString.Empty;

        private pb::ByteString data_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pb::ByteString Data {
          get { return data_ ?? DataDefaultValue; }
          set {
            data_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }
        /// <summary>Gets whether the "data" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasData {
          get { return data_ != null; }
        }
        /// <summary>Clears the value of the "data" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearData() {
          data_ = null;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Opaque);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Opaque other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Data != other.Data) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (HasData) hash ^= Data.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (HasData) {
            output.WriteRawTag(10);
            output.WriteBytes(Data);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (HasData) {
            size += 1 + pb::CodedOutputStream.ComputeBytesSize(Data);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Opaque other) {
          if (other == null) {
            return;
          }
          if (other.HasData) {
            Data = other.Data;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                Data = input.ReadBytes();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  public sealed partial class DataMessage : pb::IMessage<DataMessage> {
    private static readonly pb::MessageParser<DataMessage> _parser = new pb::MessageParser<DataMessage>(() => new DataMessage());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DataMessage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::libsignalservice.push.SignalServiceReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DataMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DataMessage(DataMessage other) : this() {
      _hasBits0 = other._hasBits0;
      body_ = other.body_;
      attachments_ = other.attachments_.Clone();
      group_ = other.group_ != null ? other.group_.Clone() : null;
      groupV2_ = other.groupV2_ != null ? other.groupV2_.Clone() : null;
      flags_ = other.flags_;
      expireTimer_ = other.expireTimer_;
      profileKey_ = other.profileKey_;
      timestamp_ = other.timestamp_;
      quote_ = other.quote_ != null ? other.quote_.Clone() : null;
      contact_ = other.contact_.Clone();
      preview_ = other.preview_.Clone();
      sticker_ = other.sticker_ != null ? other.sticker_.Clone() : null;
      requiredProtocolVersion_ = other.requiredProtocolVersion_;
      isViewOnce_ = other.isViewOnce_;
      reaction_ = other.reaction_ != null ? other.reaction_.Clone() : null;
      delete_ = other.delete_ != null ? other.delete_.Clone() : null;
      bodyRanges_ = other.bodyRanges_.Clone();
      groupCallUpdate_ = other.groupCallUpdate_ != null ? other.groupCallUpdate_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DataMessage Clone() {
      return new DataMessage(this);
    }

    /// <summary>Field number for the "body" field.</summary>
    public const int BodyFieldNumber = 1;
    private readonly static string BodyDefaultValue = "";

    private string body_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Body {
      get { return body_ ?? BodyDefaultValue; }
      set {
        body_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "body" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasBody {
      get { return body_ != null; }
    }
    /// <summary>Clears the value of the "body" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearBody() {
      body_ = null;
    }

    /// <summary>Field number for the "attachments" field.</summary>
    public const int AttachmentsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::libsignalservice.push.AttachmentPointer> _repeated_attachments_codec
        = pb::FieldCodec.ForMessage(18, global::libsignalservice.push.AttachmentPointer.Parser);
    private readonly pbc::RepeatedField<global::libsignalservice.push.AttachmentPointer> attachments_ = new pbc::RepeatedField<global::libsignalservice.push.AttachmentPointer>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::libsignalservice.push.AttachmentPointer> Attachments {
      get { return attachments_; }
    }

    /// <summary>Field number for the "group" field.</summary>
    public const int GroupFieldNumber = 3;
    private global::libsignalservice.push.GroupContext group_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::libsignalservice.push.GroupContext Group {
      get { return group_; }
      set {
        group_ = value;
      }
    }

    /// <summary>Field number for the "groupV2" field.</summary>
    public const int GroupV2FieldNumber = 15;
    private global::libsignalservice.push.GroupContextV2 groupV2_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::libsignalservice.push.GroupContextV2 GroupV2 {
      get { return groupV2_; }
      set {
        groupV2_ = value;
      }
    }

    /// <summary>Field number for the "flags" field.</summary>
    public const int FlagsFieldNumber = 4;
    private readonly static uint FlagsDefaultValue = 0;

    private uint flags_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Flags {
      get { if ((_hasBits0 & 1) != 0) { return flags_; } else { return FlagsDefaultValue; } }
      set {
        _hasBits0 |= 1;
        flags_ = value;
      }
    }
    /// <summary>Gets whether the "flags" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasFlags {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "flags" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearFlags() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "expireTimer" field.</summary>
    public const int ExpireTimerFieldNumber = 5;
    private readonly static uint ExpireTimerDefaultValue = 0;

    private uint expireTimer_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ExpireTimer {
      get { if ((_hasBits0 & 2) != 0) { return expireTimer_; } else { return ExpireTimerDefaultValue; } }
      set {
        _hasBits0 |= 2;
        expireTimer_ = value;
      }
    }
    /// <summary>Gets whether the "expireTimer" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasExpireTimer {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "expireTimer" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearExpireTimer() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "profileKey" field.</summary>
    public const int ProfileKeyFieldNumber = 6;
    private readonly static pb::ByteString ProfileKeyDefaultValue = pb::ByteString.Empty;

    private pb::ByteString profileKey_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString ProfileKey {
      get { return profileKey_ ?? ProfileKeyDefaultValue; }
      set {
        profileKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "profileKey" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasProfileKey {
      get { return profileKey_ != null; }
    }
    /// <summary>Clears the value of the "profileKey" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearProfileKey() {
      profileKey_ = null;
    }

    /// <summary>Field number for the "timestamp" field.</summary>
    public const int TimestampFieldNumber = 7;
    private readonly static ulong TimestampDefaultValue = 0UL;

    private ulong timestamp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Timestamp {
      get { if ((_hasBits0 & 4) != 0) { return timestamp_; } else { return TimestampDefaultValue; } }
      set {
        _hasBits0 |= 4;
        timestamp_ = value;
      }
    }
    /// <summary>Gets whether the "timestamp" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTimestamp {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "timestamp" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTimestamp() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "quote" field.</summary>
    public const int QuoteFieldNumber = 8;
    private global::libsignalservice.push.DataMessage.Types.Quote quote_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::libsignalservice.push.DataMessage.Types.Quote Quote {
      get { return quote_; }
      set {
        quote_ = value;
      }
    }

    /// <summary>Field number for the "contact" field.</summary>
    public const int ContactFieldNumber = 9;
    private static readonly pb::FieldCodec<global::libsignalservice.push.DataMessage.Types.Contact> _repeated_contact_codec
        = pb::FieldCodec.ForMessage(74, global::libsignalservice.push.DataMessage.Types.Contact.Parser);
    private readonly pbc::RepeatedField<global::libsignalservice.push.DataMessage.Types.Contact> contact_ = new pbc::RepeatedField<global::libsignalservice.push.DataMessage.Types.Contact>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::libsignalservice.push.DataMessage.Types.Contact> Contact {
      get { return contact_; }
    }

    /// <summary>Field number for the "preview" field.</summary>
    public const int PreviewFieldNumber = 10;
    private static readonly pb::FieldCodec<global::libsignalservice.push.DataMessage.Types.Preview> _repeated_preview_codec
        = pb::FieldCodec.ForMessage(82, global::libsignalservice.push.DataMessage.Types.Preview.Parser);
    private readonly pbc::RepeatedField<global::libsignalservice.push.DataMessage.Types.Preview> preview_ = new pbc::RepeatedField<global::libsignalservice.push.DataMessage.Types.Preview>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::libsignalservice.push.DataMessage.Types.Preview> Preview {
      get { return preview_; }
    }

    /// <summary>Field number for the "sticker" field.</summary>
    public const int StickerFieldNumber = 11;
    private global::libsignalservice.push.DataMessage.Types.Sticker sticker_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::libsignalservice.push.DataMessage.Types.Sticker Sticker {
      get { return sticker_; }
      set {
        sticker_ = value;
      }
    }

    /// <summary>Field number for the "requiredProtocolVersion" field.</summary>
    public const int RequiredProtocolVersionFieldNumber = 12;
    private readonly static uint RequiredProtocolVersionDefaultValue = 0;

    private uint requiredProtocolVersion_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint RequiredProtocolVersion {
      get { if ((_hasBits0 & 8) != 0) { return requiredProtocolVersion_; } else { return RequiredProtocolVersionDefaultValue; } }
      set {
        _hasBits0 |= 8;
        requiredProtocolVersion_ = value;
      }
    }
    /// <summary>Gets whether the "requiredProtocolVersion" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasRequiredProtocolVersion {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "requiredProtocolVersion" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearRequiredProtocolVersion() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "isViewOnce" field.</summary>
    public const int IsViewOnceFieldNumber = 14;
    private readonly static bool IsViewOnceDefaultValue = false;

    private bool isViewOnce_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsViewOnce {
      get { if ((_hasBits0 & 16) != 0) { return isViewOnce_; } else { return IsViewOnceDefaultValue; } }
      set {
        _hasBits0 |= 16;
        isViewOnce_ = value;
      }
    }
    /// <summary>Gets whether the "isViewOnce" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasIsViewOnce {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "isViewOnce" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearIsViewOnce() {
      _hasBits0 &= ~16;
    }

    /// <summary>Field number for the "reaction" field.</summary>
    public const int ReactionFieldNumber = 16;
    private global::libsignalservice.push.DataMessage.Types.Reaction reaction_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::libsignalservice.push.DataMessage.Types.Reaction Reaction {
      get { return reaction_; }
      set {
        reaction_ = value;
      }
    }

    /// <summary>Field number for the "delete" field.</summary>
    public const int DeleteFieldNumber = 17;
    private global::libsignalservice.push.DataMessage.Types.Delete delete_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::libsignalservice.push.DataMessage.Types.Delete Delete {
      get { return delete_; }
      set {
        delete_ = value;
      }
    }

    /// <summary>Field number for the "bodyRanges" field.</summary>
    public const int BodyRangesFieldNumber = 18;
    private static readonly pb::FieldCodec<global::libsignalservice.push.DataMessage.Types.BodyRange> _repeated_bodyRanges_codec
        = pb::FieldCodec.ForMessage(146, global::libsignalservice.push.DataMessage.Types.BodyRange.Parser);
    private readonly pbc::RepeatedField<global::libsignalservice.push.DataMessage.Types.BodyRange> bodyRanges_ = new pbc::RepeatedField<global::libsignalservice.push.DataMessage.Types.BodyRange>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::libsignalservice.push.DataMessage.Types.BodyRange> BodyRanges {
      get { return bodyRanges_; }
    }

    /// <summary>Field number for the "groupCallUpdate" field.</summary>
    public const int GroupCallUpdateFieldNumber = 19;
    private global::libsignalservice.push.DataMessage.Types.GroupCallUpdate groupCallUpdate_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::libsignalservice.push.DataMessage.Types.GroupCallUpdate GroupCallUpdate {
      get { return groupCallUpdate_; }
      set {
        groupCallUpdate_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DataMessage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DataMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Body != other.Body) return false;
      if(!attachments_.Equals(other.attachments_)) return false;
      if (!object.Equals(Group, other.Group)) return false;
      if (!object.Equals(GroupV2, other.GroupV2)) return false;
      if (Flags != other.Flags) return false;
      if (ExpireTimer != other.ExpireTimer) return false;
      if (ProfileKey != other.ProfileKey) return false;
      if (Timestamp != other.Timestamp) return false;
      if (!object.Equals(Quote, other.Quote)) return false;
      if(!contact_.Equals(other.contact_)) return false;
      if(!preview_.Equals(other.preview_)) return false;
      if (!object.Equals(Sticker, other.Sticker)) return false;
      if (RequiredProtocolVersion != other.RequiredProtocolVersion) return false;
      if (IsViewOnce != other.IsViewOnce) return false;
      if (!object.Equals(Reaction, other.Reaction)) return false;
      if (!object.Equals(Delete, other.Delete)) return false;
      if(!bodyRanges_.Equals(other.bodyRanges_)) return false;
      if (!object.Equals(GroupCallUpdate, other.GroupCallUpdate)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasBody) hash ^= Body.GetHashCode();
      hash ^= attachments_.GetHashCode();
      if (group_ != null) hash ^= Group.GetHashCode();
      if (groupV2_ != null) hash ^= GroupV2.GetHashCode();
      if (HasFlags) hash ^= Flags.GetHashCode();
      if (HasExpireTimer) hash ^= ExpireTimer.GetHashCode();
      if (HasProfileKey) hash ^= ProfileKey.GetHashCode();
      if (HasTimestamp) hash ^= Timestamp.GetHashCode();
      if (quote_ != null) hash ^= Quote.GetHashCode();
      hash ^= contact_.GetHashCode();
      hash ^= preview_.GetHashCode();
      if (sticker_ != null) hash ^= Sticker.GetHashCode();
      if (HasRequiredProtocolVersion) hash ^= RequiredProtocolVersion.GetHashCode();
      if (HasIsViewOnce) hash ^= IsViewOnce.GetHashCode();
      if (reaction_ != null) hash ^= Reaction.GetHashCode();
      if (delete_ != null) hash ^= Delete.GetHashCode();
      hash ^= bodyRanges_.GetHashCode();
      if (groupCallUpdate_ != null) hash ^= GroupCallUpdate.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasBody) {
        output.WriteRawTag(10);
        output.WriteString(Body);
      }
      attachments_.WriteTo(output, _repeated_attachments_codec);
      if (group_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Group);
      }
      if (HasFlags) {
        output.WriteRawTag(32);
        output.WriteUInt32(Flags);
      }
      if (HasExpireTimer) {
        output.WriteRawTag(40);
        output.WriteUInt32(ExpireTimer);
      }
      if (HasProfileKey) {
        output.WriteRawTag(50);
        output.WriteBytes(ProfileKey);
      }
      if (HasTimestamp) {
        output.WriteRawTag(56);
        output.WriteUInt64(Timestamp);
      }
      if (quote_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(Quote);
      }
      contact_.WriteTo(output, _repeated_contact_codec);
      preview_.WriteTo(output, _repeated_preview_codec);
      if (sticker_ != null) {
        output.WriteRawTag(90);
        output.WriteMessage(Sticker);
      }
      if (HasRequiredProtocolVersion) {
        output.WriteRawTag(96);
        output.WriteUInt32(RequiredProtocolVersion);
      }
      if (HasIsViewOnce) {
        output.WriteRawTag(112);
        output.WriteBool(IsViewOnce);
      }
      if (groupV2_ != null) {
        output.WriteRawTag(122);
        output.WriteMessage(GroupV2);
      }
      if (reaction_ != null) {
        output.WriteRawTag(130, 1);
        output.WriteMessage(Reaction);
      }
      if (delete_ != null) {
        output.WriteRawTag(138, 1);
        output.WriteMessage(Delete);
      }
      bodyRanges_.WriteTo(output, _repeated_bodyRanges_codec);
      if (groupCallUpdate_ != null) {
        output.WriteRawTag(154, 1);
        output.WriteMessage(GroupCallUpdate);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasBody) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Body);
      }
      size += attachments_.CalculateSize(_repeated_attachments_codec);
      if (group_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Group);
      }
      if (groupV2_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(GroupV2);
      }
      if (HasFlags) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Flags);
      }
      if (HasExpireTimer) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ExpireTimer);
      }
      if (HasProfileKey) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(ProfileKey);
      }
      if (HasTimestamp) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Timestamp);
      }
      if (quote_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Quote);
      }
      size += contact_.CalculateSize(_repeated_contact_codec);
      size += preview_.CalculateSize(_repeated_preview_codec);
      if (sticker_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Sticker);
      }
      if (HasRequiredProtocolVersion) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RequiredProtocolVersion);
      }
      if (HasIsViewOnce) {
        size += 1 + 1;
      }
      if (reaction_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Reaction);
      }
      if (delete_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Delete);
      }
      size += bodyRanges_.CalculateSize(_repeated_bodyRanges_codec);
      if (groupCallUpdate_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(GroupCallUpdate);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DataMessage other) {
      if (other == null) {
        return;
      }
      if (other.HasBody) {
        Body = other.Body;
      }
      attachments_.Add(other.attachments_);
      if (other.group_ != null) {
        if (group_ == null) {
          Group = new global::libsignalservice.push.GroupContext();
        }
        Group.MergeFrom(other.Group);
      }
      if (other.groupV2_ != null) {
        if (groupV2_ == null) {
          GroupV2 = new global::libsignalservice.push.GroupContextV2();
        }
        GroupV2.MergeFrom(other.GroupV2);
      }
      if (other.HasFlags) {
        Flags = other.Flags;
      }
      if (other.HasExpireTimer) {
        ExpireTimer = other.ExpireTimer;
      }
      if (other.HasProfileKey) {
        ProfileKey = other.ProfileKey;
      }
      if (other.HasTimestamp) {
        Timestamp = other.Timestamp;
      }
      if (other.quote_ != null) {
        if (quote_ == null) {
          Quote = new global::libsignalservice.push.DataMessage.Types.Quote();
        }
        Quote.MergeFrom(other.Quote);
      }
      contact_.Add(other.contact_);
      preview_.Add(other.preview_);
      if (other.sticker_ != null) {
        if (sticker_ == null) {
          Sticker = new global::libsignalservice.push.DataMessage.Types.Sticker();
        }
        Sticker.MergeFrom(other.Sticker);
      }
      if (other.HasRequiredProtocolVersion) {
        RequiredProtocolVersion = other.RequiredProtocolVersion;
      }
      if (other.HasIsViewOnce) {
        IsViewOnce = other.IsViewOnce;
      }
      if (other.reaction_ != null) {
        if (reaction_ == null) {
          Reaction = new global::libsignalservice.push.DataMessage.Types.Reaction();
        }
        Reaction.MergeFrom(other.Reaction);
      }
      if (other.delete_ != null) {
        if (delete_ == null) {
          Delete = new global::libsignalservice.push.DataMessage.Types.Delete();
        }
        Delete.MergeFrom(other.Delete);
      }
      bodyRanges_.Add(other.bodyRanges_);
      if (other.groupCallUpdate_ != null) {
        if (groupCallUpdate_ == null) {
          GroupCallUpdate = new global::libsignalservice.push.DataMessage.Types.GroupCallUpdate();
        }
        GroupCallUpdate.MergeFrom(other.GroupCallUpdate);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Body = input.ReadString();
            break;
          }
          case 18: {
            attachments_.AddEntriesFrom(input, _repeated_attachments_codec);
            break;
          }
          case 26: {
            if (group_ == null) {
              Group = new global::libsignalservice.push.GroupContext();
            }
            input.ReadMessage(Group);
            break;
          }
          case 32: {
            Flags = input.ReadUInt32();
            break;
          }
          case 40: {
            ExpireTimer = input.ReadUInt32();
            break;
          }
          case 50: {
            ProfileKey = input.ReadBytes();
            break;
          }
          case 56: {
            Timestamp = input.ReadUInt64();
            break;
          }
          case 66: {
            if (quote_ == null) {
              Quote = new global::libsignalservice.push.DataMessage.Types.Quote();
            }
            input.ReadMessage(Quote);
            break;
          }
          case 74: {
            contact_.AddEntriesFrom(input, _repeated_contact_codec);
            break;
          }
          case 82: {
            preview_.AddEntriesFrom(input, _repeated_preview_codec);
            break;
          }
          case 90: {
            if (sticker_ == null) {
              Sticker = new global::libsignalservice.push.DataMessage.Types.Sticker();
            }
            input.ReadMessage(Sticker);
            break;
          }
          case 96: {
            RequiredProtocolVersion = input.ReadUInt32();
            break;
          }
          case 112: {
            IsViewOnce = input.ReadBool();
            break;
          }
          case 122: {
            if (groupV2_ == null) {
              GroupV2 = new global::libsignalservice.push.GroupContextV2();
            }
            input.ReadMessage(GroupV2);
            break;
          }
          case 130: {
            if (reaction_ == null) {
              Reaction = new global::libsignalservice.push.DataMessage.Types.Reaction();
            }
            input.ReadMessage(Reaction);
            break;
          }
          case 138: {
            if (delete_ == null) {
              Delete = new global::libsignalservice.push.DataMessage.Types.Delete();
            }
            input.ReadMessage(Delete);
            break;
          }
          case 146: {
            bodyRanges_.AddEntriesFrom(input, _repeated_bodyRanges_codec);
            break;
          }
          case 154: {
            if (groupCallUpdate_ == null) {
              GroupCallUpdate = new global::libsignalservice.push.DataMessage.Types.GroupCallUpdate();
            }
            input.ReadMessage(GroupCallUpdate);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the DataMessage message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum Flags {
        [pbr::OriginalName("END_SESSION")] EndSession = 1,
        [pbr::OriginalName("EXPIRATION_TIMER_UPDATE")] ExpirationTimerUpdate = 2,
        [pbr::OriginalName("PROFILE_KEY_UPDATE")] ProfileKeyUpdate = 4,
      }

      public enum ProtocolVersion {
        [pbr::OriginalName("INITIAL")] Initial = 0,
        [pbr::OriginalName("MESSAGE_TIMERS")] MessageTimers = 1,
        [pbr::OriginalName("VIEW_ONCE")] ViewOnce = 2,
        [pbr::OriginalName("VIEW_ONCE_VIDEO")] ViewOnceVideo = 3,
        [pbr::OriginalName("REACTIONS")] Reactions = 4,
        [pbr::OriginalName("CDN_SELECTOR_ATTACHMENTS")] CdnSelectorAttachments = 5,
        [pbr::OriginalName("MENTIONS")] Mentions = 6,
        [pbr::OriginalName("CURRENT", PreferredAlias = false)] Current = 6,
      }

      public sealed partial class Quote : pb::IMessage<Quote> {
        private static readonly pb::MessageParser<Quote> _parser = new pb::MessageParser<Quote>(() => new Quote());
        private pb::UnknownFieldSet _unknownFields;
        private int _hasBits0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Quote> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::libsignalservice.push.DataMessage.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Quote() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Quote(Quote other) : this() {
          _hasBits0 = other._hasBits0;
          id_ = other.id_;
          author_ = other.author_;
          authorUuid_ = other.authorUuid_;
          text_ = other.text_;
          attachments_ = other.attachments_.Clone();
          bodyRanges_ = other.bodyRanges_.Clone();
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Quote Clone() {
          return new Quote(this);
        }

        /// <summary>Field number for the "id" field.</summary>
        public const int IdFieldNumber = 1;
        private readonly static ulong IdDefaultValue = 0UL;

        private ulong id_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ulong Id {
          get { if ((_hasBits0 & 1) != 0) { return id_; } else { return IdDefaultValue; } }
          set {
            _hasBits0 |= 1;
            id_ = value;
          }
        }
        /// <summary>Gets whether the "id" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasId {
          get { return (_hasBits0 & 1) != 0; }
        }
        /// <summary>Clears the value of the "id" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearId() {
          _hasBits0 &= ~1;
        }

        /// <summary>Field number for the "author" field.</summary>
        public const int AuthorFieldNumber = 2;
        private readonly static string AuthorDefaultValue = "";

        private string author_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Author {
          get { return author_ ?? AuthorDefaultValue; }
          set {
            author_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }
        /// <summary>Gets whether the "author" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasAuthor {
          get { return author_ != null; }
        }
        /// <summary>Clears the value of the "author" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearAuthor() {
          author_ = null;
        }

        /// <summary>Field number for the "authorUuid" field.</summary>
        public const int AuthorUuidFieldNumber = 5;
        private readonly static string AuthorUuidDefaultValue = "";

        private string authorUuid_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string AuthorUuid {
          get { return authorUuid_ ?? AuthorUuidDefaultValue; }
          set {
            authorUuid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }
        /// <summary>Gets whether the "authorUuid" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasAuthorUuid {
          get { return authorUuid_ != null; }
        }
        /// <summary>Clears the value of the "authorUuid" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearAuthorUuid() {
          authorUuid_ = null;
        }

        /// <summary>Field number for the "text" field.</summary>
        public const int TextFieldNumber = 3;
        private readonly static string TextDefaultValue = "";

        private string text_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Text {
          get { return text_ ?? TextDefaultValue; }
          set {
            text_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }
        /// <summary>Gets whether the "text" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasText {
          get { return text_ != null; }
        }
        /// <summary>Clears the value of the "text" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearText() {
          text_ = null;
        }

        /// <summary>Field number for the "attachments" field.</summary>
        public const int AttachmentsFieldNumber = 4;
        private static readonly pb::FieldCodec<global::libsignalservice.push.DataMessage.Types.Quote.Types.QuotedAttachment> _repeated_attachments_codec
            = pb::FieldCodec.ForMessage(34, global::libsignalservice.push.DataMessage.Types.Quote.Types.QuotedAttachment.Parser);
        private readonly pbc::RepeatedField<global::libsignalservice.push.DataMessage.Types.Quote.Types.QuotedAttachment> attachments_ = new pbc::RepeatedField<global::libsignalservice.push.DataMessage.Types.Quote.Types.QuotedAttachment>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::libsignalservice.push.DataMessage.Types.Quote.Types.QuotedAttachment> Attachments {
          get { return attachments_; }
        }

        /// <summary>Field number for the "bodyRanges" field.</summary>
        public const int BodyRangesFieldNumber = 6;
        private static readonly pb::FieldCodec<global::libsignalservice.push.DataMessage.Types.BodyRange> _repeated_bodyRanges_codec
            = pb::FieldCodec.ForMessage(50, global::libsignalservice.push.DataMessage.Types.BodyRange.Parser);
        private readonly pbc::RepeatedField<global::libsignalservice.push.DataMessage.Types.BodyRange> bodyRanges_ = new pbc::RepeatedField<global::libsignalservice.push.DataMessage.Types.BodyRange>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::libsignalservice.push.DataMessage.Types.BodyRange> BodyRanges {
          get { return bodyRanges_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Quote);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Quote other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Id != other.Id) return false;
          if (Author != other.Author) return false;
          if (AuthorUuid != other.AuthorUuid) return false;
          if (Text != other.Text) return false;
          if(!attachments_.Equals(other.attachments_)) return false;
          if(!bodyRanges_.Equals(other.bodyRanges_)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (HasId) hash ^= Id.GetHashCode();
          if (HasAuthor) hash ^= Author.GetHashCode();
          if (HasAuthorUuid) hash ^= AuthorUuid.GetHashCode();
          if (HasText) hash ^= Text.GetHashCode();
          hash ^= attachments_.GetHashCode();
          hash ^= bodyRanges_.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (HasId) {
            output.WriteRawTag(8);
            output.WriteUInt64(Id);
          }
          if (HasAuthor) {
            output.WriteRawTag(18);
            output.WriteString(Author);
          }
          if (HasText) {
            output.WriteRawTag(26);
            output.WriteString(Text);
          }
          attachments_.WriteTo(output, _repeated_attachments_codec);
          if (HasAuthorUuid) {
            output.WriteRawTag(42);
            output.WriteString(AuthorUuid);
          }
          bodyRanges_.WriteTo(output, _repeated_bodyRanges_codec);
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (HasId) {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Id);
          }
          if (HasAuthor) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Author);
          }
          if (HasAuthorUuid) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(AuthorUuid);
          }
          if (HasText) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Text);
          }
          size += attachments_.CalculateSize(_repeated_attachments_codec);
          size += bodyRanges_.CalculateSize(_repeated_bodyRanges_codec);
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Quote other) {
          if (other == null) {
            return;
          }
          if (other.HasId) {
            Id = other.Id;
          }
          if (other.HasAuthor) {
            Author = other.Author;
          }
          if (other.HasAuthorUuid) {
            AuthorUuid = other.AuthorUuid;
          }
          if (other.HasText) {
            Text = other.Text;
          }
          attachments_.Add(other.attachments_);
          bodyRanges_.Add(other.bodyRanges_);
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                Id = input.ReadUInt64();
                break;
              }
              case 18: {
                Author = input.ReadString();
                break;
              }
              case 26: {
                Text = input.ReadString();
                break;
              }
              case 34: {
                attachments_.AddEntriesFrom(input, _repeated_attachments_codec);
                break;
              }
              case 42: {
                AuthorUuid = input.ReadString();
                break;
              }
              case 50: {
                bodyRanges_.AddEntriesFrom(input, _repeated_bodyRanges_codec);
                break;
              }
            }
          }
        }

        #region Nested types
        /// <summary>Container for nested types declared in the Quote message type.</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static partial class Types {
          public sealed partial class QuotedAttachment : pb::IMessage<QuotedAttachment> {
            private static readonly pb::MessageParser<QuotedAttachment> _parser = new pb::MessageParser<QuotedAttachment>(() => new QuotedAttachment());
            private pb::UnknownFieldSet _unknownFields;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pb::MessageParser<QuotedAttachment> Parser { get { return _parser; } }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pbr::MessageDescriptor Descriptor {
              get { return global::libsignalservice.push.DataMessage.Types.Quote.Descriptor.NestedTypes[0]; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            pbr::MessageDescriptor pb::IMessage.Descriptor {
              get { return Descriptor; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public QuotedAttachment() {
              OnConstruction();
            }

            partial void OnConstruction();

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public QuotedAttachment(QuotedAttachment other) : this() {
              contentType_ = other.contentType_;
              fileName_ = other.fileName_;
              thumbnail_ = other.thumbnail_ != null ? other.thumbnail_.Clone() : null;
              _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public QuotedAttachment Clone() {
              return new QuotedAttachment(this);
            }

            /// <summary>Field number for the "contentType" field.</summary>
            public const int ContentTypeFieldNumber = 1;
            private readonly static string ContentTypeDefaultValue = "";

            private string contentType_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public string ContentType {
              get { return contentType_ ?? ContentTypeDefaultValue; }
              set {
                contentType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
              }
            }
            /// <summary>Gets whether the "contentType" field is set</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool HasContentType {
              get { return contentType_ != null; }
            }
            /// <summary>Clears the value of the "contentType" field</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void ClearContentType() {
              contentType_ = null;
            }

            /// <summary>Field number for the "fileName" field.</summary>
            public const int FileNameFieldNumber = 2;
            private readonly static string FileNameDefaultValue = "";

            private string fileName_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public string FileName {
              get { return fileName_ ?? FileNameDefaultValue; }
              set {
                fileName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
              }
            }
            /// <summary>Gets whether the "fileName" field is set</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool HasFileName {
              get { return fileName_ != null; }
            }
            /// <summary>Clears the value of the "fileName" field</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void ClearFileName() {
              fileName_ = null;
            }

            /// <summary>Field number for the "thumbnail" field.</summary>
            public const int ThumbnailFieldNumber = 3;
            private global::libsignalservice.push.AttachmentPointer thumbnail_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public global::libsignalservice.push.AttachmentPointer Thumbnail {
              get { return thumbnail_; }
              set {
                thumbnail_ = value;
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override bool Equals(object other) {
              return Equals(other as QuotedAttachment);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool Equals(QuotedAttachment other) {
              if (ReferenceEquals(other, null)) {
                return false;
              }
              if (ReferenceEquals(other, this)) {
                return true;
              }
              if (ContentType != other.ContentType) return false;
              if (FileName != other.FileName) return false;
              if (!object.Equals(Thumbnail, other.Thumbnail)) return false;
              return Equals(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override int GetHashCode() {
              int hash = 1;
              if (HasContentType) hash ^= ContentType.GetHashCode();
              if (HasFileName) hash ^= FileName.GetHashCode();
              if (thumbnail_ != null) hash ^= Thumbnail.GetHashCode();
              if (_unknownFields != null) {
                hash ^= _unknownFields.GetHashCode();
              }
              return hash;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override string ToString() {
              return pb::JsonFormatter.ToDiagnosticString(this);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void WriteTo(pb::CodedOutputStream output) {
              if (HasContentType) {
                output.WriteRawTag(10);
                output.WriteString(ContentType);
              }
              if (HasFileName) {
                output.WriteRawTag(18);
                output.WriteString(FileName);
              }
              if (thumbnail_ != null) {
                output.WriteRawTag(26);
                output.WriteMessage(Thumbnail);
              }
              if (_unknownFields != null) {
                _unknownFields.WriteTo(output);
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int CalculateSize() {
              int size = 0;
              if (HasContentType) {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(ContentType);
              }
              if (HasFileName) {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(FileName);
              }
              if (thumbnail_ != null) {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(Thumbnail);
              }
              if (_unknownFields != null) {
                size += _unknownFields.CalculateSize();
              }
              return size;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(QuotedAttachment other) {
              if (other == null) {
                return;
              }
              if (other.HasContentType) {
                ContentType = other.ContentType;
              }
              if (other.HasFileName) {
                FileName = other.FileName;
              }
              if (other.thumbnail_ != null) {
                if (thumbnail_ == null) {
                  Thumbnail = new global::libsignalservice.push.AttachmentPointer();
                }
                Thumbnail.MergeFrom(other.Thumbnail);
              }
              _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(pb::CodedInputStream input) {
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                    break;
                  case 10: {
                    ContentType = input.ReadString();
                    break;
                  }
                  case 18: {
                    FileName = input.ReadString();
                    break;
                  }
                  case 26: {
                    if (thumbnail_ == null) {
                      Thumbnail = new global::libsignalservice.push.AttachmentPointer();
                    }
                    input.ReadMessage(Thumbnail);
                    break;
                  }
                }
              }
            }

          }

        }
        #endregion

      }

      public sealed partial class Contact : pb::IMessage<Contact> {
        private static readonly pb::MessageParser<Contact> _parser = new pb::MessageParser<Contact>(() => new Contact());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Contact> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::libsignalservice.push.DataMessage.Descriptor.NestedTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Contact() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Contact(Contact other) : this() {
          name_ = other.name_ != null ? other.name_.Clone() : null;
          number_ = other.number_.Clone();
          email_ = other.email_.Clone();
          address_ = other.address_.Clone();
          avatar_ = other.avatar_ != null ? other.avatar_.Clone() : null;
          organization_ = other.organization_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Contact Clone() {
          return new Contact(this);
        }

        /// <summary>Field number for the "name" field.</summary>
        public const int NameFieldNumber = 1;
        private global::libsignalservice.push.DataMessage.Types.Contact.Types.Name name_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::libsignalservice.push.DataMessage.Types.Contact.Types.Name Name {
          get { return name_; }
          set {
            name_ = value;
          }
        }

        /// <summary>Field number for the "number" field.</summary>
        public const int NumberFieldNumber = 3;
        private static readonly pb::FieldCodec<global::libsignalservice.push.DataMessage.Types.Contact.Types.Phone> _repeated_number_codec
            = pb::FieldCodec.ForMessage(26, global::libsignalservice.push.DataMessage.Types.Contact.Types.Phone.Parser);
        private readonly pbc::RepeatedField<global::libsignalservice.push.DataMessage.Types.Contact.Types.Phone> number_ = new pbc::RepeatedField<global::libsignalservice.push.DataMessage.Types.Contact.Types.Phone>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::libsignalservice.push.DataMessage.Types.Contact.Types.Phone> Number {
          get { return number_; }
        }

        /// <summary>Field number for the "email" field.</summary>
        public const int EmailFieldNumber = 4;
        private static readonly pb::FieldCodec<global::libsignalservice.push.DataMessage.Types.Contact.Types.Email> _repeated_email_codec
            = pb::FieldCodec.ForMessage(34, global::libsignalservice.push.DataMessage.Types.Contact.Types.Email.Parser);
        private readonly pbc::RepeatedField<global::libsignalservice.push.DataMessage.Types.Contact.Types.Email> email_ = new pbc::RepeatedField<global::libsignalservice.push.DataMessage.Types.Contact.Types.Email>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::libsignalservice.push.DataMessage.Types.Contact.Types.Email> Email {
          get { return email_; }
        }

        /// <summary>Field number for the "address" field.</summary>
        public const int AddressFieldNumber = 5;
        private static readonly pb::FieldCodec<global::libsignalservice.push.DataMessage.Types.Contact.Types.PostalAddress> _repeated_address_codec
            = pb::FieldCodec.ForMessage(42, global::libsignalservice.push.DataMessage.Types.Contact.Types.PostalAddress.Parser);
        private readonly pbc::RepeatedField<global::libsignalservice.push.DataMessage.Types.Contact.Types.PostalAddress> address_ = new pbc::RepeatedField<global::libsignalservice.push.DataMessage.Types.Contact.Types.PostalAddress>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::libsignalservice.push.DataMessage.Types.Contact.Types.PostalAddress> Address {
          get { return address_; }
        }

        /// <summary>Field number for the "avatar" field.</summary>
        public const int AvatarFieldNumber = 6;
        private global::libsignalservice.push.DataMessage.Types.Contact.Types.Avatar avatar_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::libsignalservice.push.DataMessage.Types.Contact.Types.Avatar Avatar {
          get { return avatar_; }
          set {
            avatar_ = value;
          }
        }

        /// <summary>Field number for the "organization" field.</summary>
        public const int OrganizationFieldNumber = 7;
        private readonly static string OrganizationDefaultValue = "";

        private string organization_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Organization {
          get { return organization_ ?? OrganizationDefaultValue; }
          set {
            organization_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }
        /// <summary>Gets whether the "organization" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasOrganization {
          get { return organization_ != null; }
        }
        /// <summary>Clears the value of the "organization" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearOrganization() {
          organization_ = null;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Contact);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Contact other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(Name, other.Name)) return false;
          if(!number_.Equals(other.number_)) return false;
          if(!email_.Equals(other.email_)) return false;
          if(!address_.Equals(other.address_)) return false;
          if (!object.Equals(Avatar, other.Avatar)) return false;
          if (Organization != other.Organization) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (name_ != null) hash ^= Name.GetHashCode();
          hash ^= number_.GetHashCode();
          hash ^= email_.GetHashCode();
          hash ^= address_.GetHashCode();
          if (avatar_ != null) hash ^= Avatar.GetHashCode();
          if (HasOrganization) hash ^= Organization.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (name_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(Name);
          }
          number_.WriteTo(output, _repeated_number_codec);
          email_.WriteTo(output, _repeated_email_codec);
          address_.WriteTo(output, _repeated_address_codec);
          if (avatar_ != null) {
            output.WriteRawTag(50);
            output.WriteMessage(Avatar);
          }
          if (HasOrganization) {
            output.WriteRawTag(58);
            output.WriteString(Organization);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (name_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Name);
          }
          size += number_.CalculateSize(_repeated_number_codec);
          size += email_.CalculateSize(_repeated_email_codec);
          size += address_.CalculateSize(_repeated_address_codec);
          if (avatar_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Avatar);
          }
          if (HasOrganization) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Organization);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Contact other) {
          if (other == null) {
            return;
          }
          if (other.name_ != null) {
            if (name_ == null) {
              Name = new global::libsignalservice.push.DataMessage.Types.Contact.Types.Name();
            }
            Name.MergeFrom(other.Name);
          }
          number_.Add(other.number_);
          email_.Add(other.email_);
          address_.Add(other.address_);
          if (other.avatar_ != null) {
            if (avatar_ == null) {
              Avatar = new global::libsignalservice.push.DataMessage.Types.Contact.Types.Avatar();
            }
            Avatar.MergeFrom(other.Avatar);
          }
          if (other.HasOrganization) {
            Organization = other.Organization;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                if (name_ == null) {
                  Name = new global::libsignalservice.push.DataMessage.Types.Contact.Types.Name();
                }
                input.ReadMessage(Name);
                break;
              }
              case 26: {
                number_.AddEntriesFrom(input, _repeated_number_codec);
                break;
              }
              case 34: {
                email_.AddEntriesFrom(input, _repeated_email_codec);
                break;
              }
              case 42: {
                address_.AddEntriesFrom(input, _repeated_address_codec);
                break;
              }
              case 50: {
                if (avatar_ == null) {
                  Avatar = new global::libsignalservice.push.DataMessage.Types.Contact.Types.Avatar();
                }
                input.ReadMessage(Avatar);
                break;
              }
              case 58: {
                Organization = input.ReadString();
                break;
              }
            }
          }
        }

        #region Nested types
        /// <summary>Container for nested types declared in the Contact message type.</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static partial class Types {
          public sealed partial class Name : pb::IMessage<Name> {
            private static readonly pb::MessageParser<Name> _parser = new pb::MessageParser<Name>(() => new Name());
            private pb::UnknownFieldSet _unknownFields;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pb::MessageParser<Name> Parser { get { return _parser; } }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pbr::MessageDescriptor Descriptor {
              get { return global::libsignalservice.push.DataMessage.Types.Contact.Descriptor.NestedTypes[0]; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            pbr::MessageDescriptor pb::IMessage.Descriptor {
              get { return Descriptor; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public Name() {
              OnConstruction();
            }

            partial void OnConstruction();

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public Name(Name other) : this() {
              givenName_ = other.givenName_;
              familyName_ = other.familyName_;
              prefix_ = other.prefix_;
              suffix_ = other.suffix_;
              middleName_ = other.middleName_;
              displayName_ = other.displayName_;
              _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public Name Clone() {
              return new Name(this);
            }

            /// <summary>Field number for the "givenName" field.</summary>
            public const int GivenNameFieldNumber = 1;
            private readonly static string GivenNameDefaultValue = "";

            private string givenName_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public string GivenName {
              get { return givenName_ ?? GivenNameDefaultValue; }
              set {
                givenName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
              }
            }
            /// <summary>Gets whether the "givenName" field is set</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool HasGivenName {
              get { return givenName_ != null; }
            }
            /// <summary>Clears the value of the "givenName" field</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void ClearGivenName() {
              givenName_ = null;
            }

            /// <summary>Field number for the "familyName" field.</summary>
            public const int FamilyNameFieldNumber = 2;
            private readonly static string FamilyNameDefaultValue = "";

            private string familyName_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public string FamilyName {
              get { return familyName_ ?? FamilyNameDefaultValue; }
              set {
                familyName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
              }
            }
            /// <summary>Gets whether the "familyName" field is set</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool HasFamilyName {
              get { return familyName_ != null; }
            }
            /// <summary>Clears the value of the "familyName" field</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void ClearFamilyName() {
              familyName_ = null;
            }

            /// <summary>Field number for the "prefix" field.</summary>
            public const int PrefixFieldNumber = 3;
            private readonly static string PrefixDefaultValue = "";

            private string prefix_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public string Prefix {
              get { return prefix_ ?? PrefixDefaultValue; }
              set {
                prefix_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
              }
            }
            /// <summary>Gets whether the "prefix" field is set</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool HasPrefix {
              get { return prefix_ != null; }
            }
            /// <summary>Clears the value of the "prefix" field</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void ClearPrefix() {
              prefix_ = null;
            }

            /// <summary>Field number for the "suffix" field.</summary>
            public const int SuffixFieldNumber = 4;
            private readonly static string SuffixDefaultValue = "";

            private string suffix_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public string Suffix {
              get { return suffix_ ?? SuffixDefaultValue; }
              set {
                suffix_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
              }
            }
            /// <summary>Gets whether the "suffix" field is set</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool HasSuffix {
              get { return suffix_ != null; }
            }
            /// <summary>Clears the value of the "suffix" field</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void ClearSuffix() {
              suffix_ = null;
            }

            /// <summary>Field number for the "middleName" field.</summary>
            public const int MiddleNameFieldNumber = 5;
            private readonly static string MiddleNameDefaultValue = "";

            private string middleName_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public string MiddleName {
              get { return middleName_ ?? MiddleNameDefaultValue; }
              set {
                middleName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
              }
            }
            /// <summary>Gets whether the "middleName" field is set</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool HasMiddleName {
              get { return middleName_ != null; }
            }
            /// <summary>Clears the value of the "middleName" field</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void ClearMiddleName() {
              middleName_ = null;
            }

            /// <summary>Field number for the "displayName" field.</summary>
            public const int DisplayNameFieldNumber = 6;
            private readonly static string DisplayNameDefaultValue = "";

            private string displayName_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public string DisplayName {
              get { return displayName_ ?? DisplayNameDefaultValue; }
              set {
                displayName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
              }
            }
            /// <summary>Gets whether the "displayName" field is set</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool HasDisplayName {
              get { return displayName_ != null; }
            }
            /// <summary>Clears the value of the "displayName" field</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void ClearDisplayName() {
              displayName_ = null;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override bool Equals(object other) {
              return Equals(other as Name);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool Equals(Name other) {
              if (ReferenceEquals(other, null)) {
                return false;
              }
              if (ReferenceEquals(other, this)) {
                return true;
              }
              if (GivenName != other.GivenName) return false;
              if (FamilyName != other.FamilyName) return false;
              if (Prefix != other.Prefix) return false;
              if (Suffix != other.Suffix) return false;
              if (MiddleName != other.MiddleName) return false;
              if (DisplayName != other.DisplayName) return false;
              return Equals(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override int GetHashCode() {
              int hash = 1;
              if (HasGivenName) hash ^= GivenName.GetHashCode();
              if (HasFamilyName) hash ^= FamilyName.GetHashCode();
              if (HasPrefix) hash ^= Prefix.GetHashCode();
              if (HasSuffix) hash ^= Suffix.GetHashCode();
              if (HasMiddleName) hash ^= MiddleName.GetHashCode();
              if (HasDisplayName) hash ^= DisplayName.GetHashCode();
              if (_unknownFields != null) {
                hash ^= _unknownFields.GetHashCode();
              }
              return hash;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override string ToString() {
              return pb::JsonFormatter.ToDiagnosticString(this);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void WriteTo(pb::CodedOutputStream output) {
              if (HasGivenName) {
                output.WriteRawTag(10);
                output.WriteString(GivenName);
              }
              if (HasFamilyName) {
                output.WriteRawTag(18);
                output.WriteString(FamilyName);
              }
              if (HasPrefix) {
                output.WriteRawTag(26);
                output.WriteString(Prefix);
              }
              if (HasSuffix) {
                output.WriteRawTag(34);
                output.WriteString(Suffix);
              }
              if (HasMiddleName) {
                output.WriteRawTag(42);
                output.WriteString(MiddleName);
              }
              if (HasDisplayName) {
                output.WriteRawTag(50);
                output.WriteString(DisplayName);
              }
              if (_unknownFields != null) {
                _unknownFields.WriteTo(output);
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int CalculateSize() {
              int size = 0;
              if (HasGivenName) {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(GivenName);
              }
              if (HasFamilyName) {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(FamilyName);
              }
              if (HasPrefix) {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(Prefix);
              }
              if (HasSuffix) {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(Suffix);
              }
              if (HasMiddleName) {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(MiddleName);
              }
              if (HasDisplayName) {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(DisplayName);
              }
              if (_unknownFields != null) {
                size += _unknownFields.CalculateSize();
              }
              return size;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(Name other) {
              if (other == null) {
                return;
              }
              if (other.HasGivenName) {
                GivenName = other.GivenName;
              }
              if (other.HasFamilyName) {
                FamilyName = other.FamilyName;
              }
              if (other.HasPrefix) {
                Prefix = other.Prefix;
              }
              if (other.HasSuffix) {
                Suffix = other.Suffix;
              }
              if (other.HasMiddleName) {
                MiddleName = other.MiddleName;
              }
              if (other.HasDisplayName) {
                DisplayName = other.DisplayName;
              }
              _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(pb::CodedInputStream input) {
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                    break;
                  case 10: {
                    GivenName = input.ReadString();
                    break;
                  }
                  case 18: {
                    FamilyName = input.ReadString();
                    break;
                  }
                  case 26: {
                    Prefix = input.ReadString();
                    break;
                  }
                  case 34: {
                    Suffix = input.ReadString();
                    break;
                  }
                  case 42: {
                    MiddleName = input.ReadString();
                    break;
                  }
                  case 50: {
                    DisplayName = input.ReadString();
                    break;
                  }
                }
              }
            }

          }

          public sealed partial class Phone : pb::IMessage<Phone> {
            private static readonly pb::MessageParser<Phone> _parser = new pb::MessageParser<Phone>(() => new Phone());
            private pb::UnknownFieldSet _unknownFields;
            private int _hasBits0;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pb::MessageParser<Phone> Parser { get { return _parser; } }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pbr::MessageDescriptor Descriptor {
              get { return global::libsignalservice.push.DataMessage.Types.Contact.Descriptor.NestedTypes[1]; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            pbr::MessageDescriptor pb::IMessage.Descriptor {
              get { return Descriptor; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public Phone() {
              OnConstruction();
            }

            partial void OnConstruction();

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public Phone(Phone other) : this() {
              _hasBits0 = other._hasBits0;
              value_ = other.value_;
              type_ = other.type_;
              label_ = other.label_;
              _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public Phone Clone() {
              return new Phone(this);
            }

            /// <summary>Field number for the "value" field.</summary>
            public const int ValueFieldNumber = 1;
            private readonly static string ValueDefaultValue = "";

            private string value_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public string Value {
              get { return value_ ?? ValueDefaultValue; }
              set {
                value_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
              }
            }
            /// <summary>Gets whether the "value" field is set</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool HasValue {
              get { return value_ != null; }
            }
            /// <summary>Clears the value of the "value" field</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void ClearValue() {
              value_ = null;
            }

            /// <summary>Field number for the "type" field.</summary>
            public const int TypeFieldNumber = 2;
            private readonly static global::libsignalservice.push.DataMessage.Types.Contact.Types.Phone.Types.Type TypeDefaultValue = global::libsignalservice.push.DataMessage.Types.Contact.Types.Phone.Types.Type.Home;

            private global::libsignalservice.push.DataMessage.Types.Contact.Types.Phone.Types.Type type_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public global::libsignalservice.push.DataMessage.Types.Contact.Types.Phone.Types.Type Type {
              get { if ((_hasBits0 & 1) != 0) { return type_; } else { return TypeDefaultValue; } }
              set {
                _hasBits0 |= 1;
                type_ = value;
              }
            }
            /// <summary>Gets whether the "type" field is set</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool HasType {
              get { return (_hasBits0 & 1) != 0; }
            }
            /// <summary>Clears the value of the "type" field</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void ClearType() {
              _hasBits0 &= ~1;
            }

            /// <summary>Field number for the "label" field.</summary>
            public const int LabelFieldNumber = 3;
            private readonly static string LabelDefaultValue = "";

            private string label_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public string Label {
              get { return label_ ?? LabelDefaultValue; }
              set {
                label_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
              }
            }
            /// <summary>Gets whether the "label" field is set</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool HasLabel {
              get { return label_ != null; }
            }
            /// <summary>Clears the value of the "label" field</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void ClearLabel() {
              label_ = null;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override bool Equals(object other) {
              return Equals(other as Phone);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool Equals(Phone other) {
              if (ReferenceEquals(other, null)) {
                return false;
              }
              if (ReferenceEquals(other, this)) {
                return true;
              }
              if (Value != other.Value) return false;
              if (Type != other.Type) return false;
              if (Label != other.Label) return false;
              return Equals(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override int GetHashCode() {
              int hash = 1;
              if (HasValue) hash ^= Value.GetHashCode();
              if (HasType) hash ^= Type.GetHashCode();
              if (HasLabel) hash ^= Label.GetHashCode();
              if (_unknownFields != null) {
                hash ^= _unknownFields.GetHashCode();
              }
              return hash;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override string ToString() {
              return pb::JsonFormatter.ToDiagnosticString(this);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void WriteTo(pb::CodedOutputStream output) {
              if (HasValue) {
                output.WriteRawTag(10);
                output.WriteString(Value);
              }
              if (HasType) {
                output.WriteRawTag(16);
                output.WriteEnum((int) Type);
              }
              if (HasLabel) {
                output.WriteRawTag(26);
                output.WriteString(Label);
              }
              if (_unknownFields != null) {
                _unknownFields.WriteTo(output);
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int CalculateSize() {
              int size = 0;
              if (HasValue) {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(Value);
              }
              if (HasType) {
                size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
              }
              if (HasLabel) {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(Label);
              }
              if (_unknownFields != null) {
                size += _unknownFields.CalculateSize();
              }
              return size;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(Phone other) {
              if (other == null) {
                return;
              }
              if (other.HasValue) {
                Value = other.Value;
              }
              if (other.HasType) {
                Type = other.Type;
              }
              if (other.HasLabel) {
                Label = other.Label;
              }
              _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(pb::CodedInputStream input) {
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                    break;
                  case 10: {
                    Value = input.ReadString();
                    break;
                  }
                  case 16: {
                    Type = (global::libsignalservice.push.DataMessage.Types.Contact.Types.Phone.Types.Type) input.ReadEnum();
                    break;
                  }
                  case 26: {
                    Label = input.ReadString();
                    break;
                  }
                }
              }
            }

            #region Nested types
            /// <summary>Container for nested types declared in the Phone message type.</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static partial class Types {
              public enum Type {
                [pbr::OriginalName("HOME")] Home = 1,
                [pbr::OriginalName("MOBILE")] Mobile = 2,
                [pbr::OriginalName("WORK")] Work = 3,
                [pbr::OriginalName("CUSTOM")] Custom = 4,
              }

            }
            #endregion

          }

          public sealed partial class Email : pb::IMessage<Email> {
            private static readonly pb::MessageParser<Email> _parser = new pb::MessageParser<Email>(() => new Email());
            private pb::UnknownFieldSet _unknownFields;
            private int _hasBits0;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pb::MessageParser<Email> Parser { get { return _parser; } }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pbr::MessageDescriptor Descriptor {
              get { return global::libsignalservice.push.DataMessage.Types.Contact.Descriptor.NestedTypes[2]; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            pbr::MessageDescriptor pb::IMessage.Descriptor {
              get { return Descriptor; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public Email() {
              OnConstruction();
            }

            partial void OnConstruction();

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public Email(Email other) : this() {
              _hasBits0 = other._hasBits0;
              value_ = other.value_;
              type_ = other.type_;
              label_ = other.label_;
              _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public Email Clone() {
              return new Email(this);
            }

            /// <summary>Field number for the "value" field.</summary>
            public const int ValueFieldNumber = 1;
            private readonly static string ValueDefaultValue = "";

            private string value_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public string Value {
              get { return value_ ?? ValueDefaultValue; }
              set {
                value_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
              }
            }
            /// <summary>Gets whether the "value" field is set</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool HasValue {
              get { return value_ != null; }
            }
            /// <summary>Clears the value of the "value" field</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void ClearValue() {
              value_ = null;
            }

            /// <summary>Field number for the "type" field.</summary>
            public const int TypeFieldNumber = 2;
            private readonly static global::libsignalservice.push.DataMessage.Types.Contact.Types.Email.Types.Type TypeDefaultValue = global::libsignalservice.push.DataMessage.Types.Contact.Types.Email.Types.Type.Home;

            private global::libsignalservice.push.DataMessage.Types.Contact.Types.Email.Types.Type type_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public global::libsignalservice.push.DataMessage.Types.Contact.Types.Email.Types.Type Type {
              get { if ((_hasBits0 & 1) != 0) { return type_; } else { return TypeDefaultValue; } }
              set {
                _hasBits0 |= 1;
                type_ = value;
              }
            }
            /// <summary>Gets whether the "type" field is set</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool HasType {
              get { return (_hasBits0 & 1) != 0; }
            }
            /// <summary>Clears the value of the "type" field</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void ClearType() {
              _hasBits0 &= ~1;
            }

            /// <summary>Field number for the "label" field.</summary>
            public const int LabelFieldNumber = 3;
            private readonly static string LabelDefaultValue = "";

            private string label_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public string Label {
              get { return label_ ?? LabelDefaultValue; }
              set {
                label_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
              }
            }
            /// <summary>Gets whether the "label" field is set</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool HasLabel {
              get { return label_ != null; }
            }
            /// <summary>Clears the value of the "label" field</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void ClearLabel() {
              label_ = null;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override bool Equals(object other) {
              return Equals(other as Email);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool Equals(Email other) {
              if (ReferenceEquals(other, null)) {
                return false;
              }
              if (ReferenceEquals(other, this)) {
                return true;
              }
              if (Value != other.Value) return false;
              if (Type != other.Type) return false;
              if (Label != other.Label) return false;
              return Equals(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override int GetHashCode() {
              int hash = 1;
              if (HasValue) hash ^= Value.GetHashCode();
              if (HasType) hash ^= Type.GetHashCode();
              if (HasLabel) hash ^= Label.GetHashCode();
              if (_unknownFields != null) {
                hash ^= _unknownFields.GetHashCode();
              }
              return hash;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override string ToString() {
              return pb::JsonFormatter.ToDiagnosticString(this);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void WriteTo(pb::CodedOutputStream output) {
              if (HasValue) {
                output.WriteRawTag(10);
                output.WriteString(Value);
              }
              if (HasType) {
                output.WriteRawTag(16);
                output.WriteEnum((int) Type);
              }
              if (HasLabel) {
                output.WriteRawTag(26);
                output.WriteString(Label);
              }
              if (_unknownFields != null) {
                _unknownFields.WriteTo(output);
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int CalculateSize() {
              int size = 0;
              if (HasValue) {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(Value);
              }
              if (HasType) {
                size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
              }
              if (HasLabel) {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(Label);
              }
              if (_unknownFields != null) {
                size += _unknownFields.CalculateSize();
              }
              return size;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(Email other) {
              if (other == null) {
                return;
              }
              if (other.HasValue) {
                Value = other.Value;
              }
              if (other.HasType) {
                Type = other.Type;
              }
              if (other.HasLabel) {
                Label = other.Label;
              }
              _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(pb::CodedInputStream input) {
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                    break;
                  case 10: {
                    Value = input.ReadString();
                    break;
                  }
                  case 16: {
                    Type = (global::libsignalservice.push.DataMessage.Types.Contact.Types.Email.Types.Type) input.ReadEnum();
                    break;
                  }
                  case 26: {
                    Label = input.ReadString();
                    break;
                  }
                }
              }
            }

            #region Nested types
            /// <summary>Container for nested types declared in the Email message type.</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static partial class Types {
              public enum Type {
                [pbr::OriginalName("HOME")] Home = 1,
                [pbr::OriginalName("MOBILE")] Mobile = 2,
                [pbr::OriginalName("WORK")] Work = 3,
                [pbr::OriginalName("CUSTOM")] Custom = 4,
              }

            }
            #endregion

          }

          public sealed partial class PostalAddress : pb::IMessage<PostalAddress> {
            private static readonly pb::MessageParser<PostalAddress> _parser = new pb::MessageParser<PostalAddress>(() => new PostalAddress());
            private pb::UnknownFieldSet _unknownFields;
            private int _hasBits0;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pb::MessageParser<PostalAddress> Parser { get { return _parser; } }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pbr::MessageDescriptor Descriptor {
              get { return global::libsignalservice.push.DataMessage.Types.Contact.Descriptor.NestedTypes[3]; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            pbr::MessageDescriptor pb::IMessage.Descriptor {
              get { return Descriptor; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public PostalAddress() {
              OnConstruction();
            }

            partial void OnConstruction();

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public PostalAddress(PostalAddress other) : this() {
              _hasBits0 = other._hasBits0;
              type_ = other.type_;
              label_ = other.label_;
              street_ = other.street_;
              pobox_ = other.pobox_;
              neighborhood_ = other.neighborhood_;
              city_ = other.city_;
              region_ = other.region_;
              postcode_ = other.postcode_;
              country_ = other.country_;
              _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public PostalAddress Clone() {
              return new PostalAddress(this);
            }

            /// <summary>Field number for the "type" field.</summary>
            public const int TypeFieldNumber = 1;
            private readonly static global::libsignalservice.push.DataMessage.Types.Contact.Types.PostalAddress.Types.Type TypeDefaultValue = global::libsignalservice.push.DataMessage.Types.Contact.Types.PostalAddress.Types.Type.Home;

            private global::libsignalservice.push.DataMessage.Types.Contact.Types.PostalAddress.Types.Type type_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public global::libsignalservice.push.DataMessage.Types.Contact.Types.PostalAddress.Types.Type Type {
              get { if ((_hasBits0 & 1) != 0) { return type_; } else { return TypeDefaultValue; } }
              set {
                _hasBits0 |= 1;
                type_ = value;
              }
            }
            /// <summary>Gets whether the "type" field is set</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool HasType {
              get { return (_hasBits0 & 1) != 0; }
            }
            /// <summary>Clears the value of the "type" field</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void ClearType() {
              _hasBits0 &= ~1;
            }

            /// <summary>Field number for the "label" field.</summary>
            public const int LabelFieldNumber = 2;
            private readonly static string LabelDefaultValue = "";

            private string label_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public string Label {
              get { return label_ ?? LabelDefaultValue; }
              set {
                label_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
              }
            }
            /// <summary>Gets whether the "label" field is set</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool HasLabel {
              get { return label_ != null; }
            }
            /// <summary>Clears the value of the "label" field</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void ClearLabel() {
              label_ = null;
            }

            /// <summary>Field number for the "street" field.</summary>
            public const int StreetFieldNumber = 3;
            private readonly static string StreetDefaultValue = "";

            private string street_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public string Street {
              get { return street_ ?? StreetDefaultValue; }
              set {
                street_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
              }
            }
            /// <summary>Gets whether the "street" field is set</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool HasStreet {
              get { return street_ != null; }
            }
            /// <summary>Clears the value of the "street" field</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void ClearStreet() {
              street_ = null;
            }

            /// <summary>Field number for the "pobox" field.</summary>
            public const int PoboxFieldNumber = 4;
            private readonly static string PoboxDefaultValue = "";

            private string pobox_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public string Pobox {
              get { return pobox_ ?? PoboxDefaultValue; }
              set {
                pobox_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
              }
            }
            /// <summary>Gets whether the "pobox" field is set</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool HasPobox {
              get { return pobox_ != null; }
            }
            /// <summary>Clears the value of the "pobox" field</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void ClearPobox() {
              pobox_ = null;
            }

            /// <summary>Field number for the "neighborhood" field.</summary>
            public const int NeighborhoodFieldNumber = 5;
            private readonly static string NeighborhoodDefaultValue = "";

            private string neighborhood_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public string Neighborhood {
              get { return neighborhood_ ?? NeighborhoodDefaultValue; }
              set {
                neighborhood_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
              }
            }
            /// <summary>Gets whether the "neighborhood" field is set</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool HasNeighborhood {
              get { return neighborhood_ != null; }
            }
            /// <summary>Clears the value of the "neighborhood" field</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void ClearNeighborhood() {
              neighborhood_ = null;
            }

            /// <summary>Field number for the "city" field.</summary>
            public const int CityFieldNumber = 6;
            private readonly static string CityDefaultValue = "";

            private string city_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public string City {
              get { return city_ ?? CityDefaultValue; }
              set {
                city_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
              }
            }
            /// <summary>Gets whether the "city" field is set</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool HasCity {
              get { return city_ != null; }
            }
            /// <summary>Clears the value of the "city" field</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void ClearCity() {
              city_ = null;
            }

            /// <summary>Field number for the "region" field.</summary>
            public const int RegionFieldNumber = 7;
            private readonly static string RegionDefaultValue = "";

            private string region_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public string Region {
              get { return region_ ?? RegionDefaultValue; }
              set {
                region_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
              }
            }
            /// <summary>Gets whether the "region" field is set</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool HasRegion {
              get { return region_ != null; }
            }
            /// <summary>Clears the value of the "region" field</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void ClearRegion() {
              region_ = null;
            }

            /// <summary>Field number for the "postcode" field.</summary>
            public const int PostcodeFieldNumber = 8;
            private readonly static string PostcodeDefaultValue = "";

            private string postcode_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public string Postcode {
              get { return postcode_ ?? PostcodeDefaultValue; }
              set {
                postcode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
              }
            }
            /// <summary>Gets whether the "postcode" field is set</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool HasPostcode {
              get { return postcode_ != null; }
            }
            /// <summary>Clears the value of the "postcode" field</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void ClearPostcode() {
              postcode_ = null;
            }

            /// <summary>Field number for the "country" field.</summary>
            public const int CountryFieldNumber = 9;
            private readonly static string CountryDefaultValue = "";

            private string country_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public string Country {
              get { return country_ ?? CountryDefaultValue; }
              set {
                country_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
              }
            }
            /// <summary>Gets whether the "country" field is set</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool HasCountry {
              get { return country_ != null; }
            }
            /// <summary>Clears the value of the "country" field</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void ClearCountry() {
              country_ = null;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override bool Equals(object other) {
              return Equals(other as PostalAddress);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool Equals(PostalAddress other) {
              if (ReferenceEquals(other, null)) {
                return false;
              }
              if (ReferenceEquals(other, this)) {
                return true;
              }
              if (Type != other.Type) return false;
              if (Label != other.Label) return false;
              if (Street != other.Street) return false;
              if (Pobox != other.Pobox) return false;
              if (Neighborhood != other.Neighborhood) return false;
              if (City != other.City) return false;
              if (Region != other.Region) return false;
              if (Postcode != other.Postcode) return false;
              if (Country != other.Country) return false;
              return Equals(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override int GetHashCode() {
              int hash = 1;
              if (HasType) hash ^= Type.GetHashCode();
              if (HasLabel) hash ^= Label.GetHashCode();
              if (HasStreet) hash ^= Street.GetHashCode();
              if (HasPobox) hash ^= Pobox.GetHashCode();
              if (HasNeighborhood) hash ^= Neighborhood.GetHashCode();
              if (HasCity) hash ^= City.GetHashCode();
              if (HasRegion) hash ^= Region.GetHashCode();
              if (HasPostcode) hash ^= Postcode.GetHashCode();
              if (HasCountry) hash ^= Country.GetHashCode();
              if (_unknownFields != null) {
                hash ^= _unknownFields.GetHashCode();
              }
              return hash;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override string ToString() {
              return pb::JsonFormatter.ToDiagnosticString(this);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void WriteTo(pb::CodedOutputStream output) {
              if (HasType) {
                output.WriteRawTag(8);
                output.WriteEnum((int) Type);
              }
              if (HasLabel) {
                output.WriteRawTag(18);
                output.WriteString(Label);
              }
              if (HasStreet) {
                output.WriteRawTag(26);
                output.WriteString(Street);
              }
              if (HasPobox) {
                output.WriteRawTag(34);
                output.WriteString(Pobox);
              }
              if (HasNeighborhood) {
                output.WriteRawTag(42);
                output.WriteString(Neighborhood);
              }
              if (HasCity) {
                output.WriteRawTag(50);
                output.WriteString(City);
              }
              if (HasRegion) {
                output.WriteRawTag(58);
                output.WriteString(Region);
              }
              if (HasPostcode) {
                output.WriteRawTag(66);
                output.WriteString(Postcode);
              }
              if (HasCountry) {
                output.WriteRawTag(74);
                output.WriteString(Country);
              }
              if (_unknownFields != null) {
                _unknownFields.WriteTo(output);
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int CalculateSize() {
              int size = 0;
              if (HasType) {
                size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
              }
              if (HasLabel) {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(Label);
              }
              if (HasStreet) {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(Street);
              }
              if (HasPobox) {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(Pobox);
              }
              if (HasNeighborhood) {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(Neighborhood);
              }
              if (HasCity) {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(City);
              }
              if (HasRegion) {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(Region);
              }
              if (HasPostcode) {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(Postcode);
              }
              if (HasCountry) {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(Country);
              }
              if (_unknownFields != null) {
                size += _unknownFields.CalculateSize();
              }
              return size;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(PostalAddress other) {
              if (other == null) {
                return;
              }
              if (other.HasType) {
                Type = other.Type;
              }
              if (other.HasLabel) {
                Label = other.Label;
              }
              if (other.HasStreet) {
                Street = other.Street;
              }
              if (other.HasPobox) {
                Pobox = other.Pobox;
              }
              if (other.HasNeighborhood) {
                Neighborhood = other.Neighborhood;
              }
              if (other.HasCity) {
                City = other.City;
              }
              if (other.HasRegion) {
                Region = other.Region;
              }
              if (other.HasPostcode) {
                Postcode = other.Postcode;
              }
              if (other.HasCountry) {
                Country = other.Country;
              }
              _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(pb::CodedInputStream input) {
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                    break;
                  case 8: {
                    Type = (global::libsignalservice.push.DataMessage.Types.Contact.Types.PostalAddress.Types.Type) input.ReadEnum();
                    break;
                  }
                  case 18: {
                    Label = input.ReadString();
                    break;
                  }
                  case 26: {
                    Street = input.ReadString();
                    break;
                  }
                  case 34: {
                    Pobox = input.ReadString();
                    break;
                  }
                  case 42: {
                    Neighborhood = input.ReadString();
                    break;
                  }
                  case 50: {
                    City = input.ReadString();
                    break;
                  }
                  case 58: {
                    Region = input.ReadString();
                    break;
                  }
                  case 66: {
                    Postcode = input.ReadString();
                    break;
                  }
                  case 74: {
                    Country = input.ReadString();
                    break;
                  }
                }
              }
            }

            #region Nested types
            /// <summary>Container for nested types declared in the PostalAddress message type.</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static partial class Types {
              public enum Type {
                [pbr::OriginalName("HOME")] Home = 1,
                [pbr::OriginalName("WORK")] Work = 2,
                [pbr::OriginalName("CUSTOM")] Custom = 3,
              }

            }
            #endregion

          }

          public sealed partial class Avatar : pb::IMessage<Avatar> {
            private static readonly pb::MessageParser<Avatar> _parser = new pb::MessageParser<Avatar>(() => new Avatar());
            private pb::UnknownFieldSet _unknownFields;
            private int _hasBits0;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pb::MessageParser<Avatar> Parser { get { return _parser; } }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pbr::MessageDescriptor Descriptor {
              get { return global::libsignalservice.push.DataMessage.Types.Contact.Descriptor.NestedTypes[4]; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            pbr::MessageDescriptor pb::IMessage.Descriptor {
              get { return Descriptor; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public Avatar() {
              OnConstruction();
            }

            partial void OnConstruction();

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public Avatar(Avatar other) : this() {
              _hasBits0 = other._hasBits0;
              avatar_ = other.avatar_ != null ? other.avatar_.Clone() : null;
              isProfile_ = other.isProfile_;
              _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public Avatar Clone() {
              return new Avatar(this);
            }

            /// <summary>Field number for the "avatar" field.</summary>
            public const int Avatar_FieldNumber = 1;
            private global::libsignalservice.push.AttachmentPointer avatar_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public global::libsignalservice.push.AttachmentPointer Avatar_ {
              get { return avatar_; }
              set {
                avatar_ = value;
              }
            }

            /// <summary>Field number for the "isProfile" field.</summary>
            public const int IsProfileFieldNumber = 2;
            private readonly static bool IsProfileDefaultValue = false;

            private bool isProfile_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool IsProfile {
              get { if ((_hasBits0 & 1) != 0) { return isProfile_; } else { return IsProfileDefaultValue; } }
              set {
                _hasBits0 |= 1;
                isProfile_ = value;
              }
            }
            /// <summary>Gets whether the "isProfile" field is set</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool HasIsProfile {
              get { return (_hasBits0 & 1) != 0; }
            }
            /// <summary>Clears the value of the "isProfile" field</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void ClearIsProfile() {
              _hasBits0 &= ~1;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override bool Equals(object other) {
              return Equals(other as Avatar);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool Equals(Avatar other) {
              if (ReferenceEquals(other, null)) {
                return false;
              }
              if (ReferenceEquals(other, this)) {
                return true;
              }
              if (!object.Equals(Avatar_, other.Avatar_)) return false;
              if (IsProfile != other.IsProfile) return false;
              return Equals(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override int GetHashCode() {
              int hash = 1;
              if (avatar_ != null) hash ^= Avatar_.GetHashCode();
              if (HasIsProfile) hash ^= IsProfile.GetHashCode();
              if (_unknownFields != null) {
                hash ^= _unknownFields.GetHashCode();
              }
              return hash;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override string ToString() {
              return pb::JsonFormatter.ToDiagnosticString(this);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void WriteTo(pb::CodedOutputStream output) {
              if (avatar_ != null) {
                output.WriteRawTag(10);
                output.WriteMessage(Avatar_);
              }
              if (HasIsProfile) {
                output.WriteRawTag(16);
                output.WriteBool(IsProfile);
              }
              if (_unknownFields != null) {
                _unknownFields.WriteTo(output);
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int CalculateSize() {
              int size = 0;
              if (avatar_ != null) {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(Avatar_);
              }
              if (HasIsProfile) {
                size += 1 + 1;
              }
              if (_unknownFields != null) {
                size += _unknownFields.CalculateSize();
              }
              return size;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(Avatar other) {
              if (other == null) {
                return;
              }
              if (other.avatar_ != null) {
                if (avatar_ == null) {
                  Avatar_ = new global::libsignalservice.push.AttachmentPointer();
                }
                Avatar_.MergeFrom(other.Avatar_);
              }
              if (other.HasIsProfile) {
                IsProfile = other.IsProfile;
              }
              _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(pb::CodedInputStream input) {
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                    break;
                  case 10: {
                    if (avatar_ == null) {
                      Avatar_ = new global::libsignalservice.push.AttachmentPointer();
                    }
                    input.ReadMessage(Avatar_);
                    break;
                  }
                  case 16: {
                    IsProfile = input.ReadBool();
                    break;
                  }
                }
              }
            }

          }

        }
        #endregion

      }

      public sealed partial class Preview : pb::IMessage<Preview> {
        private static readonly pb::MessageParser<Preview> _parser = new pb::MessageParser<Preview>(() => new Preview());
        private pb::UnknownFieldSet _unknownFields;
        private int _hasBits0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Preview> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::libsignalservice.push.DataMessage.Descriptor.NestedTypes[2]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Preview() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Preview(Preview other) : this() {
          _hasBits0 = other._hasBits0;
          url_ = other.url_;
          title_ = other.title_;
          image_ = other.image_ != null ? other.image_.Clone() : null;
          description_ = other.description_;
          date_ = other.date_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Preview Clone() {
          return new Preview(this);
        }

        /// <summary>Field number for the "url" field.</summary>
        public const int UrlFieldNumber = 1;
        private readonly static string UrlDefaultValue = "";

        private string url_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Url {
          get { return url_ ?? UrlDefaultValue; }
          set {
            url_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }
        /// <summary>Gets whether the "url" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasUrl {
          get { return url_ != null; }
        }
        /// <summary>Clears the value of the "url" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearUrl() {
          url_ = null;
        }

        /// <summary>Field number for the "title" field.</summary>
        public const int TitleFieldNumber = 2;
        private readonly static string TitleDefaultValue = "";

        private string title_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Title {
          get { return title_ ?? TitleDefaultValue; }
          set {
            title_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }
        /// <summary>Gets whether the "title" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasTitle {
          get { return title_ != null; }
        }
        /// <summary>Clears the value of the "title" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearTitle() {
          title_ = null;
        }

        /// <summary>Field number for the "image" field.</summary>
        public const int ImageFieldNumber = 3;
        private global::libsignalservice.push.AttachmentPointer image_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::libsignalservice.push.AttachmentPointer Image {
          get { return image_; }
          set {
            image_ = value;
          }
        }

        /// <summary>Field number for the "description" field.</summary>
        public const int DescriptionFieldNumber = 4;
        private readonly static string DescriptionDefaultValue = "";

        private string description_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Description {
          get { return description_ ?? DescriptionDefaultValue; }
          set {
            description_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }
        /// <summary>Gets whether the "description" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasDescription {
          get { return description_ != null; }
        }
        /// <summary>Clears the value of the "description" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearDescription() {
          description_ = null;
        }

        /// <summary>Field number for the "date" field.</summary>
        public const int DateFieldNumber = 5;
        private readonly static ulong DateDefaultValue = 0UL;

        private ulong date_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ulong Date {
          get { if ((_hasBits0 & 1) != 0) { return date_; } else { return DateDefaultValue; } }
          set {
            _hasBits0 |= 1;
            date_ = value;
          }
        }
        /// <summary>Gets whether the "date" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasDate {
          get { return (_hasBits0 & 1) != 0; }
        }
        /// <summary>Clears the value of the "date" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearDate() {
          _hasBits0 &= ~1;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Preview);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Preview other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Url != other.Url) return false;
          if (Title != other.Title) return false;
          if (!object.Equals(Image, other.Image)) return false;
          if (Description != other.Description) return false;
          if (Date != other.Date) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (HasUrl) hash ^= Url.GetHashCode();
          if (HasTitle) hash ^= Title.GetHashCode();
          if (image_ != null) hash ^= Image.GetHashCode();
          if (HasDescription) hash ^= Description.GetHashCode();
          if (HasDate) hash ^= Date.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (HasUrl) {
            output.WriteRawTag(10);
            output.WriteString(Url);
          }
          if (HasTitle) {
            output.WriteRawTag(18);
            output.WriteString(Title);
          }
          if (image_ != null) {
            output.WriteRawTag(26);
            output.WriteMessage(Image);
          }
          if (HasDescription) {
            output.WriteRawTag(34);
            output.WriteString(Description);
          }
          if (HasDate) {
            output.WriteRawTag(40);
            output.WriteUInt64(Date);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (HasUrl) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Url);
          }
          if (HasTitle) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Title);
          }
          if (image_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Image);
          }
          if (HasDescription) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Description);
          }
          if (HasDate) {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Date);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Preview other) {
          if (other == null) {
            return;
          }
          if (other.HasUrl) {
            Url = other.Url;
          }
          if (other.HasTitle) {
            Title = other.Title;
          }
          if (other.image_ != null) {
            if (image_ == null) {
              Image = new global::libsignalservice.push.AttachmentPointer();
            }
            Image.MergeFrom(other.Image);
          }
          if (other.HasDescription) {
            Description = other.Description;
          }
          if (other.HasDate) {
            Date = other.Date;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                Url = input.ReadString();
                break;
              }
              case 18: {
                Title = input.ReadString();
                break;
              }
              case 26: {
                if (image_ == null) {
                  Image = new global::libsignalservice.push.AttachmentPointer();
                }
                input.ReadMessage(Image);
                break;
              }
              case 34: {
                Description = input.ReadString();
                break;
              }
              case 40: {
                Date = input.ReadUInt64();
                break;
              }
            }
          }
        }

      }

      public sealed partial class Sticker : pb::IMessage<Sticker> {
        private static readonly pb::MessageParser<Sticker> _parser = new pb::MessageParser<Sticker>(() => new Sticker());
        private pb::UnknownFieldSet _unknownFields;
        private int _hasBits0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Sticker> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::libsignalservice.push.DataMessage.Descriptor.NestedTypes[3]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Sticker() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Sticker(Sticker other) : this() {
          _hasBits0 = other._hasBits0;
          packId_ = other.packId_;
          packKey_ = other.packKey_;
          stickerId_ = other.stickerId_;
          data_ = other.data_ != null ? other.data_.Clone() : null;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Sticker Clone() {
          return new Sticker(this);
        }

        /// <summary>Field number for the "packId" field.</summary>
        public const int PackIdFieldNumber = 1;
        private readonly static pb::ByteString PackIdDefaultValue = pb::ByteString.Empty;

        private pb::ByteString packId_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pb::ByteString PackId {
          get { return packId_ ?? PackIdDefaultValue; }
          set {
            packId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }
        /// <summary>Gets whether the "packId" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasPackId {
          get { return packId_ != null; }
        }
        /// <summary>Clears the value of the "packId" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearPackId() {
          packId_ = null;
        }

        /// <summary>Field number for the "packKey" field.</summary>
        public const int PackKeyFieldNumber = 2;
        private readonly static pb::ByteString PackKeyDefaultValue = pb::ByteString.Empty;

        private pb::ByteString packKey_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pb::ByteString PackKey {
          get { return packKey_ ?? PackKeyDefaultValue; }
          set {
            packKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }
        /// <summary>Gets whether the "packKey" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasPackKey {
          get { return packKey_ != null; }
        }
        /// <summary>Clears the value of the "packKey" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearPackKey() {
          packKey_ = null;
        }

        /// <summary>Field number for the "stickerId" field.</summary>
        public const int StickerIdFieldNumber = 3;
        private readonly static uint StickerIdDefaultValue = 0;

        private uint stickerId_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint StickerId {
          get { if ((_hasBits0 & 1) != 0) { return stickerId_; } else { return StickerIdDefaultValue; } }
          set {
            _hasBits0 |= 1;
            stickerId_ = value;
          }
        }
        /// <summary>Gets whether the "stickerId" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasStickerId {
          get { return (_hasBits0 & 1) != 0; }
        }
        /// <summary>Clears the value of the "stickerId" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearStickerId() {
          _hasBits0 &= ~1;
        }

        /// <summary>Field number for the "data" field.</summary>
        public const int DataFieldNumber = 4;
        private global::libsignalservice.push.AttachmentPointer data_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::libsignalservice.push.AttachmentPointer Data {
          get { return data_; }
          set {
            data_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Sticker);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Sticker other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (PackId != other.PackId) return false;
          if (PackKey != other.PackKey) return false;
          if (StickerId != other.StickerId) return false;
          if (!object.Equals(Data, other.Data)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (HasPackId) hash ^= PackId.GetHashCode();
          if (HasPackKey) hash ^= PackKey.GetHashCode();
          if (HasStickerId) hash ^= StickerId.GetHashCode();
          if (data_ != null) hash ^= Data.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (HasPackId) {
            output.WriteRawTag(10);
            output.WriteBytes(PackId);
          }
          if (HasPackKey) {
            output.WriteRawTag(18);
            output.WriteBytes(PackKey);
          }
          if (HasStickerId) {
            output.WriteRawTag(24);
            output.WriteUInt32(StickerId);
          }
          if (data_ != null) {
            output.WriteRawTag(34);
            output.WriteMessage(Data);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (HasPackId) {
            size += 1 + pb::CodedOutputStream.ComputeBytesSize(PackId);
          }
          if (HasPackKey) {
            size += 1 + pb::CodedOutputStream.ComputeBytesSize(PackKey);
          }
          if (HasStickerId) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(StickerId);
          }
          if (data_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Data);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Sticker other) {
          if (other == null) {
            return;
          }
          if (other.HasPackId) {
            PackId = other.PackId;
          }
          if (other.HasPackKey) {
            PackKey = other.PackKey;
          }
          if (other.HasStickerId) {
            StickerId = other.StickerId;
          }
          if (other.data_ != null) {
            if (data_ == null) {
              Data = new global::libsignalservice.push.AttachmentPointer();
            }
            Data.MergeFrom(other.Data);
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                PackId = input.ReadBytes();
                break;
              }
              case 18: {
                PackKey = input.ReadBytes();
                break;
              }
              case 24: {
                StickerId = input.ReadUInt32();
                break;
              }
              case 34: {
                if (data_ == null) {
                  Data = new global::libsignalservice.push.AttachmentPointer();
                }
                input.ReadMessage(Data);
                break;
              }
            }
          }
        }

      }

      public sealed partial class Reaction : pb::IMessage<Reaction> {
        private static readonly pb::MessageParser<Reaction> _parser = new pb::MessageParser<Reaction>(() => new Reaction());
        private pb::UnknownFieldSet _unknownFields;
        private int _hasBits0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Reaction> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::libsignalservice.push.DataMessage.Descriptor.NestedTypes[4]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Reaction() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Reaction(Reaction other) : this() {
          _hasBits0 = other._hasBits0;
          emoji_ = other.emoji_;
          remove_ = other.remove_;
          targetAuthorUuid_ = other.targetAuthorUuid_;
          targetTimestamp_ = other.targetTimestamp_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Reaction Clone() {
          return new Reaction(this);
        }

        /// <summary>Field number for the "emoji" field.</summary>
        public const int EmojiFieldNumber = 1;
        private readonly static string EmojiDefaultValue = "";

        private string emoji_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Emoji {
          get { return emoji_ ?? EmojiDefaultValue; }
          set {
            emoji_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }
        /// <summary>Gets whether the "emoji" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasEmoji {
          get { return emoji_ != null; }
        }
        /// <summary>Clears the value of the "emoji" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearEmoji() {
          emoji_ = null;
        }

        /// <summary>Field number for the "remove" field.</summary>
        public const int RemoveFieldNumber = 2;
        private readonly static bool RemoveDefaultValue = false;

        private bool remove_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Remove {
          get { if ((_hasBits0 & 1) != 0) { return remove_; } else { return RemoveDefaultValue; } }
          set {
            _hasBits0 |= 1;
            remove_ = value;
          }
        }
        /// <summary>Gets whether the "remove" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasRemove {
          get { return (_hasBits0 & 1) != 0; }
        }
        /// <summary>Clears the value of the "remove" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearRemove() {
          _hasBits0 &= ~1;
        }

        /// <summary>Field number for the "targetAuthorUuid" field.</summary>
        public const int TargetAuthorUuidFieldNumber = 4;
        private readonly static string TargetAuthorUuidDefaultValue = "";

        private string targetAuthorUuid_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string TargetAuthorUuid {
          get { return targetAuthorUuid_ ?? TargetAuthorUuidDefaultValue; }
          set {
            targetAuthorUuid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }
        /// <summary>Gets whether the "targetAuthorUuid" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasTargetAuthorUuid {
          get { return targetAuthorUuid_ != null; }
        }
        /// <summary>Clears the value of the "targetAuthorUuid" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearTargetAuthorUuid() {
          targetAuthorUuid_ = null;
        }

        /// <summary>Field number for the "targetTimestamp" field.</summary>
        public const int TargetTimestampFieldNumber = 5;
        private readonly static ulong TargetTimestampDefaultValue = 0UL;

        private ulong targetTimestamp_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ulong TargetTimestamp {
          get { if ((_hasBits0 & 2) != 0) { return targetTimestamp_; } else { return TargetTimestampDefaultValue; } }
          set {
            _hasBits0 |= 2;
            targetTimestamp_ = value;
          }
        }
        /// <summary>Gets whether the "targetTimestamp" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasTargetTimestamp {
          get { return (_hasBits0 & 2) != 0; }
        }
        /// <summary>Clears the value of the "targetTimestamp" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearTargetTimestamp() {
          _hasBits0 &= ~2;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Reaction);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Reaction other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Emoji != other.Emoji) return false;
          if (Remove != other.Remove) return false;
          if (TargetAuthorUuid != other.TargetAuthorUuid) return false;
          if (TargetTimestamp != other.TargetTimestamp) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (HasEmoji) hash ^= Emoji.GetHashCode();
          if (HasRemove) hash ^= Remove.GetHashCode();
          if (HasTargetAuthorUuid) hash ^= TargetAuthorUuid.GetHashCode();
          if (HasTargetTimestamp) hash ^= TargetTimestamp.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (HasEmoji) {
            output.WriteRawTag(10);
            output.WriteString(Emoji);
          }
          if (HasRemove) {
            output.WriteRawTag(16);
            output.WriteBool(Remove);
          }
          if (HasTargetAuthorUuid) {
            output.WriteRawTag(34);
            output.WriteString(TargetAuthorUuid);
          }
          if (HasTargetTimestamp) {
            output.WriteRawTag(40);
            output.WriteUInt64(TargetTimestamp);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (HasEmoji) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Emoji);
          }
          if (HasRemove) {
            size += 1 + 1;
          }
          if (HasTargetAuthorUuid) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(TargetAuthorUuid);
          }
          if (HasTargetTimestamp) {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(TargetTimestamp);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Reaction other) {
          if (other == null) {
            return;
          }
          if (other.HasEmoji) {
            Emoji = other.Emoji;
          }
          if (other.HasRemove) {
            Remove = other.Remove;
          }
          if (other.HasTargetAuthorUuid) {
            TargetAuthorUuid = other.TargetAuthorUuid;
          }
          if (other.HasTargetTimestamp) {
            TargetTimestamp = other.TargetTimestamp;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                Emoji = input.ReadString();
                break;
              }
              case 16: {
                Remove = input.ReadBool();
                break;
              }
              case 34: {
                TargetAuthorUuid = input.ReadString();
                break;
              }
              case 40: {
                TargetTimestamp = input.ReadUInt64();
                break;
              }
            }
          }
        }

      }

      public sealed partial class Delete : pb::IMessage<Delete> {
        private static readonly pb::MessageParser<Delete> _parser = new pb::MessageParser<Delete>(() => new Delete());
        private pb::UnknownFieldSet _unknownFields;
        private int _hasBits0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Delete> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::libsignalservice.push.DataMessage.Descriptor.NestedTypes[5]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Delete() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Delete(Delete other) : this() {
          _hasBits0 = other._hasBits0;
          targetSentTimestamp_ = other.targetSentTimestamp_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Delete Clone() {
          return new Delete(this);
        }

        /// <summary>Field number for the "targetSentTimestamp" field.</summary>
        public const int TargetSentTimestampFieldNumber = 1;
        private readonly static ulong TargetSentTimestampDefaultValue = 0UL;

        private ulong targetSentTimestamp_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ulong TargetSentTimestamp {
          get { if ((_hasBits0 & 1) != 0) { return targetSentTimestamp_; } else { return TargetSentTimestampDefaultValue; } }
          set {
            _hasBits0 |= 1;
            targetSentTimestamp_ = value;
          }
        }
        /// <summary>Gets whether the "targetSentTimestamp" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasTargetSentTimestamp {
          get { return (_hasBits0 & 1) != 0; }
        }
        /// <summary>Clears the value of the "targetSentTimestamp" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearTargetSentTimestamp() {
          _hasBits0 &= ~1;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Delete);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Delete other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (TargetSentTimestamp != other.TargetSentTimestamp) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (HasTargetSentTimestamp) hash ^= TargetSentTimestamp.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (HasTargetSentTimestamp) {
            output.WriteRawTag(8);
            output.WriteUInt64(TargetSentTimestamp);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (HasTargetSentTimestamp) {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(TargetSentTimestamp);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Delete other) {
          if (other == null) {
            return;
          }
          if (other.HasTargetSentTimestamp) {
            TargetSentTimestamp = other.TargetSentTimestamp;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                TargetSentTimestamp = input.ReadUInt64();
                break;
              }
            }
          }
        }

      }

      public sealed partial class BodyRange : pb::IMessage<BodyRange> {
        private static readonly pb::MessageParser<BodyRange> _parser = new pb::MessageParser<BodyRange>(() => new BodyRange());
        private pb::UnknownFieldSet _unknownFields;
        private int _hasBits0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<BodyRange> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::libsignalservice.push.DataMessage.Descriptor.NestedTypes[6]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public BodyRange() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public BodyRange(BodyRange other) : this() {
          _hasBits0 = other._hasBits0;
          start_ = other.start_;
          length_ = other.length_;
          mentionUuid_ = other.mentionUuid_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public BodyRange Clone() {
          return new BodyRange(this);
        }

        /// <summary>Field number for the "start" field.</summary>
        public const int StartFieldNumber = 1;
        private readonly static uint StartDefaultValue = 0;

        private uint start_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Start {
          get { if ((_hasBits0 & 1) != 0) { return start_; } else { return StartDefaultValue; } }
          set {
            _hasBits0 |= 1;
            start_ = value;
          }
        }
        /// <summary>Gets whether the "start" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasStart {
          get { return (_hasBits0 & 1) != 0; }
        }
        /// <summary>Clears the value of the "start" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearStart() {
          _hasBits0 &= ~1;
        }

        /// <summary>Field number for the "length" field.</summary>
        public const int LengthFieldNumber = 2;
        private readonly static uint LengthDefaultValue = 0;

        private uint length_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Length {
          get { if ((_hasBits0 & 2) != 0) { return length_; } else { return LengthDefaultValue; } }
          set {
            _hasBits0 |= 2;
            length_ = value;
          }
        }
        /// <summary>Gets whether the "length" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasLength {
          get { return (_hasBits0 & 2) != 0; }
        }
        /// <summary>Clears the value of the "length" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearLength() {
          _hasBits0 &= ~2;
        }

        /// <summary>Field number for the "mentionUuid" field.</summary>
        public const int MentionUuidFieldNumber = 3;
        private readonly static string MentionUuidDefaultValue = "";

        private string mentionUuid_;
        /// <summary>
        /// oneof associatedValue {
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string MentionUuid {
          get { return mentionUuid_ ?? MentionUuidDefaultValue; }
          set {
            mentionUuid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }
        /// <summary>Gets whether the "mentionUuid" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasMentionUuid {
          get { return mentionUuid_ != null; }
        }
        /// <summary>Clears the value of the "mentionUuid" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearMentionUuid() {
          mentionUuid_ = null;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as BodyRange);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(BodyRange other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Start != other.Start) return false;
          if (Length != other.Length) return false;
          if (MentionUuid != other.MentionUuid) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (HasStart) hash ^= Start.GetHashCode();
          if (HasLength) hash ^= Length.GetHashCode();
          if (HasMentionUuid) hash ^= MentionUuid.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (HasStart) {
            output.WriteRawTag(8);
            output.WriteUInt32(Start);
          }
          if (HasLength) {
            output.WriteRawTag(16);
            output.WriteUInt32(Length);
          }
          if (HasMentionUuid) {
            output.WriteRawTag(26);
            output.WriteString(MentionUuid);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (HasStart) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Start);
          }
          if (HasLength) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Length);
          }
          if (HasMentionUuid) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(MentionUuid);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(BodyRange other) {
          if (other == null) {
            return;
          }
          if (other.HasStart) {
            Start = other.Start;
          }
          if (other.HasLength) {
            Length = other.Length;
          }
          if (other.HasMentionUuid) {
            MentionUuid = other.MentionUuid;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                Start = input.ReadUInt32();
                break;
              }
              case 16: {
                Length = input.ReadUInt32();
                break;
              }
              case 26: {
                MentionUuid = input.ReadString();
                break;
              }
            }
          }
        }

      }

      public sealed partial class GroupCallUpdate : pb::IMessage<GroupCallUpdate> {
        private static readonly pb::MessageParser<GroupCallUpdate> _parser = new pb::MessageParser<GroupCallUpdate>(() => new GroupCallUpdate());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<GroupCallUpdate> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::libsignalservice.push.DataMessage.Descriptor.NestedTypes[7]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GroupCallUpdate() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GroupCallUpdate(GroupCallUpdate other) : this() {
          eraId_ = other.eraId_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GroupCallUpdate Clone() {
          return new GroupCallUpdate(this);
        }

        /// <summary>Field number for the "eraId" field.</summary>
        public const int EraIdFieldNumber = 1;
        private readonly static string EraIdDefaultValue = "";

        private string eraId_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string EraId {
          get { return eraId_ ?? EraIdDefaultValue; }
          set {
            eraId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }
        /// <summary>Gets whether the "eraId" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasEraId {
          get { return eraId_ != null; }
        }
        /// <summary>Clears the value of the "eraId" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearEraId() {
          eraId_ = null;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as GroupCallUpdate);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(GroupCallUpdate other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (EraId != other.EraId) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (HasEraId) hash ^= EraId.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (HasEraId) {
            output.WriteRawTag(10);
            output.WriteString(EraId);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (HasEraId) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(EraId);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(GroupCallUpdate other) {
          if (other == null) {
            return;
          }
          if (other.HasEraId) {
            EraId = other.EraId;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                EraId = input.ReadString();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  public sealed partial class NullMessage : pb::IMessage<NullMessage> {
    private static readonly pb::MessageParser<NullMessage> _parser = new pb::MessageParser<NullMessage>(() => new NullMessage());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NullMessage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::libsignalservice.push.SignalServiceReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NullMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NullMessage(NullMessage other) : this() {
      padding_ = other.padding_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NullMessage Clone() {
      return new NullMessage(this);
    }

    /// <summary>Field number for the "padding" field.</summary>
    public const int PaddingFieldNumber = 1;
    private readonly static pb::ByteString PaddingDefaultValue = pb::ByteString.Empty;

    private pb::ByteString padding_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Padding {
      get { return padding_ ?? PaddingDefaultValue; }
      set {
        padding_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "padding" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPadding {
      get { return padding_ != null; }
    }
    /// <summary>Clears the value of the "padding" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPadding() {
      padding_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NullMessage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NullMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Padding != other.Padding) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasPadding) hash ^= Padding.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasPadding) {
        output.WriteRawTag(10);
        output.WriteBytes(Padding);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasPadding) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Padding);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NullMessage other) {
      if (other == null) {
        return;
      }
      if (other.HasPadding) {
        Padding = other.Padding;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Padding = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ReceiptMessage : pb::IMessage<ReceiptMessage> {
    private static readonly pb::MessageParser<ReceiptMessage> _parser = new pb::MessageParser<ReceiptMessage>(() => new ReceiptMessage());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReceiptMessage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::libsignalservice.push.SignalServiceReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReceiptMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReceiptMessage(ReceiptMessage other) : this() {
      _hasBits0 = other._hasBits0;
      type_ = other.type_;
      timestamp_ = other.timestamp_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReceiptMessage Clone() {
      return new ReceiptMessage(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private readonly static global::libsignalservice.push.ReceiptMessage.Types.Type TypeDefaultValue = global::libsignalservice.push.ReceiptMessage.Types.Type.Delivery;

    private global::libsignalservice.push.ReceiptMessage.Types.Type type_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::libsignalservice.push.ReceiptMessage.Types.Type Type {
      get { if ((_hasBits0 & 1) != 0) { return type_; } else { return TypeDefaultValue; } }
      set {
        _hasBits0 |= 1;
        type_ = value;
      }
    }
    /// <summary>Gets whether the "type" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasType {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "type" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearType() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "timestamp" field.</summary>
    public const int TimestampFieldNumber = 2;
    private static readonly pb::FieldCodec<ulong> _repeated_timestamp_codec
        = pb::FieldCodec.ForUInt64(16);
    private readonly pbc::RepeatedField<ulong> timestamp_ = new pbc::RepeatedField<ulong>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<ulong> Timestamp {
      get { return timestamp_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReceiptMessage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReceiptMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      if(!timestamp_.Equals(other.timestamp_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasType) hash ^= Type.GetHashCode();
      hash ^= timestamp_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasType) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Type);
      }
      timestamp_.WriteTo(output, _repeated_timestamp_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasType) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      size += timestamp_.CalculateSize(_repeated_timestamp_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReceiptMessage other) {
      if (other == null) {
        return;
      }
      if (other.HasType) {
        Type = other.Type;
      }
      timestamp_.Add(other.timestamp_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Type = (global::libsignalservice.push.ReceiptMessage.Types.Type) input.ReadEnum();
            break;
          }
          case 18:
          case 16: {
            timestamp_.AddEntriesFrom(input, _repeated_timestamp_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the ReceiptMessage message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum Type {
        [pbr::OriginalName("DELIVERY")] Delivery = 0,
        [pbr::OriginalName("READ")] Read = 1,
      }

    }
    #endregion

  }

  public sealed partial class TypingMessage : pb::IMessage<TypingMessage> {
    private static readonly pb::MessageParser<TypingMessage> _parser = new pb::MessageParser<TypingMessage>(() => new TypingMessage());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TypingMessage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::libsignalservice.push.SignalServiceReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TypingMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TypingMessage(TypingMessage other) : this() {
      _hasBits0 = other._hasBits0;
      timestamp_ = other.timestamp_;
      action_ = other.action_;
      groupId_ = other.groupId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TypingMessage Clone() {
      return new TypingMessage(this);
    }

    /// <summary>Field number for the "timestamp" field.</summary>
    public const int TimestampFieldNumber = 1;
    private readonly static ulong TimestampDefaultValue = 0UL;

    private ulong timestamp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Timestamp {
      get { if ((_hasBits0 & 1) != 0) { return timestamp_; } else { return TimestampDefaultValue; } }
      set {
        _hasBits0 |= 1;
        timestamp_ = value;
      }
    }
    /// <summary>Gets whether the "timestamp" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTimestamp {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "timestamp" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTimestamp() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "action" field.</summary>
    public const int ActionFieldNumber = 2;
    private readonly static global::libsignalservice.push.TypingMessage.Types.Action ActionDefaultValue = global::libsignalservice.push.TypingMessage.Types.Action.Started;

    private global::libsignalservice.push.TypingMessage.Types.Action action_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::libsignalservice.push.TypingMessage.Types.Action Action {
      get { if ((_hasBits0 & 2) != 0) { return action_; } else { return ActionDefaultValue; } }
      set {
        _hasBits0 |= 2;
        action_ = value;
      }
    }
    /// <summary>Gets whether the "action" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasAction {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "action" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearAction() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "groupId" field.</summary>
    public const int GroupIdFieldNumber = 3;
    private readonly static pb::ByteString GroupIdDefaultValue = pb::ByteString.Empty;

    private pb::ByteString groupId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString GroupId {
      get { return groupId_ ?? GroupIdDefaultValue; }
      set {
        groupId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "groupId" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasGroupId {
      get { return groupId_ != null; }
    }
    /// <summary>Clears the value of the "groupId" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearGroupId() {
      groupId_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TypingMessage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TypingMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Timestamp != other.Timestamp) return false;
      if (Action != other.Action) return false;
      if (GroupId != other.GroupId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasTimestamp) hash ^= Timestamp.GetHashCode();
      if (HasAction) hash ^= Action.GetHashCode();
      if (HasGroupId) hash ^= GroupId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasTimestamp) {
        output.WriteRawTag(8);
        output.WriteUInt64(Timestamp);
      }
      if (HasAction) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Action);
      }
      if (HasGroupId) {
        output.WriteRawTag(26);
        output.WriteBytes(GroupId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasTimestamp) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Timestamp);
      }
      if (HasAction) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Action);
      }
      if (HasGroupId) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(GroupId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TypingMessage other) {
      if (other == null) {
        return;
      }
      if (other.HasTimestamp) {
        Timestamp = other.Timestamp;
      }
      if (other.HasAction) {
        Action = other.Action;
      }
      if (other.HasGroupId) {
        GroupId = other.GroupId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Timestamp = input.ReadUInt64();
            break;
          }
          case 16: {
            Action = (global::libsignalservice.push.TypingMessage.Types.Action) input.ReadEnum();
            break;
          }
          case 26: {
            GroupId = input.ReadBytes();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the TypingMessage message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum Action {
        [pbr::OriginalName("STARTED")] Started = 0,
        [pbr::OriginalName("STOPPED")] Stopped = 1,
      }

    }
    #endregion

  }

  public sealed partial class Verified : pb::IMessage<Verified> {
    private static readonly pb::MessageParser<Verified> _parser = new pb::MessageParser<Verified>(() => new Verified());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Verified> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::libsignalservice.push.SignalServiceReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Verified() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Verified(Verified other) : this() {
      _hasBits0 = other._hasBits0;
      destination_ = other.destination_;
      destinationUuid_ = other.destinationUuid_;
      identityKey_ = other.identityKey_;
      state_ = other.state_;
      nullMessage_ = other.nullMessage_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Verified Clone() {
      return new Verified(this);
    }

    /// <summary>Field number for the "destination" field.</summary>
    public const int DestinationFieldNumber = 1;
    private readonly static string DestinationDefaultValue = "";

    private string destination_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Destination {
      get { return destination_ ?? DestinationDefaultValue; }
      set {
        destination_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "destination" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasDestination {
      get { return destination_ != null; }
    }
    /// <summary>Clears the value of the "destination" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearDestination() {
      destination_ = null;
    }

    /// <summary>Field number for the "destinationUuid" field.</summary>
    public const int DestinationUuidFieldNumber = 5;
    private readonly static string DestinationUuidDefaultValue = "";

    private string destinationUuid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DestinationUuid {
      get { return destinationUuid_ ?? DestinationUuidDefaultValue; }
      set {
        destinationUuid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "destinationUuid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasDestinationUuid {
      get { return destinationUuid_ != null; }
    }
    /// <summary>Clears the value of the "destinationUuid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearDestinationUuid() {
      destinationUuid_ = null;
    }

    /// <summary>Field number for the "identityKey" field.</summary>
    public const int IdentityKeyFieldNumber = 2;
    private readonly static pb::ByteString IdentityKeyDefaultValue = pb::ByteString.Empty;

    private pb::ByteString identityKey_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString IdentityKey {
      get { return identityKey_ ?? IdentityKeyDefaultValue; }
      set {
        identityKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "identityKey" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasIdentityKey {
      get { return identityKey_ != null; }
    }
    /// <summary>Clears the value of the "identityKey" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearIdentityKey() {
      identityKey_ = null;
    }

    /// <summary>Field number for the "state" field.</summary>
    public const int StateFieldNumber = 3;
    private readonly static global::libsignalservice.push.Verified.Types.State StateDefaultValue = global::libsignalservice.push.Verified.Types.State.Default;

    private global::libsignalservice.push.Verified.Types.State state_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::libsignalservice.push.Verified.Types.State State {
      get { if ((_hasBits0 & 1) != 0) { return state_; } else { return StateDefaultValue; } }
      set {
        _hasBits0 |= 1;
        state_ = value;
      }
    }
    /// <summary>Gets whether the "state" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasState {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "state" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearState() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "nullMessage" field.</summary>
    public const int NullMessageFieldNumber = 4;
    private readonly static pb::ByteString NullMessageDefaultValue = pb::ByteString.Empty;

    private pb::ByteString nullMessage_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString NullMessage {
      get { return nullMessage_ ?? NullMessageDefaultValue; }
      set {
        nullMessage_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "nullMessage" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasNullMessage {
      get { return nullMessage_ != null; }
    }
    /// <summary>Clears the value of the "nullMessage" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearNullMessage() {
      nullMessage_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Verified);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Verified other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Destination != other.Destination) return false;
      if (DestinationUuid != other.DestinationUuid) return false;
      if (IdentityKey != other.IdentityKey) return false;
      if (State != other.State) return false;
      if (NullMessage != other.NullMessage) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasDestination) hash ^= Destination.GetHashCode();
      if (HasDestinationUuid) hash ^= DestinationUuid.GetHashCode();
      if (HasIdentityKey) hash ^= IdentityKey.GetHashCode();
      if (HasState) hash ^= State.GetHashCode();
      if (HasNullMessage) hash ^= NullMessage.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasDestination) {
        output.WriteRawTag(10);
        output.WriteString(Destination);
      }
      if (HasIdentityKey) {
        output.WriteRawTag(18);
        output.WriteBytes(IdentityKey);
      }
      if (HasState) {
        output.WriteRawTag(24);
        output.WriteEnum((int) State);
      }
      if (HasNullMessage) {
        output.WriteRawTag(34);
        output.WriteBytes(NullMessage);
      }
      if (HasDestinationUuid) {
        output.WriteRawTag(42);
        output.WriteString(DestinationUuid);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasDestination) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Destination);
      }
      if (HasDestinationUuid) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DestinationUuid);
      }
      if (HasIdentityKey) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(IdentityKey);
      }
      if (HasState) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) State);
      }
      if (HasNullMessage) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(NullMessage);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Verified other) {
      if (other == null) {
        return;
      }
      if (other.HasDestination) {
        Destination = other.Destination;
      }
      if (other.HasDestinationUuid) {
        DestinationUuid = other.DestinationUuid;
      }
      if (other.HasIdentityKey) {
        IdentityKey = other.IdentityKey;
      }
      if (other.HasState) {
        State = other.State;
      }
      if (other.HasNullMessage) {
        NullMessage = other.NullMessage;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Destination = input.ReadString();
            break;
          }
          case 18: {
            IdentityKey = input.ReadBytes();
            break;
          }
          case 24: {
            State = (global::libsignalservice.push.Verified.Types.State) input.ReadEnum();
            break;
          }
          case 34: {
            NullMessage = input.ReadBytes();
            break;
          }
          case 42: {
            DestinationUuid = input.ReadString();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the Verified message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum State {
        [pbr::OriginalName("DEFAULT")] Default = 0,
        [pbr::OriginalName("VERIFIED")] Verified = 1,
        [pbr::OriginalName("UNVERIFIED")] Unverified = 2,
      }

    }
    #endregion

  }

  public sealed partial class SyncMessage : pb::IMessage<SyncMessage> {
    private static readonly pb::MessageParser<SyncMessage> _parser = new pb::MessageParser<SyncMessage>(() => new SyncMessage());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SyncMessage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::libsignalservice.push.SignalServiceReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SyncMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SyncMessage(SyncMessage other) : this() {
      sent_ = other.sent_ != null ? other.sent_.Clone() : null;
      contacts_ = other.contacts_ != null ? other.contacts_.Clone() : null;
      groups_ = other.groups_ != null ? other.groups_.Clone() : null;
      request_ = other.request_ != null ? other.request_.Clone() : null;
      read_ = other.read_.Clone();
      blocked_ = other.blocked_ != null ? other.blocked_.Clone() : null;
      verified_ = other.verified_ != null ? other.verified_.Clone() : null;
      configuration_ = other.configuration_ != null ? other.configuration_.Clone() : null;
      padding_ = other.padding_;
      stickerPackOperation_ = other.stickerPackOperation_.Clone();
      viewOnceOpen_ = other.viewOnceOpen_ != null ? other.viewOnceOpen_.Clone() : null;
      fetchLatest_ = other.fetchLatest_ != null ? other.fetchLatest_.Clone() : null;
      keys_ = other.keys_ != null ? other.keys_.Clone() : null;
      messageRequestResponse_ = other.messageRequestResponse_ != null ? other.messageRequestResponse_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SyncMessage Clone() {
      return new SyncMessage(this);
    }

    /// <summary>Field number for the "sent" field.</summary>
    public const int SentFieldNumber = 1;
    private global::libsignalservice.push.SyncMessage.Types.Sent sent_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::libsignalservice.push.SyncMessage.Types.Sent Sent {
      get { return sent_; }
      set {
        sent_ = value;
      }
    }

    /// <summary>Field number for the "contacts" field.</summary>
    public const int ContactsFieldNumber = 2;
    private global::libsignalservice.push.SyncMessage.Types.Contacts contacts_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::libsignalservice.push.SyncMessage.Types.Contacts Contacts {
      get { return contacts_; }
      set {
        contacts_ = value;
      }
    }

    /// <summary>Field number for the "groups" field.</summary>
    public const int GroupsFieldNumber = 3;
    private global::libsignalservice.push.SyncMessage.Types.Groups groups_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::libsignalservice.push.SyncMessage.Types.Groups Groups {
      get { return groups_; }
      set {
        groups_ = value;
      }
    }

    /// <summary>Field number for the "request" field.</summary>
    public const int RequestFieldNumber = 4;
    private global::libsignalservice.push.SyncMessage.Types.Request request_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::libsignalservice.push.SyncMessage.Types.Request Request {
      get { return request_; }
      set {
        request_ = value;
      }
    }

    /// <summary>Field number for the "read" field.</summary>
    public const int ReadFieldNumber = 5;
    private static readonly pb::FieldCodec<global::libsignalservice.push.SyncMessage.Types.Read> _repeated_read_codec
        = pb::FieldCodec.ForMessage(42, global::libsignalservice.push.SyncMessage.Types.Read.Parser);
    private readonly pbc::RepeatedField<global::libsignalservice.push.SyncMessage.Types.Read> read_ = new pbc::RepeatedField<global::libsignalservice.push.SyncMessage.Types.Read>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::libsignalservice.push.SyncMessage.Types.Read> Read {
      get { return read_; }
    }

    /// <summary>Field number for the "blocked" field.</summary>
    public const int BlockedFieldNumber = 6;
    private global::libsignalservice.push.SyncMessage.Types.Blocked blocked_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::libsignalservice.push.SyncMessage.Types.Blocked Blocked {
      get { return blocked_; }
      set {
        blocked_ = value;
      }
    }

    /// <summary>Field number for the "verified" field.</summary>
    public const int VerifiedFieldNumber = 7;
    private global::libsignalservice.push.Verified verified_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::libsignalservice.push.Verified Verified {
      get { return verified_; }
      set {
        verified_ = value;
      }
    }

    /// <summary>Field number for the "configuration" field.</summary>
    public const int ConfigurationFieldNumber = 9;
    private global::libsignalservice.push.SyncMessage.Types.Configuration configuration_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::libsignalservice.push.SyncMessage.Types.Configuration Configuration {
      get { return configuration_; }
      set {
        configuration_ = value;
      }
    }

    /// <summary>Field number for the "padding" field.</summary>
    public const int PaddingFieldNumber = 8;
    private readonly static pb::ByteString PaddingDefaultValue = pb::ByteString.Empty;

    private pb::ByteString padding_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Padding {
      get { return padding_ ?? PaddingDefaultValue; }
      set {
        padding_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "padding" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPadding {
      get { return padding_ != null; }
    }
    /// <summary>Clears the value of the "padding" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPadding() {
      padding_ = null;
    }

    /// <summary>Field number for the "stickerPackOperation" field.</summary>
    public const int StickerPackOperationFieldNumber = 10;
    private static readonly pb::FieldCodec<global::libsignalservice.push.SyncMessage.Types.StickerPackOperation> _repeated_stickerPackOperation_codec
        = pb::FieldCodec.ForMessage(82, global::libsignalservice.push.SyncMessage.Types.StickerPackOperation.Parser);
    private readonly pbc::RepeatedField<global::libsignalservice.push.SyncMessage.Types.StickerPackOperation> stickerPackOperation_ = new pbc::RepeatedField<global::libsignalservice.push.SyncMessage.Types.StickerPackOperation>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::libsignalservice.push.SyncMessage.Types.StickerPackOperation> StickerPackOperation {
      get { return stickerPackOperation_; }
    }

    /// <summary>Field number for the "viewOnceOpen" field.</summary>
    public const int ViewOnceOpenFieldNumber = 11;
    private global::libsignalservice.push.SyncMessage.Types.ViewOnceOpen viewOnceOpen_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::libsignalservice.push.SyncMessage.Types.ViewOnceOpen ViewOnceOpen {
      get { return viewOnceOpen_; }
      set {
        viewOnceOpen_ = value;
      }
    }

    /// <summary>Field number for the "fetchLatest" field.</summary>
    public const int FetchLatestFieldNumber = 12;
    private global::libsignalservice.push.SyncMessage.Types.FetchLatest fetchLatest_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::libsignalservice.push.SyncMessage.Types.FetchLatest FetchLatest {
      get { return fetchLatest_; }
      set {
        fetchLatest_ = value;
      }
    }

    /// <summary>Field number for the "keys" field.</summary>
    public const int KeysFieldNumber = 13;
    private global::libsignalservice.push.SyncMessage.Types.Keys keys_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::libsignalservice.push.SyncMessage.Types.Keys Keys {
      get { return keys_; }
      set {
        keys_ = value;
      }
    }

    /// <summary>Field number for the "messageRequestResponse" field.</summary>
    public const int MessageRequestResponseFieldNumber = 14;
    private global::libsignalservice.push.SyncMessage.Types.MessageRequestResponse messageRequestResponse_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::libsignalservice.push.SyncMessage.Types.MessageRequestResponse MessageRequestResponse {
      get { return messageRequestResponse_; }
      set {
        messageRequestResponse_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SyncMessage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SyncMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Sent, other.Sent)) return false;
      if (!object.Equals(Contacts, other.Contacts)) return false;
      if (!object.Equals(Groups, other.Groups)) return false;
      if (!object.Equals(Request, other.Request)) return false;
      if(!read_.Equals(other.read_)) return false;
      if (!object.Equals(Blocked, other.Blocked)) return false;
      if (!object.Equals(Verified, other.Verified)) return false;
      if (!object.Equals(Configuration, other.Configuration)) return false;
      if (Padding != other.Padding) return false;
      if(!stickerPackOperation_.Equals(other.stickerPackOperation_)) return false;
      if (!object.Equals(ViewOnceOpen, other.ViewOnceOpen)) return false;
      if (!object.Equals(FetchLatest, other.FetchLatest)) return false;
      if (!object.Equals(Keys, other.Keys)) return false;
      if (!object.Equals(MessageRequestResponse, other.MessageRequestResponse)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (sent_ != null) hash ^= Sent.GetHashCode();
      if (contacts_ != null) hash ^= Contacts.GetHashCode();
      if (groups_ != null) hash ^= Groups.GetHashCode();
      if (request_ != null) hash ^= Request.GetHashCode();
      hash ^= read_.GetHashCode();
      if (blocked_ != null) hash ^= Blocked.GetHashCode();
      if (verified_ != null) hash ^= Verified.GetHashCode();
      if (configuration_ != null) hash ^= Configuration.GetHashCode();
      if (HasPadding) hash ^= Padding.GetHashCode();
      hash ^= stickerPackOperation_.GetHashCode();
      if (viewOnceOpen_ != null) hash ^= ViewOnceOpen.GetHashCode();
      if (fetchLatest_ != null) hash ^= FetchLatest.GetHashCode();
      if (keys_ != null) hash ^= Keys.GetHashCode();
      if (messageRequestResponse_ != null) hash ^= MessageRequestResponse.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (sent_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Sent);
      }
      if (contacts_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Contacts);
      }
      if (groups_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Groups);
      }
      if (request_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Request);
      }
      read_.WriteTo(output, _repeated_read_codec);
      if (blocked_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(Blocked);
      }
      if (verified_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(Verified);
      }
      if (HasPadding) {
        output.WriteRawTag(66);
        output.WriteBytes(Padding);
      }
      if (configuration_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(Configuration);
      }
      stickerPackOperation_.WriteTo(output, _repeated_stickerPackOperation_codec);
      if (viewOnceOpen_ != null) {
        output.WriteRawTag(90);
        output.WriteMessage(ViewOnceOpen);
      }
      if (fetchLatest_ != null) {
        output.WriteRawTag(98);
        output.WriteMessage(FetchLatest);
      }
      if (keys_ != null) {
        output.WriteRawTag(106);
        output.WriteMessage(Keys);
      }
      if (messageRequestResponse_ != null) {
        output.WriteRawTag(114);
        output.WriteMessage(MessageRequestResponse);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (sent_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Sent);
      }
      if (contacts_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Contacts);
      }
      if (groups_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Groups);
      }
      if (request_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Request);
      }
      size += read_.CalculateSize(_repeated_read_codec);
      if (blocked_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Blocked);
      }
      if (verified_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Verified);
      }
      if (configuration_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Configuration);
      }
      if (HasPadding) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Padding);
      }
      size += stickerPackOperation_.CalculateSize(_repeated_stickerPackOperation_codec);
      if (viewOnceOpen_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ViewOnceOpen);
      }
      if (fetchLatest_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(FetchLatest);
      }
      if (keys_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Keys);
      }
      if (messageRequestResponse_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(MessageRequestResponse);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SyncMessage other) {
      if (other == null) {
        return;
      }
      if (other.sent_ != null) {
        if (sent_ == null) {
          Sent = new global::libsignalservice.push.SyncMessage.Types.Sent();
        }
        Sent.MergeFrom(other.Sent);
      }
      if (other.contacts_ != null) {
        if (contacts_ == null) {
          Contacts = new global::libsignalservice.push.SyncMessage.Types.Contacts();
        }
        Contacts.MergeFrom(other.Contacts);
      }
      if (other.groups_ != null) {
        if (groups_ == null) {
          Groups = new global::libsignalservice.push.SyncMessage.Types.Groups();
        }
        Groups.MergeFrom(other.Groups);
      }
      if (other.request_ != null) {
        if (request_ == null) {
          Request = new global::libsignalservice.push.SyncMessage.Types.Request();
        }
        Request.MergeFrom(other.Request);
      }
      read_.Add(other.read_);
      if (other.blocked_ != null) {
        if (blocked_ == null) {
          Blocked = new global::libsignalservice.push.SyncMessage.Types.Blocked();
        }
        Blocked.MergeFrom(other.Blocked);
      }
      if (other.verified_ != null) {
        if (verified_ == null) {
          Verified = new global::libsignalservice.push.Verified();
        }
        Verified.MergeFrom(other.Verified);
      }
      if (other.configuration_ != null) {
        if (configuration_ == null) {
          Configuration = new global::libsignalservice.push.SyncMessage.Types.Configuration();
        }
        Configuration.MergeFrom(other.Configuration);
      }
      if (other.HasPadding) {
        Padding = other.Padding;
      }
      stickerPackOperation_.Add(other.stickerPackOperation_);
      if (other.viewOnceOpen_ != null) {
        if (viewOnceOpen_ == null) {
          ViewOnceOpen = new global::libsignalservice.push.SyncMessage.Types.ViewOnceOpen();
        }
        ViewOnceOpen.MergeFrom(other.ViewOnceOpen);
      }
      if (other.fetchLatest_ != null) {
        if (fetchLatest_ == null) {
          FetchLatest = new global::libsignalservice.push.SyncMessage.Types.FetchLatest();
        }
        FetchLatest.MergeFrom(other.FetchLatest);
      }
      if (other.keys_ != null) {
        if (keys_ == null) {
          Keys = new global::libsignalservice.push.SyncMessage.Types.Keys();
        }
        Keys.MergeFrom(other.Keys);
      }
      if (other.messageRequestResponse_ != null) {
        if (messageRequestResponse_ == null) {
          MessageRequestResponse = new global::libsignalservice.push.SyncMessage.Types.MessageRequestResponse();
        }
        MessageRequestResponse.MergeFrom(other.MessageRequestResponse);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (sent_ == null) {
              Sent = new global::libsignalservice.push.SyncMessage.Types.Sent();
            }
            input.ReadMessage(Sent);
            break;
          }
          case 18: {
            if (contacts_ == null) {
              Contacts = new global::libsignalservice.push.SyncMessage.Types.Contacts();
            }
            input.ReadMessage(Contacts);
            break;
          }
          case 26: {
            if (groups_ == null) {
              Groups = new global::libsignalservice.push.SyncMessage.Types.Groups();
            }
            input.ReadMessage(Groups);
            break;
          }
          case 34: {
            if (request_ == null) {
              Request = new global::libsignalservice.push.SyncMessage.Types.Request();
            }
            input.ReadMessage(Request);
            break;
          }
          case 42: {
            read_.AddEntriesFrom(input, _repeated_read_codec);
            break;
          }
          case 50: {
            if (blocked_ == null) {
              Blocked = new global::libsignalservice.push.SyncMessage.Types.Blocked();
            }
            input.ReadMessage(Blocked);
            break;
          }
          case 58: {
            if (verified_ == null) {
              Verified = new global::libsignalservice.push.Verified();
            }
            input.ReadMessage(Verified);
            break;
          }
          case 66: {
            Padding = input.ReadBytes();
            break;
          }
          case 74: {
            if (configuration_ == null) {
              Configuration = new global::libsignalservice.push.SyncMessage.Types.Configuration();
            }
            input.ReadMessage(Configuration);
            break;
          }
          case 82: {
            stickerPackOperation_.AddEntriesFrom(input, _repeated_stickerPackOperation_codec);
            break;
          }
          case 90: {
            if (viewOnceOpen_ == null) {
              ViewOnceOpen = new global::libsignalservice.push.SyncMessage.Types.ViewOnceOpen();
            }
            input.ReadMessage(ViewOnceOpen);
            break;
          }
          case 98: {
            if (fetchLatest_ == null) {
              FetchLatest = new global::libsignalservice.push.SyncMessage.Types.FetchLatest();
            }
            input.ReadMessage(FetchLatest);
            break;
          }
          case 106: {
            if (keys_ == null) {
              Keys = new global::libsignalservice.push.SyncMessage.Types.Keys();
            }
            input.ReadMessage(Keys);
            break;
          }
          case 114: {
            if (messageRequestResponse_ == null) {
              MessageRequestResponse = new global::libsignalservice.push.SyncMessage.Types.MessageRequestResponse();
            }
            input.ReadMessage(MessageRequestResponse);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the SyncMessage message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class Sent : pb::IMessage<Sent> {
        private static readonly pb::MessageParser<Sent> _parser = new pb::MessageParser<Sent>(() => new Sent());
        private pb::UnknownFieldSet _unknownFields;
        private int _hasBits0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Sent> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::libsignalservice.push.SyncMessage.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Sent() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Sent(Sent other) : this() {
          _hasBits0 = other._hasBits0;
          destination_ = other.destination_;
          destinationUuid_ = other.destinationUuid_;
          timestamp_ = other.timestamp_;
          message_ = other.message_ != null ? other.message_.Clone() : null;
          expirationStartTimestamp_ = other.expirationStartTimestamp_;
          unidentifiedStatus_ = other.unidentifiedStatus_.Clone();
          isRecipientUpdate_ = other.isRecipientUpdate_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Sent Clone() {
          return new Sent(this);
        }

        /// <summary>Field number for the "destination" field.</summary>
        public const int DestinationFieldNumber = 1;
        private readonly static string DestinationDefaultValue = "";

        private string destination_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Destination {
          get { return destination_ ?? DestinationDefaultValue; }
          set {
            destination_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }
        /// <summary>Gets whether the "destination" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasDestination {
          get { return destination_ != null; }
        }
        /// <summary>Clears the value of the "destination" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearDestination() {
          destination_ = null;
        }

        /// <summary>Field number for the "destinationUuid" field.</summary>
        public const int DestinationUuidFieldNumber = 7;
        private readonly static string DestinationUuidDefaultValue = "";

        private string destinationUuid_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string DestinationUuid {
          get { return destinationUuid_ ?? DestinationUuidDefaultValue; }
          set {
            destinationUuid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }
        /// <summary>Gets whether the "destinationUuid" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasDestinationUuid {
          get { return destinationUuid_ != null; }
        }
        /// <summary>Clears the value of the "destinationUuid" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearDestinationUuid() {
          destinationUuid_ = null;
        }

        /// <summary>Field number for the "timestamp" field.</summary>
        public const int TimestampFieldNumber = 2;
        private readonly static ulong TimestampDefaultValue = 0UL;

        private ulong timestamp_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ulong Timestamp {
          get { if ((_hasBits0 & 1) != 0) { return timestamp_; } else { return TimestampDefaultValue; } }
          set {
            _hasBits0 |= 1;
            timestamp_ = value;
          }
        }
        /// <summary>Gets whether the "timestamp" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasTimestamp {
          get { return (_hasBits0 & 1) != 0; }
        }
        /// <summary>Clears the value of the "timestamp" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearTimestamp() {
          _hasBits0 &= ~1;
        }

        /// <summary>Field number for the "message" field.</summary>
        public const int MessageFieldNumber = 3;
        private global::libsignalservice.push.DataMessage message_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::libsignalservice.push.DataMessage Message {
          get { return message_; }
          set {
            message_ = value;
          }
        }

        /// <summary>Field number for the "expirationStartTimestamp" field.</summary>
        public const int ExpirationStartTimestampFieldNumber = 4;
        private readonly static ulong ExpirationStartTimestampDefaultValue = 0UL;

        private ulong expirationStartTimestamp_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ulong ExpirationStartTimestamp {
          get { if ((_hasBits0 & 2) != 0) { return expirationStartTimestamp_; } else { return ExpirationStartTimestampDefaultValue; } }
          set {
            _hasBits0 |= 2;
            expirationStartTimestamp_ = value;
          }
        }
        /// <summary>Gets whether the "expirationStartTimestamp" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasExpirationStartTimestamp {
          get { return (_hasBits0 & 2) != 0; }
        }
        /// <summary>Clears the value of the "expirationStartTimestamp" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearExpirationStartTimestamp() {
          _hasBits0 &= ~2;
        }

        /// <summary>Field number for the "unidentifiedStatus" field.</summary>
        public const int UnidentifiedStatusFieldNumber = 5;
        private static readonly pb::FieldCodec<global::libsignalservice.push.SyncMessage.Types.Sent.Types.UnidentifiedDeliveryStatus> _repeated_unidentifiedStatus_codec
            = pb::FieldCodec.ForMessage(42, global::libsignalservice.push.SyncMessage.Types.Sent.Types.UnidentifiedDeliveryStatus.Parser);
        private readonly pbc::RepeatedField<global::libsignalservice.push.SyncMessage.Types.Sent.Types.UnidentifiedDeliveryStatus> unidentifiedStatus_ = new pbc::RepeatedField<global::libsignalservice.push.SyncMessage.Types.Sent.Types.UnidentifiedDeliveryStatus>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::libsignalservice.push.SyncMessage.Types.Sent.Types.UnidentifiedDeliveryStatus> UnidentifiedStatus {
          get { return unidentifiedStatus_; }
        }

        /// <summary>Field number for the "isRecipientUpdate" field.</summary>
        public const int IsRecipientUpdateFieldNumber = 6;
        private readonly static bool IsRecipientUpdateDefaultValue = false;

        private bool isRecipientUpdate_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool IsRecipientUpdate {
          get { if ((_hasBits0 & 4) != 0) { return isRecipientUpdate_; } else { return IsRecipientUpdateDefaultValue; } }
          set {
            _hasBits0 |= 4;
            isRecipientUpdate_ = value;
          }
        }
        /// <summary>Gets whether the "isRecipientUpdate" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasIsRecipientUpdate {
          get { return (_hasBits0 & 4) != 0; }
        }
        /// <summary>Clears the value of the "isRecipientUpdate" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearIsRecipientUpdate() {
          _hasBits0 &= ~4;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Sent);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Sent other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Destination != other.Destination) return false;
          if (DestinationUuid != other.DestinationUuid) return false;
          if (Timestamp != other.Timestamp) return false;
          if (!object.Equals(Message, other.Message)) return false;
          if (ExpirationStartTimestamp != other.ExpirationStartTimestamp) return false;
          if(!unidentifiedStatus_.Equals(other.unidentifiedStatus_)) return false;
          if (IsRecipientUpdate != other.IsRecipientUpdate) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (HasDestination) hash ^= Destination.GetHashCode();
          if (HasDestinationUuid) hash ^= DestinationUuid.GetHashCode();
          if (HasTimestamp) hash ^= Timestamp.GetHashCode();
          if (message_ != null) hash ^= Message.GetHashCode();
          if (HasExpirationStartTimestamp) hash ^= ExpirationStartTimestamp.GetHashCode();
          hash ^= unidentifiedStatus_.GetHashCode();
          if (HasIsRecipientUpdate) hash ^= IsRecipientUpdate.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (HasDestination) {
            output.WriteRawTag(10);
            output.WriteString(Destination);
          }
          if (HasTimestamp) {
            output.WriteRawTag(16);
            output.WriteUInt64(Timestamp);
          }
          if (message_ != null) {
            output.WriteRawTag(26);
            output.WriteMessage(Message);
          }
          if (HasExpirationStartTimestamp) {
            output.WriteRawTag(32);
            output.WriteUInt64(ExpirationStartTimestamp);
          }
          unidentifiedStatus_.WriteTo(output, _repeated_unidentifiedStatus_codec);
          if (HasIsRecipientUpdate) {
            output.WriteRawTag(48);
            output.WriteBool(IsRecipientUpdate);
          }
          if (HasDestinationUuid) {
            output.WriteRawTag(58);
            output.WriteString(DestinationUuid);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (HasDestination) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Destination);
          }
          if (HasDestinationUuid) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(DestinationUuid);
          }
          if (HasTimestamp) {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Timestamp);
          }
          if (message_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Message);
          }
          if (HasExpirationStartTimestamp) {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(ExpirationStartTimestamp);
          }
          size += unidentifiedStatus_.CalculateSize(_repeated_unidentifiedStatus_codec);
          if (HasIsRecipientUpdate) {
            size += 1 + 1;
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Sent other) {
          if (other == null) {
            return;
          }
          if (other.HasDestination) {
            Destination = other.Destination;
          }
          if (other.HasDestinationUuid) {
            DestinationUuid = other.DestinationUuid;
          }
          if (other.HasTimestamp) {
            Timestamp = other.Timestamp;
          }
          if (other.message_ != null) {
            if (message_ == null) {
              Message = new global::libsignalservice.push.DataMessage();
            }
            Message.MergeFrom(other.Message);
          }
          if (other.HasExpirationStartTimestamp) {
            ExpirationStartTimestamp = other.ExpirationStartTimestamp;
          }
          unidentifiedStatus_.Add(other.unidentifiedStatus_);
          if (other.HasIsRecipientUpdate) {
            IsRecipientUpdate = other.IsRecipientUpdate;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                Destination = input.ReadString();
                break;
              }
              case 16: {
                Timestamp = input.ReadUInt64();
                break;
              }
              case 26: {
                if (message_ == null) {
                  Message = new global::libsignalservice.push.DataMessage();
                }
                input.ReadMessage(Message);
                break;
              }
              case 32: {
                ExpirationStartTimestamp = input.ReadUInt64();
                break;
              }
              case 42: {
                unidentifiedStatus_.AddEntriesFrom(input, _repeated_unidentifiedStatus_codec);
                break;
              }
              case 48: {
                IsRecipientUpdate = input.ReadBool();
                break;
              }
              case 58: {
                DestinationUuid = input.ReadString();
                break;
              }
            }
          }
        }

        #region Nested types
        /// <summary>Container for nested types declared in the Sent message type.</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static partial class Types {
          public sealed partial class UnidentifiedDeliveryStatus : pb::IMessage<UnidentifiedDeliveryStatus> {
            private static readonly pb::MessageParser<UnidentifiedDeliveryStatus> _parser = new pb::MessageParser<UnidentifiedDeliveryStatus>(() => new UnidentifiedDeliveryStatus());
            private pb::UnknownFieldSet _unknownFields;
            private int _hasBits0;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pb::MessageParser<UnidentifiedDeliveryStatus> Parser { get { return _parser; } }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pbr::MessageDescriptor Descriptor {
              get { return global::libsignalservice.push.SyncMessage.Types.Sent.Descriptor.NestedTypes[0]; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            pbr::MessageDescriptor pb::IMessage.Descriptor {
              get { return Descriptor; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public UnidentifiedDeliveryStatus() {
              OnConstruction();
            }

            partial void OnConstruction();

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public UnidentifiedDeliveryStatus(UnidentifiedDeliveryStatus other) : this() {
              _hasBits0 = other._hasBits0;
              destination_ = other.destination_;
              destinationUuid_ = other.destinationUuid_;
              unidentified_ = other.unidentified_;
              _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public UnidentifiedDeliveryStatus Clone() {
              return new UnidentifiedDeliveryStatus(this);
            }

            /// <summary>Field number for the "destination" field.</summary>
            public const int DestinationFieldNumber = 1;
            private readonly static string DestinationDefaultValue = "";

            private string destination_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public string Destination {
              get { return destination_ ?? DestinationDefaultValue; }
              set {
                destination_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
              }
            }
            /// <summary>Gets whether the "destination" field is set</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool HasDestination {
              get { return destination_ != null; }
            }
            /// <summary>Clears the value of the "destination" field</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void ClearDestination() {
              destination_ = null;
            }

            /// <summary>Field number for the "destinationUuid" field.</summary>
            public const int DestinationUuidFieldNumber = 3;
            private readonly static string DestinationUuidDefaultValue = "";

            private string destinationUuid_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public string DestinationUuid {
              get { return destinationUuid_ ?? DestinationUuidDefaultValue; }
              set {
                destinationUuid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
              }
            }
            /// <summary>Gets whether the "destinationUuid" field is set</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool HasDestinationUuid {
              get { return destinationUuid_ != null; }
            }
            /// <summary>Clears the value of the "destinationUuid" field</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void ClearDestinationUuid() {
              destinationUuid_ = null;
            }

            /// <summary>Field number for the "unidentified" field.</summary>
            public const int UnidentifiedFieldNumber = 2;
            private readonly static bool UnidentifiedDefaultValue = false;

            private bool unidentified_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool Unidentified {
              get { if ((_hasBits0 & 1) != 0) { return unidentified_; } else { return UnidentifiedDefaultValue; } }
              set {
                _hasBits0 |= 1;
                unidentified_ = value;
              }
            }
            /// <summary>Gets whether the "unidentified" field is set</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool HasUnidentified {
              get { return (_hasBits0 & 1) != 0; }
            }
            /// <summary>Clears the value of the "unidentified" field</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void ClearUnidentified() {
              _hasBits0 &= ~1;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override bool Equals(object other) {
              return Equals(other as UnidentifiedDeliveryStatus);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool Equals(UnidentifiedDeliveryStatus other) {
              if (ReferenceEquals(other, null)) {
                return false;
              }
              if (ReferenceEquals(other, this)) {
                return true;
              }
              if (Destination != other.Destination) return false;
              if (DestinationUuid != other.DestinationUuid) return false;
              if (Unidentified != other.Unidentified) return false;
              return Equals(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override int GetHashCode() {
              int hash = 1;
              if (HasDestination) hash ^= Destination.GetHashCode();
              if (HasDestinationUuid) hash ^= DestinationUuid.GetHashCode();
              if (HasUnidentified) hash ^= Unidentified.GetHashCode();
              if (_unknownFields != null) {
                hash ^= _unknownFields.GetHashCode();
              }
              return hash;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override string ToString() {
              return pb::JsonFormatter.ToDiagnosticString(this);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void WriteTo(pb::CodedOutputStream output) {
              if (HasDestination) {
                output.WriteRawTag(10);
                output.WriteString(Destination);
              }
              if (HasUnidentified) {
                output.WriteRawTag(16);
                output.WriteBool(Unidentified);
              }
              if (HasDestinationUuid) {
                output.WriteRawTag(26);
                output.WriteString(DestinationUuid);
              }
              if (_unknownFields != null) {
                _unknownFields.WriteTo(output);
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int CalculateSize() {
              int size = 0;
              if (HasDestination) {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(Destination);
              }
              if (HasDestinationUuid) {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(DestinationUuid);
              }
              if (HasUnidentified) {
                size += 1 + 1;
              }
              if (_unknownFields != null) {
                size += _unknownFields.CalculateSize();
              }
              return size;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(UnidentifiedDeliveryStatus other) {
              if (other == null) {
                return;
              }
              if (other.HasDestination) {
                Destination = other.Destination;
              }
              if (other.HasDestinationUuid) {
                DestinationUuid = other.DestinationUuid;
              }
              if (other.HasUnidentified) {
                Unidentified = other.Unidentified;
              }
              _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(pb::CodedInputStream input) {
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                    break;
                  case 10: {
                    Destination = input.ReadString();
                    break;
                  }
                  case 16: {
                    Unidentified = input.ReadBool();
                    break;
                  }
                  case 26: {
                    DestinationUuid = input.ReadString();
                    break;
                  }
                }
              }
            }

          }

        }
        #endregion

      }

      public sealed partial class Contacts : pb::IMessage<Contacts> {
        private static readonly pb::MessageParser<Contacts> _parser = new pb::MessageParser<Contacts>(() => new Contacts());
        private pb::UnknownFieldSet _unknownFields;
        private int _hasBits0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Contacts> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::libsignalservice.push.SyncMessage.Descriptor.NestedTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Contacts() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Contacts(Contacts other) : this() {
          _hasBits0 = other._hasBits0;
          blob_ = other.blob_ != null ? other.blob_.Clone() : null;
          complete_ = other.complete_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Contacts Clone() {
          return new Contacts(this);
        }

        /// <summary>Field number for the "blob" field.</summary>
        public const int BlobFieldNumber = 1;
        private global::libsignalservice.push.AttachmentPointer blob_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::libsignalservice.push.AttachmentPointer Blob {
          get { return blob_; }
          set {
            blob_ = value;
          }
        }

        /// <summary>Field number for the "complete" field.</summary>
        public const int CompleteFieldNumber = 2;
        private readonly static bool CompleteDefaultValue = false;

        private bool complete_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Complete {
          get { if ((_hasBits0 & 1) != 0) { return complete_; } else { return CompleteDefaultValue; } }
          set {
            _hasBits0 |= 1;
            complete_ = value;
          }
        }
        /// <summary>Gets whether the "complete" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasComplete {
          get { return (_hasBits0 & 1) != 0; }
        }
        /// <summary>Clears the value of the "complete" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearComplete() {
          _hasBits0 &= ~1;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Contacts);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Contacts other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(Blob, other.Blob)) return false;
          if (Complete != other.Complete) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (blob_ != null) hash ^= Blob.GetHashCode();
          if (HasComplete) hash ^= Complete.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (blob_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(Blob);
          }
          if (HasComplete) {
            output.WriteRawTag(16);
            output.WriteBool(Complete);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (blob_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Blob);
          }
          if (HasComplete) {
            size += 1 + 1;
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Contacts other) {
          if (other == null) {
            return;
          }
          if (other.blob_ != null) {
            if (blob_ == null) {
              Blob = new global::libsignalservice.push.AttachmentPointer();
            }
            Blob.MergeFrom(other.Blob);
          }
          if (other.HasComplete) {
            Complete = other.Complete;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                if (blob_ == null) {
                  Blob = new global::libsignalservice.push.AttachmentPointer();
                }
                input.ReadMessage(Blob);
                break;
              }
              case 16: {
                Complete = input.ReadBool();
                break;
              }
            }
          }
        }

      }

      public sealed partial class Groups : pb::IMessage<Groups> {
        private static readonly pb::MessageParser<Groups> _parser = new pb::MessageParser<Groups>(() => new Groups());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Groups> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::libsignalservice.push.SyncMessage.Descriptor.NestedTypes[2]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Groups() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Groups(Groups other) : this() {
          blob_ = other.blob_ != null ? other.blob_.Clone() : null;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Groups Clone() {
          return new Groups(this);
        }

        /// <summary>Field number for the "blob" field.</summary>
        public const int BlobFieldNumber = 1;
        private global::libsignalservice.push.AttachmentPointer blob_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::libsignalservice.push.AttachmentPointer Blob {
          get { return blob_; }
          set {
            blob_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Groups);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Groups other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(Blob, other.Blob)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (blob_ != null) hash ^= Blob.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (blob_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(Blob);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (blob_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Blob);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Groups other) {
          if (other == null) {
            return;
          }
          if (other.blob_ != null) {
            if (blob_ == null) {
              Blob = new global::libsignalservice.push.AttachmentPointer();
            }
            Blob.MergeFrom(other.Blob);
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                if (blob_ == null) {
                  Blob = new global::libsignalservice.push.AttachmentPointer();
                }
                input.ReadMessage(Blob);
                break;
              }
            }
          }
        }

      }

      public sealed partial class Blocked : pb::IMessage<Blocked> {
        private static readonly pb::MessageParser<Blocked> _parser = new pb::MessageParser<Blocked>(() => new Blocked());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Blocked> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::libsignalservice.push.SyncMessage.Descriptor.NestedTypes[3]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Blocked() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Blocked(Blocked other) : this() {
          numbers_ = other.numbers_.Clone();
          uuids_ = other.uuids_.Clone();
          groupIds_ = other.groupIds_.Clone();
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Blocked Clone() {
          return new Blocked(this);
        }

        /// <summary>Field number for the "numbers" field.</summary>
        public const int NumbersFieldNumber = 1;
        private static readonly pb::FieldCodec<string> _repeated_numbers_codec
            = pb::FieldCodec.ForString(10);
        private readonly pbc::RepeatedField<string> numbers_ = new pbc::RepeatedField<string>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<string> Numbers {
          get { return numbers_; }
        }

        /// <summary>Field number for the "uuids" field.</summary>
        public const int UuidsFieldNumber = 3;
        private static readonly pb::FieldCodec<string> _repeated_uuids_codec
            = pb::FieldCodec.ForString(26);
        private readonly pbc::RepeatedField<string> uuids_ = new pbc::RepeatedField<string>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<string> Uuids {
          get { return uuids_; }
        }

        /// <summary>Field number for the "groupIds" field.</summary>
        public const int GroupIdsFieldNumber = 2;
        private static readonly pb::FieldCodec<pb::ByteString> _repeated_groupIds_codec
            = pb::FieldCodec.ForBytes(18);
        private readonly pbc::RepeatedField<pb::ByteString> groupIds_ = new pbc::RepeatedField<pb::ByteString>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<pb::ByteString> GroupIds {
          get { return groupIds_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Blocked);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Blocked other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if(!numbers_.Equals(other.numbers_)) return false;
          if(!uuids_.Equals(other.uuids_)) return false;
          if(!groupIds_.Equals(other.groupIds_)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          hash ^= numbers_.GetHashCode();
          hash ^= uuids_.GetHashCode();
          hash ^= groupIds_.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          numbers_.WriteTo(output, _repeated_numbers_codec);
          groupIds_.WriteTo(output, _repeated_groupIds_codec);
          uuids_.WriteTo(output, _repeated_uuids_codec);
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          size += numbers_.CalculateSize(_repeated_numbers_codec);
          size += uuids_.CalculateSize(_repeated_uuids_codec);
          size += groupIds_.CalculateSize(_repeated_groupIds_codec);
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Blocked other) {
          if (other == null) {
            return;
          }
          numbers_.Add(other.numbers_);
          uuids_.Add(other.uuids_);
          groupIds_.Add(other.groupIds_);
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                numbers_.AddEntriesFrom(input, _repeated_numbers_codec);
                break;
              }
              case 18: {
                groupIds_.AddEntriesFrom(input, _repeated_groupIds_codec);
                break;
              }
              case 26: {
                uuids_.AddEntriesFrom(input, _repeated_uuids_codec);
                break;
              }
            }
          }
        }

      }

      public sealed partial class Request : pb::IMessage<Request> {
        private static readonly pb::MessageParser<Request> _parser = new pb::MessageParser<Request>(() => new Request());
        private pb::UnknownFieldSet _unknownFields;
        private int _hasBits0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Request> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::libsignalservice.push.SyncMessage.Descriptor.NestedTypes[4]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Request() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Request(Request other) : this() {
          _hasBits0 = other._hasBits0;
          type_ = other.type_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Request Clone() {
          return new Request(this);
        }

        /// <summary>Field number for the "type" field.</summary>
        public const int TypeFieldNumber = 1;
        private readonly static global::libsignalservice.push.SyncMessage.Types.Request.Types.Type TypeDefaultValue = global::libsignalservice.push.SyncMessage.Types.Request.Types.Type.Unknown;

        private global::libsignalservice.push.SyncMessage.Types.Request.Types.Type type_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::libsignalservice.push.SyncMessage.Types.Request.Types.Type Type {
          get { if ((_hasBits0 & 1) != 0) { return type_; } else { return TypeDefaultValue; } }
          set {
            _hasBits0 |= 1;
            type_ = value;
          }
        }
        /// <summary>Gets whether the "type" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasType {
          get { return (_hasBits0 & 1) != 0; }
        }
        /// <summary>Clears the value of the "type" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearType() {
          _hasBits0 &= ~1;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Request);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Request other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Type != other.Type) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (HasType) hash ^= Type.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (HasType) {
            output.WriteRawTag(8);
            output.WriteEnum((int) Type);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (HasType) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Request other) {
          if (other == null) {
            return;
          }
          if (other.HasType) {
            Type = other.Type;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                Type = (global::libsignalservice.push.SyncMessage.Types.Request.Types.Type) input.ReadEnum();
                break;
              }
            }
          }
        }

        #region Nested types
        /// <summary>Container for nested types declared in the Request message type.</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static partial class Types {
          public enum Type {
            [pbr::OriginalName("UNKNOWN")] Unknown = 0,
            [pbr::OriginalName("CONTACTS")] Contacts = 1,
            [pbr::OriginalName("GROUPS")] Groups = 2,
            [pbr::OriginalName("BLOCKED")] Blocked = 3,
            [pbr::OriginalName("CONFIGURATION")] Configuration = 4,
            [pbr::OriginalName("KEYS")] Keys = 5,
          }

        }
        #endregion

      }

      public sealed partial class Keys : pb::IMessage<Keys> {
        private static readonly pb::MessageParser<Keys> _parser = new pb::MessageParser<Keys>(() => new Keys());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Keys> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::libsignalservice.push.SyncMessage.Descriptor.NestedTypes[5]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Keys() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Keys(Keys other) : this() {
          storageService_ = other.storageService_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Keys Clone() {
          return new Keys(this);
        }

        /// <summary>Field number for the "storageService" field.</summary>
        public const int StorageServiceFieldNumber = 1;
        private readonly static pb::ByteString StorageServiceDefaultValue = pb::ByteString.Empty;

        private pb::ByteString storageService_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pb::ByteString StorageService {
          get { return storageService_ ?? StorageServiceDefaultValue; }
          set {
            storageService_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }
        /// <summary>Gets whether the "storageService" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasStorageService {
          get { return storageService_ != null; }
        }
        /// <summary>Clears the value of the "storageService" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearStorageService() {
          storageService_ = null;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Keys);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Keys other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (StorageService != other.StorageService) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (HasStorageService) hash ^= StorageService.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (HasStorageService) {
            output.WriteRawTag(10);
            output.WriteBytes(StorageService);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (HasStorageService) {
            size += 1 + pb::CodedOutputStream.ComputeBytesSize(StorageService);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Keys other) {
          if (other == null) {
            return;
          }
          if (other.HasStorageService) {
            StorageService = other.StorageService;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                StorageService = input.ReadBytes();
                break;
              }
            }
          }
        }

      }

      public sealed partial class Read : pb::IMessage<Read> {
        private static readonly pb::MessageParser<Read> _parser = new pb::MessageParser<Read>(() => new Read());
        private pb::UnknownFieldSet _unknownFields;
        private int _hasBits0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Read> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::libsignalservice.push.SyncMessage.Descriptor.NestedTypes[6]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Read() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Read(Read other) : this() {
          _hasBits0 = other._hasBits0;
          sender_ = other.sender_;
          senderUuid_ = other.senderUuid_;
          timestamp_ = other.timestamp_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Read Clone() {
          return new Read(this);
        }

        /// <summary>Field number for the "sender" field.</summary>
        public const int SenderFieldNumber = 1;
        private readonly static string SenderDefaultValue = "";

        private string sender_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Sender {
          get { return sender_ ?? SenderDefaultValue; }
          set {
            sender_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }
        /// <summary>Gets whether the "sender" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasSender {
          get { return sender_ != null; }
        }
        /// <summary>Clears the value of the "sender" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearSender() {
          sender_ = null;
        }

        /// <summary>Field number for the "senderUuid" field.</summary>
        public const int SenderUuidFieldNumber = 3;
        private readonly static string SenderUuidDefaultValue = "";

        private string senderUuid_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string SenderUuid {
          get { return senderUuid_ ?? SenderUuidDefaultValue; }
          set {
            senderUuid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }
        /// <summary>Gets whether the "senderUuid" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasSenderUuid {
          get { return senderUuid_ != null; }
        }
        /// <summary>Clears the value of the "senderUuid" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearSenderUuid() {
          senderUuid_ = null;
        }

        /// <summary>Field number for the "timestamp" field.</summary>
        public const int TimestampFieldNumber = 2;
        private readonly static ulong TimestampDefaultValue = 0UL;

        private ulong timestamp_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ulong Timestamp {
          get { if ((_hasBits0 & 1) != 0) { return timestamp_; } else { return TimestampDefaultValue; } }
          set {
            _hasBits0 |= 1;
            timestamp_ = value;
          }
        }
        /// <summary>Gets whether the "timestamp" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasTimestamp {
          get { return (_hasBits0 & 1) != 0; }
        }
        /// <summary>Clears the value of the "timestamp" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearTimestamp() {
          _hasBits0 &= ~1;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Read);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Read other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Sender != other.Sender) return false;
          if (SenderUuid != other.SenderUuid) return false;
          if (Timestamp != other.Timestamp) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (HasSender) hash ^= Sender.GetHashCode();
          if (HasSenderUuid) hash ^= SenderUuid.GetHashCode();
          if (HasTimestamp) hash ^= Timestamp.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (HasSender) {
            output.WriteRawTag(10);
            output.WriteString(Sender);
          }
          if (HasTimestamp) {
            output.WriteRawTag(16);
            output.WriteUInt64(Timestamp);
          }
          if (HasSenderUuid) {
            output.WriteRawTag(26);
            output.WriteString(SenderUuid);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (HasSender) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Sender);
          }
          if (HasSenderUuid) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(SenderUuid);
          }
          if (HasTimestamp) {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Timestamp);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Read other) {
          if (other == null) {
            return;
          }
          if (other.HasSender) {
            Sender = other.Sender;
          }
          if (other.HasSenderUuid) {
            SenderUuid = other.SenderUuid;
          }
          if (other.HasTimestamp) {
            Timestamp = other.Timestamp;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                Sender = input.ReadString();
                break;
              }
              case 16: {
                Timestamp = input.ReadUInt64();
                break;
              }
              case 26: {
                SenderUuid = input.ReadString();
                break;
              }
            }
          }
        }

      }

      public sealed partial class Configuration : pb::IMessage<Configuration> {
        private static readonly pb::MessageParser<Configuration> _parser = new pb::MessageParser<Configuration>(() => new Configuration());
        private pb::UnknownFieldSet _unknownFields;
        private int _hasBits0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Configuration> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::libsignalservice.push.SyncMessage.Descriptor.NestedTypes[7]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Configuration() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Configuration(Configuration other) : this() {
          _hasBits0 = other._hasBits0;
          readReceipts_ = other.readReceipts_;
          unidentifiedDeliveryIndicators_ = other.unidentifiedDeliveryIndicators_;
          typingIndicators_ = other.typingIndicators_;
          provisioningVersion_ = other.provisioningVersion_;
          linkPreviews_ = other.linkPreviews_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Configuration Clone() {
          return new Configuration(this);
        }

        /// <summary>Field number for the "readReceipts" field.</summary>
        public const int ReadReceiptsFieldNumber = 1;
        private readonly static bool ReadReceiptsDefaultValue = false;

        private bool readReceipts_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool ReadReceipts {
          get { if ((_hasBits0 & 1) != 0) { return readReceipts_; } else { return ReadReceiptsDefaultValue; } }
          set {
            _hasBits0 |= 1;
            readReceipts_ = value;
          }
        }
        /// <summary>Gets whether the "readReceipts" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasReadReceipts {
          get { return (_hasBits0 & 1) != 0; }
        }
        /// <summary>Clears the value of the "readReceipts" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearReadReceipts() {
          _hasBits0 &= ~1;
        }

        /// <summary>Field number for the "unidentifiedDeliveryIndicators" field.</summary>
        public const int UnidentifiedDeliveryIndicatorsFieldNumber = 2;
        private readonly static bool UnidentifiedDeliveryIndicatorsDefaultValue = false;

        private bool unidentifiedDeliveryIndicators_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool UnidentifiedDeliveryIndicators {
          get { if ((_hasBits0 & 2) != 0) { return unidentifiedDeliveryIndicators_; } else { return UnidentifiedDeliveryIndicatorsDefaultValue; } }
          set {
            _hasBits0 |= 2;
            unidentifiedDeliveryIndicators_ = value;
          }
        }
        /// <summary>Gets whether the "unidentifiedDeliveryIndicators" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasUnidentifiedDeliveryIndicators {
          get { return (_hasBits0 & 2) != 0; }
        }
        /// <summary>Clears the value of the "unidentifiedDeliveryIndicators" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearUnidentifiedDeliveryIndicators() {
          _hasBits0 &= ~2;
        }

        /// <summary>Field number for the "typingIndicators" field.</summary>
        public const int TypingIndicatorsFieldNumber = 3;
        private readonly static bool TypingIndicatorsDefaultValue = false;

        private bool typingIndicators_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool TypingIndicators {
          get { if ((_hasBits0 & 4) != 0) { return typingIndicators_; } else { return TypingIndicatorsDefaultValue; } }
          set {
            _hasBits0 |= 4;
            typingIndicators_ = value;
          }
        }
        /// <summary>Gets whether the "typingIndicators" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasTypingIndicators {
          get { return (_hasBits0 & 4) != 0; }
        }
        /// <summary>Clears the value of the "typingIndicators" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearTypingIndicators() {
          _hasBits0 &= ~4;
        }

        /// <summary>Field number for the "provisioningVersion" field.</summary>
        public const int ProvisioningVersionFieldNumber = 5;
        private readonly static uint ProvisioningVersionDefaultValue = 0;

        private uint provisioningVersion_;
        /// <summary>
        /// 4 is reserved
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint ProvisioningVersion {
          get { if ((_hasBits0 & 8) != 0) { return provisioningVersion_; } else { return ProvisioningVersionDefaultValue; } }
          set {
            _hasBits0 |= 8;
            provisioningVersion_ = value;
          }
        }
        /// <summary>Gets whether the "provisioningVersion" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasProvisioningVersion {
          get { return (_hasBits0 & 8) != 0; }
        }
        /// <summary>Clears the value of the "provisioningVersion" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearProvisioningVersion() {
          _hasBits0 &= ~8;
        }

        /// <summary>Field number for the "linkPreviews" field.</summary>
        public const int LinkPreviewsFieldNumber = 6;
        private readonly static bool LinkPreviewsDefaultValue = false;

        private bool linkPreviews_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool LinkPreviews {
          get { if ((_hasBits0 & 16) != 0) { return linkPreviews_; } else { return LinkPreviewsDefaultValue; } }
          set {
            _hasBits0 |= 16;
            linkPreviews_ = value;
          }
        }
        /// <summary>Gets whether the "linkPreviews" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasLinkPreviews {
          get { return (_hasBits0 & 16) != 0; }
        }
        /// <summary>Clears the value of the "linkPreviews" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearLinkPreviews() {
          _hasBits0 &= ~16;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Configuration);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Configuration other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (ReadReceipts != other.ReadReceipts) return false;
          if (UnidentifiedDeliveryIndicators != other.UnidentifiedDeliveryIndicators) return false;
          if (TypingIndicators != other.TypingIndicators) return false;
          if (ProvisioningVersion != other.ProvisioningVersion) return false;
          if (LinkPreviews != other.LinkPreviews) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (HasReadReceipts) hash ^= ReadReceipts.GetHashCode();
          if (HasUnidentifiedDeliveryIndicators) hash ^= UnidentifiedDeliveryIndicators.GetHashCode();
          if (HasTypingIndicators) hash ^= TypingIndicators.GetHashCode();
          if (HasProvisioningVersion) hash ^= ProvisioningVersion.GetHashCode();
          if (HasLinkPreviews) hash ^= LinkPreviews.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (HasReadReceipts) {
            output.WriteRawTag(8);
            output.WriteBool(ReadReceipts);
          }
          if (HasUnidentifiedDeliveryIndicators) {
            output.WriteRawTag(16);
            output.WriteBool(UnidentifiedDeliveryIndicators);
          }
          if (HasTypingIndicators) {
            output.WriteRawTag(24);
            output.WriteBool(TypingIndicators);
          }
          if (HasProvisioningVersion) {
            output.WriteRawTag(40);
            output.WriteUInt32(ProvisioningVersion);
          }
          if (HasLinkPreviews) {
            output.WriteRawTag(48);
            output.WriteBool(LinkPreviews);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (HasReadReceipts) {
            size += 1 + 1;
          }
          if (HasUnidentifiedDeliveryIndicators) {
            size += 1 + 1;
          }
          if (HasTypingIndicators) {
            size += 1 + 1;
          }
          if (HasProvisioningVersion) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ProvisioningVersion);
          }
          if (HasLinkPreviews) {
            size += 1 + 1;
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Configuration other) {
          if (other == null) {
            return;
          }
          if (other.HasReadReceipts) {
            ReadReceipts = other.ReadReceipts;
          }
          if (other.HasUnidentifiedDeliveryIndicators) {
            UnidentifiedDeliveryIndicators = other.UnidentifiedDeliveryIndicators;
          }
          if (other.HasTypingIndicators) {
            TypingIndicators = other.TypingIndicators;
          }
          if (other.HasProvisioningVersion) {
            ProvisioningVersion = other.ProvisioningVersion;
          }
          if (other.HasLinkPreviews) {
            LinkPreviews = other.LinkPreviews;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                ReadReceipts = input.ReadBool();
                break;
              }
              case 16: {
                UnidentifiedDeliveryIndicators = input.ReadBool();
                break;
              }
              case 24: {
                TypingIndicators = input.ReadBool();
                break;
              }
              case 40: {
                ProvisioningVersion = input.ReadUInt32();
                break;
              }
              case 48: {
                LinkPreviews = input.ReadBool();
                break;
              }
            }
          }
        }

      }

      public sealed partial class StickerPackOperation : pb::IMessage<StickerPackOperation> {
        private static readonly pb::MessageParser<StickerPackOperation> _parser = new pb::MessageParser<StickerPackOperation>(() => new StickerPackOperation());
        private pb::UnknownFieldSet _unknownFields;
        private int _hasBits0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<StickerPackOperation> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::libsignalservice.push.SyncMessage.Descriptor.NestedTypes[8]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public StickerPackOperation() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public StickerPackOperation(StickerPackOperation other) : this() {
          _hasBits0 = other._hasBits0;
          packId_ = other.packId_;
          packKey_ = other.packKey_;
          type_ = other.type_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public StickerPackOperation Clone() {
          return new StickerPackOperation(this);
        }

        /// <summary>Field number for the "packId" field.</summary>
        public const int PackIdFieldNumber = 1;
        private readonly static pb::ByteString PackIdDefaultValue = pb::ByteString.Empty;

        private pb::ByteString packId_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pb::ByteString PackId {
          get { return packId_ ?? PackIdDefaultValue; }
          set {
            packId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }
        /// <summary>Gets whether the "packId" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasPackId {
          get { return packId_ != null; }
        }
        /// <summary>Clears the value of the "packId" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearPackId() {
          packId_ = null;
        }

        /// <summary>Field number for the "packKey" field.</summary>
        public const int PackKeyFieldNumber = 2;
        private readonly static pb::ByteString PackKeyDefaultValue = pb::ByteString.Empty;

        private pb::ByteString packKey_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pb::ByteString PackKey {
          get { return packKey_ ?? PackKeyDefaultValue; }
          set {
            packKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }
        /// <summary>Gets whether the "packKey" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasPackKey {
          get { return packKey_ != null; }
        }
        /// <summary>Clears the value of the "packKey" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearPackKey() {
          packKey_ = null;
        }

        /// <summary>Field number for the "type" field.</summary>
        public const int TypeFieldNumber = 3;
        private readonly static global::libsignalservice.push.SyncMessage.Types.StickerPackOperation.Types.Type TypeDefaultValue = global::libsignalservice.push.SyncMessage.Types.StickerPackOperation.Types.Type.Install;

        private global::libsignalservice.push.SyncMessage.Types.StickerPackOperation.Types.Type type_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::libsignalservice.push.SyncMessage.Types.StickerPackOperation.Types.Type Type {
          get { if ((_hasBits0 & 1) != 0) { return type_; } else { return TypeDefaultValue; } }
          set {
            _hasBits0 |= 1;
            type_ = value;
          }
        }
        /// <summary>Gets whether the "type" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasType {
          get { return (_hasBits0 & 1) != 0; }
        }
        /// <summary>Clears the value of the "type" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearType() {
          _hasBits0 &= ~1;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as StickerPackOperation);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(StickerPackOperation other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (PackId != other.PackId) return false;
          if (PackKey != other.PackKey) return false;
          if (Type != other.Type) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (HasPackId) hash ^= PackId.GetHashCode();
          if (HasPackKey) hash ^= PackKey.GetHashCode();
          if (HasType) hash ^= Type.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (HasPackId) {
            output.WriteRawTag(10);
            output.WriteBytes(PackId);
          }
          if (HasPackKey) {
            output.WriteRawTag(18);
            output.WriteBytes(PackKey);
          }
          if (HasType) {
            output.WriteRawTag(24);
            output.WriteEnum((int) Type);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (HasPackId) {
            size += 1 + pb::CodedOutputStream.ComputeBytesSize(PackId);
          }
          if (HasPackKey) {
            size += 1 + pb::CodedOutputStream.ComputeBytesSize(PackKey);
          }
          if (HasType) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(StickerPackOperation other) {
          if (other == null) {
            return;
          }
          if (other.HasPackId) {
            PackId = other.PackId;
          }
          if (other.HasPackKey) {
            PackKey = other.PackKey;
          }
          if (other.HasType) {
            Type = other.Type;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                PackId = input.ReadBytes();
                break;
              }
              case 18: {
                PackKey = input.ReadBytes();
                break;
              }
              case 24: {
                Type = (global::libsignalservice.push.SyncMessage.Types.StickerPackOperation.Types.Type) input.ReadEnum();
                break;
              }
            }
          }
        }

        #region Nested types
        /// <summary>Container for nested types declared in the StickerPackOperation message type.</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static partial class Types {
          public enum Type {
            [pbr::OriginalName("INSTALL")] Install = 0,
            [pbr::OriginalName("REMOVE")] Remove = 1,
          }

        }
        #endregion

      }

      public sealed partial class ViewOnceOpen : pb::IMessage<ViewOnceOpen> {
        private static readonly pb::MessageParser<ViewOnceOpen> _parser = new pb::MessageParser<ViewOnceOpen>(() => new ViewOnceOpen());
        private pb::UnknownFieldSet _unknownFields;
        private int _hasBits0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<ViewOnceOpen> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::libsignalservice.push.SyncMessage.Descriptor.NestedTypes[9]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ViewOnceOpen() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ViewOnceOpen(ViewOnceOpen other) : this() {
          _hasBits0 = other._hasBits0;
          sender_ = other.sender_;
          senderUuid_ = other.senderUuid_;
          timestamp_ = other.timestamp_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ViewOnceOpen Clone() {
          return new ViewOnceOpen(this);
        }

        /// <summary>Field number for the "sender" field.</summary>
        public const int SenderFieldNumber = 1;
        private readonly static string SenderDefaultValue = "";

        private string sender_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Sender {
          get { return sender_ ?? SenderDefaultValue; }
          set {
            sender_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }
        /// <summary>Gets whether the "sender" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasSender {
          get { return sender_ != null; }
        }
        /// <summary>Clears the value of the "sender" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearSender() {
          sender_ = null;
        }

        /// <summary>Field number for the "senderUuid" field.</summary>
        public const int SenderUuidFieldNumber = 3;
        private readonly static string SenderUuidDefaultValue = "";

        private string senderUuid_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string SenderUuid {
          get { return senderUuid_ ?? SenderUuidDefaultValue; }
          set {
            senderUuid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }
        /// <summary>Gets whether the "senderUuid" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasSenderUuid {
          get { return senderUuid_ != null; }
        }
        /// <summary>Clears the value of the "senderUuid" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearSenderUuid() {
          senderUuid_ = null;
        }

        /// <summary>Field number for the "timestamp" field.</summary>
        public const int TimestampFieldNumber = 2;
        private readonly static ulong TimestampDefaultValue = 0UL;

        private ulong timestamp_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ulong Timestamp {
          get { if ((_hasBits0 & 1) != 0) { return timestamp_; } else { return TimestampDefaultValue; } }
          set {
            _hasBits0 |= 1;
            timestamp_ = value;
          }
        }
        /// <summary>Gets whether the "timestamp" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasTimestamp {
          get { return (_hasBits0 & 1) != 0; }
        }
        /// <summary>Clears the value of the "timestamp" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearTimestamp() {
          _hasBits0 &= ~1;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as ViewOnceOpen);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(ViewOnceOpen other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Sender != other.Sender) return false;
          if (SenderUuid != other.SenderUuid) return false;
          if (Timestamp != other.Timestamp) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (HasSender) hash ^= Sender.GetHashCode();
          if (HasSenderUuid) hash ^= SenderUuid.GetHashCode();
          if (HasTimestamp) hash ^= Timestamp.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (HasSender) {
            output.WriteRawTag(10);
            output.WriteString(Sender);
          }
          if (HasTimestamp) {
            output.WriteRawTag(16);
            output.WriteUInt64(Timestamp);
          }
          if (HasSenderUuid) {
            output.WriteRawTag(26);
            output.WriteString(SenderUuid);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (HasSender) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Sender);
          }
          if (HasSenderUuid) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(SenderUuid);
          }
          if (HasTimestamp) {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Timestamp);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(ViewOnceOpen other) {
          if (other == null) {
            return;
          }
          if (other.HasSender) {
            Sender = other.Sender;
          }
          if (other.HasSenderUuid) {
            SenderUuid = other.SenderUuid;
          }
          if (other.HasTimestamp) {
            Timestamp = other.Timestamp;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                Sender = input.ReadString();
                break;
              }
              case 16: {
                Timestamp = input.ReadUInt64();
                break;
              }
              case 26: {
                SenderUuid = input.ReadString();
                break;
              }
            }
          }
        }

      }

      public sealed partial class MessageRequestResponse : pb::IMessage<MessageRequestResponse> {
        private static readonly pb::MessageParser<MessageRequestResponse> _parser = new pb::MessageParser<MessageRequestResponse>(() => new MessageRequestResponse());
        private pb::UnknownFieldSet _unknownFields;
        private int _hasBits0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<MessageRequestResponse> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::libsignalservice.push.SyncMessage.Descriptor.NestedTypes[10]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public MessageRequestResponse() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public MessageRequestResponse(MessageRequestResponse other) : this() {
          _hasBits0 = other._hasBits0;
          threadE164_ = other.threadE164_;
          threadUuid_ = other.threadUuid_;
          groupId_ = other.groupId_;
          type_ = other.type_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public MessageRequestResponse Clone() {
          return new MessageRequestResponse(this);
        }

        /// <summary>Field number for the "threadE164" field.</summary>
        public const int ThreadE164FieldNumber = 1;
        private readonly static string ThreadE164DefaultValue = "";

        private string threadE164_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string ThreadE164 {
          get { return threadE164_ ?? ThreadE164DefaultValue; }
          set {
            threadE164_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }
        /// <summary>Gets whether the "threadE164" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasThreadE164 {
          get { return threadE164_ != null; }
        }
        /// <summary>Clears the value of the "threadE164" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearThreadE164() {
          threadE164_ = null;
        }

        /// <summary>Field number for the "threadUuid" field.</summary>
        public const int ThreadUuidFieldNumber = 2;
        private readonly static string ThreadUuidDefaultValue = "";

        private string threadUuid_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string ThreadUuid {
          get { return threadUuid_ ?? ThreadUuidDefaultValue; }
          set {
            threadUuid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }
        /// <summary>Gets whether the "threadUuid" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasThreadUuid {
          get { return threadUuid_ != null; }
        }
        /// <summary>Clears the value of the "threadUuid" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearThreadUuid() {
          threadUuid_ = null;
        }

        /// <summary>Field number for the "groupId" field.</summary>
        public const int GroupIdFieldNumber = 3;
        private readonly static pb::ByteString GroupIdDefaultValue = pb::ByteString.Empty;

        private pb::ByteString groupId_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pb::ByteString GroupId {
          get { return groupId_ ?? GroupIdDefaultValue; }
          set {
            groupId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }
        /// <summary>Gets whether the "groupId" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasGroupId {
          get { return groupId_ != null; }
        }
        /// <summary>Clears the value of the "groupId" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearGroupId() {
          groupId_ = null;
        }

        /// <summary>Field number for the "type" field.</summary>
        public const int TypeFieldNumber = 4;
        private readonly static global::libsignalservice.push.SyncMessage.Types.MessageRequestResponse.Types.Type TypeDefaultValue = global::libsignalservice.push.SyncMessage.Types.MessageRequestResponse.Types.Type.Unknown;

        private global::libsignalservice.push.SyncMessage.Types.MessageRequestResponse.Types.Type type_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::libsignalservice.push.SyncMessage.Types.MessageRequestResponse.Types.Type Type {
          get { if ((_hasBits0 & 1) != 0) { return type_; } else { return TypeDefaultValue; } }
          set {
            _hasBits0 |= 1;
            type_ = value;
          }
        }
        /// <summary>Gets whether the "type" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasType {
          get { return (_hasBits0 & 1) != 0; }
        }
        /// <summary>Clears the value of the "type" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearType() {
          _hasBits0 &= ~1;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as MessageRequestResponse);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(MessageRequestResponse other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (ThreadE164 != other.ThreadE164) return false;
          if (ThreadUuid != other.ThreadUuid) return false;
          if (GroupId != other.GroupId) return false;
          if (Type != other.Type) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (HasThreadE164) hash ^= ThreadE164.GetHashCode();
          if (HasThreadUuid) hash ^= ThreadUuid.GetHashCode();
          if (HasGroupId) hash ^= GroupId.GetHashCode();
          if (HasType) hash ^= Type.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (HasThreadE164) {
            output.WriteRawTag(10);
            output.WriteString(ThreadE164);
          }
          if (HasThreadUuid) {
            output.WriteRawTag(18);
            output.WriteString(ThreadUuid);
          }
          if (HasGroupId) {
            output.WriteRawTag(26);
            output.WriteBytes(GroupId);
          }
          if (HasType) {
            output.WriteRawTag(32);
            output.WriteEnum((int) Type);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (HasThreadE164) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(ThreadE164);
          }
          if (HasThreadUuid) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(ThreadUuid);
          }
          if (HasGroupId) {
            size += 1 + pb::CodedOutputStream.ComputeBytesSize(GroupId);
          }
          if (HasType) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(MessageRequestResponse other) {
          if (other == null) {
            return;
          }
          if (other.HasThreadE164) {
            ThreadE164 = other.ThreadE164;
          }
          if (other.HasThreadUuid) {
            ThreadUuid = other.ThreadUuid;
          }
          if (other.HasGroupId) {
            GroupId = other.GroupId;
          }
          if (other.HasType) {
            Type = other.Type;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                ThreadE164 = input.ReadString();
                break;
              }
              case 18: {
                ThreadUuid = input.ReadString();
                break;
              }
              case 26: {
                GroupId = input.ReadBytes();
                break;
              }
              case 32: {
                Type = (global::libsignalservice.push.SyncMessage.Types.MessageRequestResponse.Types.Type) input.ReadEnum();
                break;
              }
            }
          }
        }

        #region Nested types
        /// <summary>Container for nested types declared in the MessageRequestResponse message type.</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static partial class Types {
          public enum Type {
            [pbr::OriginalName("UNKNOWN")] Unknown = 0,
            [pbr::OriginalName("ACCEPT")] Accept = 1,
            [pbr::OriginalName("DELETE")] Delete = 2,
            [pbr::OriginalName("BLOCK")] Block = 3,
            [pbr::OriginalName("BLOCK_AND_DELETE")] BlockAndDelete = 4,
          }

        }
        #endregion

      }

      public sealed partial class FetchLatest : pb::IMessage<FetchLatest> {
        private static readonly pb::MessageParser<FetchLatest> _parser = new pb::MessageParser<FetchLatest>(() => new FetchLatest());
        private pb::UnknownFieldSet _unknownFields;
        private int _hasBits0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<FetchLatest> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::libsignalservice.push.SyncMessage.Descriptor.NestedTypes[11]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public FetchLatest() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public FetchLatest(FetchLatest other) : this() {
          _hasBits0 = other._hasBits0;
          type_ = other.type_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public FetchLatest Clone() {
          return new FetchLatest(this);
        }

        /// <summary>Field number for the "type" field.</summary>
        public const int TypeFieldNumber = 1;
        private readonly static global::libsignalservice.push.SyncMessage.Types.FetchLatest.Types.Type TypeDefaultValue = global::libsignalservice.push.SyncMessage.Types.FetchLatest.Types.Type.Unknown;

        private global::libsignalservice.push.SyncMessage.Types.FetchLatest.Types.Type type_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::libsignalservice.push.SyncMessage.Types.FetchLatest.Types.Type Type {
          get { if ((_hasBits0 & 1) != 0) { return type_; } else { return TypeDefaultValue; } }
          set {
            _hasBits0 |= 1;
            type_ = value;
          }
        }
        /// <summary>Gets whether the "type" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasType {
          get { return (_hasBits0 & 1) != 0; }
        }
        /// <summary>Clears the value of the "type" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearType() {
          _hasBits0 &= ~1;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as FetchLatest);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(FetchLatest other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Type != other.Type) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (HasType) hash ^= Type.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (HasType) {
            output.WriteRawTag(8);
            output.WriteEnum((int) Type);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (HasType) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(FetchLatest other) {
          if (other == null) {
            return;
          }
          if (other.HasType) {
            Type = other.Type;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                Type = (global::libsignalservice.push.SyncMessage.Types.FetchLatest.Types.Type) input.ReadEnum();
                break;
              }
            }
          }
        }

        #region Nested types
        /// <summary>Container for nested types declared in the FetchLatest message type.</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static partial class Types {
          public enum Type {
            [pbr::OriginalName("UNKNOWN")] Unknown = 0,
            [pbr::OriginalName("LOCAL_PROFILE")] LocalProfile = 1,
            [pbr::OriginalName("STORAGE_MANIFEST")] StorageManifest = 2,
          }

        }
        #endregion

      }

    }
    #endregion

  }

  public sealed partial class AttachmentPointer : pb::IMessage<AttachmentPointer> {
    private static readonly pb::MessageParser<AttachmentPointer> _parser = new pb::MessageParser<AttachmentPointer>(() => new AttachmentPointer());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AttachmentPointer> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::libsignalservice.push.SignalServiceReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AttachmentPointer() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AttachmentPointer(AttachmentPointer other) : this() {
      _hasBits0 = other._hasBits0;
      contentType_ = other.contentType_;
      key_ = other.key_;
      size_ = other.size_;
      thumbnail_ = other.thumbnail_;
      digest_ = other.digest_;
      fileName_ = other.fileName_;
      flags_ = other.flags_;
      width_ = other.width_;
      height_ = other.height_;
      caption_ = other.caption_;
      blurHash_ = other.blurHash_;
      uploadTimestamp_ = other.uploadTimestamp_;
      cdnNumber_ = other.cdnNumber_;
      switch (other.AttachmentIdentifierCase) {
        case AttachmentIdentifierOneofCase.CdnId:
          CdnId = other.CdnId;
          break;
        case AttachmentIdentifierOneofCase.CdnKey:
          CdnKey = other.CdnKey;
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AttachmentPointer Clone() {
      return new AttachmentPointer(this);
    }

    /// <summary>Field number for the "cdnId" field.</summary>
    public const int CdnIdFieldNumber = 1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong CdnId {
      get { return HasCdnId ? (ulong) attachmentIdentifier_ : 0UL; }
      set {
        attachmentIdentifier_ = value;
        attachmentIdentifierCase_ = AttachmentIdentifierOneofCase.CdnId;
      }
    }
    /// <summary>Gets whether the "cdnId" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasCdnId {
      get { return attachmentIdentifierCase_ == AttachmentIdentifierOneofCase.CdnId; }
    }
    /// <summary> Clears the value of the oneof if it's currently set to "cdnId" </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCdnId() {
      if (HasCdnId) {
        ClearAttachmentIdentifier();
      }
    }

    /// <summary>Field number for the "cdnKey" field.</summary>
    public const int CdnKeyFieldNumber = 15;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CdnKey {
      get { return HasCdnKey ? (string) attachmentIdentifier_ : ""; }
      set {
        attachmentIdentifier_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        attachmentIdentifierCase_ = AttachmentIdentifierOneofCase.CdnKey;
      }
    }
    /// <summary>Gets whether the "cdnKey" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasCdnKey {
      get { return attachmentIdentifierCase_ == AttachmentIdentifierOneofCase.CdnKey; }
    }
    /// <summary> Clears the value of the oneof if it's currently set to "cdnKey" </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCdnKey() {
      if (HasCdnKey) {
        ClearAttachmentIdentifier();
      }
    }

    /// <summary>Field number for the "contentType" field.</summary>
    public const int ContentTypeFieldNumber = 2;
    private readonly static string ContentTypeDefaultValue = "";

    private string contentType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ContentType {
      get { return contentType_ ?? ContentTypeDefaultValue; }
      set {
        contentType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "contentType" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasContentType {
      get { return contentType_ != null; }
    }
    /// <summary>Clears the value of the "contentType" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearContentType() {
      contentType_ = null;
    }

    /// <summary>Field number for the "key" field.</summary>
    public const int KeyFieldNumber = 3;
    private readonly static pb::ByteString KeyDefaultValue = pb::ByteString.Empty;

    private pb::ByteString key_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Key {
      get { return key_ ?? KeyDefaultValue; }
      set {
        key_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "key" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasKey {
      get { return key_ != null; }
    }
    /// <summary>Clears the value of the "key" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearKey() {
      key_ = null;
    }

    /// <summary>Field number for the "size" field.</summary>
    public const int SizeFieldNumber = 4;
    private readonly static uint SizeDefaultValue = 0;

    private uint size_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Size {
      get { if ((_hasBits0 & 1) != 0) { return size_; } else { return SizeDefaultValue; } }
      set {
        _hasBits0 |= 1;
        size_ = value;
      }
    }
    /// <summary>Gets whether the "size" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasSize {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "size" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSize() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "thumbnail" field.</summary>
    public const int ThumbnailFieldNumber = 5;
    private readonly static pb::ByteString ThumbnailDefaultValue = pb::ByteString.Empty;

    private pb::ByteString thumbnail_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Thumbnail {
      get { return thumbnail_ ?? ThumbnailDefaultValue; }
      set {
        thumbnail_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "thumbnail" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasThumbnail {
      get { return thumbnail_ != null; }
    }
    /// <summary>Clears the value of the "thumbnail" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearThumbnail() {
      thumbnail_ = null;
    }

    /// <summary>Field number for the "digest" field.</summary>
    public const int DigestFieldNumber = 6;
    private readonly static pb::ByteString DigestDefaultValue = pb::ByteString.Empty;

    private pb::ByteString digest_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Digest {
      get { return digest_ ?? DigestDefaultValue; }
      set {
        digest_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "digest" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasDigest {
      get { return digest_ != null; }
    }
    /// <summary>Clears the value of the "digest" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearDigest() {
      digest_ = null;
    }

    /// <summary>Field number for the "fileName" field.</summary>
    public const int FileNameFieldNumber = 7;
    private readonly static string FileNameDefaultValue = "";

    private string fileName_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FileName {
      get { return fileName_ ?? FileNameDefaultValue; }
      set {
        fileName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "fileName" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasFileName {
      get { return fileName_ != null; }
    }
    /// <summary>Clears the value of the "fileName" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearFileName() {
      fileName_ = null;
    }

    /// <summary>Field number for the "flags" field.</summary>
    public const int FlagsFieldNumber = 8;
    private readonly static uint FlagsDefaultValue = 0;

    private uint flags_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Flags {
      get { if ((_hasBits0 & 2) != 0) { return flags_; } else { return FlagsDefaultValue; } }
      set {
        _hasBits0 |= 2;
        flags_ = value;
      }
    }
    /// <summary>Gets whether the "flags" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasFlags {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "flags" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearFlags() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "width" field.</summary>
    public const int WidthFieldNumber = 9;
    private readonly static uint WidthDefaultValue = 0;

    private uint width_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Width {
      get { if ((_hasBits0 & 4) != 0) { return width_; } else { return WidthDefaultValue; } }
      set {
        _hasBits0 |= 4;
        width_ = value;
      }
    }
    /// <summary>Gets whether the "width" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasWidth {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "width" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearWidth() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "height" field.</summary>
    public const int HeightFieldNumber = 10;
    private readonly static uint HeightDefaultValue = 0;

    private uint height_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Height {
      get { if ((_hasBits0 & 8) != 0) { return height_; } else { return HeightDefaultValue; } }
      set {
        _hasBits0 |= 8;
        height_ = value;
      }
    }
    /// <summary>Gets whether the "height" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasHeight {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "height" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearHeight() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "caption" field.</summary>
    public const int CaptionFieldNumber = 11;
    private readonly static string CaptionDefaultValue = "";

    private string caption_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Caption {
      get { return caption_ ?? CaptionDefaultValue; }
      set {
        caption_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "caption" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasCaption {
      get { return caption_ != null; }
    }
    /// <summary>Clears the value of the "caption" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCaption() {
      caption_ = null;
    }

    /// <summary>Field number for the "blurHash" field.</summary>
    public const int BlurHashFieldNumber = 12;
    private readonly static string BlurHashDefaultValue = "";

    private string blurHash_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string BlurHash {
      get { return blurHash_ ?? BlurHashDefaultValue; }
      set {
        blurHash_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "blurHash" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasBlurHash {
      get { return blurHash_ != null; }
    }
    /// <summary>Clears the value of the "blurHash" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearBlurHash() {
      blurHash_ = null;
    }

    /// <summary>Field number for the "uploadTimestamp" field.</summary>
    public const int UploadTimestampFieldNumber = 13;
    private readonly static ulong UploadTimestampDefaultValue = 0UL;

    private ulong uploadTimestamp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong UploadTimestamp {
      get { if ((_hasBits0 & 16) != 0) { return uploadTimestamp_; } else { return UploadTimestampDefaultValue; } }
      set {
        _hasBits0 |= 16;
        uploadTimestamp_ = value;
      }
    }
    /// <summary>Gets whether the "uploadTimestamp" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasUploadTimestamp {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "uploadTimestamp" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearUploadTimestamp() {
      _hasBits0 &= ~16;
    }

    /// <summary>Field number for the "cdnNumber" field.</summary>
    public const int CdnNumberFieldNumber = 14;
    private readonly static uint CdnNumberDefaultValue = 0;

    private uint cdnNumber_;
    /// <summary>
    /// Next ID: 16
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint CdnNumber {
      get { if ((_hasBits0 & 32) != 0) { return cdnNumber_; } else { return CdnNumberDefaultValue; } }
      set {
        _hasBits0 |= 32;
        cdnNumber_ = value;
      }
    }
    /// <summary>Gets whether the "cdnNumber" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasCdnNumber {
      get { return (_hasBits0 & 32) != 0; }
    }
    /// <summary>Clears the value of the "cdnNumber" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCdnNumber() {
      _hasBits0 &= ~32;
    }

    private object attachmentIdentifier_;
    /// <summary>Enum of possible cases for the "attachment_identifier" oneof.</summary>
    public enum AttachmentIdentifierOneofCase {
      None = 0,
      CdnId = 1,
      CdnKey = 15,
    }
    private AttachmentIdentifierOneofCase attachmentIdentifierCase_ = AttachmentIdentifierOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AttachmentIdentifierOneofCase AttachmentIdentifierCase {
      get { return attachmentIdentifierCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearAttachmentIdentifier() {
      attachmentIdentifierCase_ = AttachmentIdentifierOneofCase.None;
      attachmentIdentifier_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AttachmentPointer);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AttachmentPointer other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CdnId != other.CdnId) return false;
      if (CdnKey != other.CdnKey) return false;
      if (ContentType != other.ContentType) return false;
      if (Key != other.Key) return false;
      if (Size != other.Size) return false;
      if (Thumbnail != other.Thumbnail) return false;
      if (Digest != other.Digest) return false;
      if (FileName != other.FileName) return false;
      if (Flags != other.Flags) return false;
      if (Width != other.Width) return false;
      if (Height != other.Height) return false;
      if (Caption != other.Caption) return false;
      if (BlurHash != other.BlurHash) return false;
      if (UploadTimestamp != other.UploadTimestamp) return false;
      if (CdnNumber != other.CdnNumber) return false;
      if (AttachmentIdentifierCase != other.AttachmentIdentifierCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasCdnId) hash ^= CdnId.GetHashCode();
      if (HasCdnKey) hash ^= CdnKey.GetHashCode();
      if (HasContentType) hash ^= ContentType.GetHashCode();
      if (HasKey) hash ^= Key.GetHashCode();
      if (HasSize) hash ^= Size.GetHashCode();
      if (HasThumbnail) hash ^= Thumbnail.GetHashCode();
      if (HasDigest) hash ^= Digest.GetHashCode();
      if (HasFileName) hash ^= FileName.GetHashCode();
      if (HasFlags) hash ^= Flags.GetHashCode();
      if (HasWidth) hash ^= Width.GetHashCode();
      if (HasHeight) hash ^= Height.GetHashCode();
      if (HasCaption) hash ^= Caption.GetHashCode();
      if (HasBlurHash) hash ^= BlurHash.GetHashCode();
      if (HasUploadTimestamp) hash ^= UploadTimestamp.GetHashCode();
      if (HasCdnNumber) hash ^= CdnNumber.GetHashCode();
      hash ^= (int) attachmentIdentifierCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasCdnId) {
        output.WriteRawTag(9);
        output.WriteFixed64(CdnId);
      }
      if (HasContentType) {
        output.WriteRawTag(18);
        output.WriteString(ContentType);
      }
      if (HasKey) {
        output.WriteRawTag(26);
        output.WriteBytes(Key);
      }
      if (HasSize) {
        output.WriteRawTag(32);
        output.WriteUInt32(Size);
      }
      if (HasThumbnail) {
        output.WriteRawTag(42);
        output.WriteBytes(Thumbnail);
      }
      if (HasDigest) {
        output.WriteRawTag(50);
        output.WriteBytes(Digest);
      }
      if (HasFileName) {
        output.WriteRawTag(58);
        output.WriteString(FileName);
      }
      if (HasFlags) {
        output.WriteRawTag(64);
        output.WriteUInt32(Flags);
      }
      if (HasWidth) {
        output.WriteRawTag(72);
        output.WriteUInt32(Width);
      }
      if (HasHeight) {
        output.WriteRawTag(80);
        output.WriteUInt32(Height);
      }
      if (HasCaption) {
        output.WriteRawTag(90);
        output.WriteString(Caption);
      }
      if (HasBlurHash) {
        output.WriteRawTag(98);
        output.WriteString(BlurHash);
      }
      if (HasUploadTimestamp) {
        output.WriteRawTag(104);
        output.WriteUInt64(UploadTimestamp);
      }
      if (HasCdnNumber) {
        output.WriteRawTag(112);
        output.WriteUInt32(CdnNumber);
      }
      if (HasCdnKey) {
        output.WriteRawTag(122);
        output.WriteString(CdnKey);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasCdnId) {
        size += 1 + 8;
      }
      if (HasCdnKey) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CdnKey);
      }
      if (HasContentType) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ContentType);
      }
      if (HasKey) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Key);
      }
      if (HasSize) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Size);
      }
      if (HasThumbnail) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Thumbnail);
      }
      if (HasDigest) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Digest);
      }
      if (HasFileName) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FileName);
      }
      if (HasFlags) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Flags);
      }
      if (HasWidth) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Width);
      }
      if (HasHeight) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Height);
      }
      if (HasCaption) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Caption);
      }
      if (HasBlurHash) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(BlurHash);
      }
      if (HasUploadTimestamp) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(UploadTimestamp);
      }
      if (HasCdnNumber) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CdnNumber);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AttachmentPointer other) {
      if (other == null) {
        return;
      }
      if (other.HasContentType) {
        ContentType = other.ContentType;
      }
      if (other.HasKey) {
        Key = other.Key;
      }
      if (other.HasSize) {
        Size = other.Size;
      }
      if (other.HasThumbnail) {
        Thumbnail = other.Thumbnail;
      }
      if (other.HasDigest) {
        Digest = other.Digest;
      }
      if (other.HasFileName) {
        FileName = other.FileName;
      }
      if (other.HasFlags) {
        Flags = other.Flags;
      }
      if (other.HasWidth) {
        Width = other.Width;
      }
      if (other.HasHeight) {
        Height = other.Height;
      }
      if (other.HasCaption) {
        Caption = other.Caption;
      }
      if (other.HasBlurHash) {
        BlurHash = other.BlurHash;
      }
      if (other.HasUploadTimestamp) {
        UploadTimestamp = other.UploadTimestamp;
      }
      if (other.HasCdnNumber) {
        CdnNumber = other.CdnNumber;
      }
      switch (other.AttachmentIdentifierCase) {
        case AttachmentIdentifierOneofCase.CdnId:
          CdnId = other.CdnId;
          break;
        case AttachmentIdentifierOneofCase.CdnKey:
          CdnKey = other.CdnKey;
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 9: {
            CdnId = input.ReadFixed64();
            break;
          }
          case 18: {
            ContentType = input.ReadString();
            break;
          }
          case 26: {
            Key = input.ReadBytes();
            break;
          }
          case 32: {
            Size = input.ReadUInt32();
            break;
          }
          case 42: {
            Thumbnail = input.ReadBytes();
            break;
          }
          case 50: {
            Digest = input.ReadBytes();
            break;
          }
          case 58: {
            FileName = input.ReadString();
            break;
          }
          case 64: {
            Flags = input.ReadUInt32();
            break;
          }
          case 72: {
            Width = input.ReadUInt32();
            break;
          }
          case 80: {
            Height = input.ReadUInt32();
            break;
          }
          case 90: {
            Caption = input.ReadString();
            break;
          }
          case 98: {
            BlurHash = input.ReadString();
            break;
          }
          case 104: {
            UploadTimestamp = input.ReadUInt64();
            break;
          }
          case 112: {
            CdnNumber = input.ReadUInt32();
            break;
          }
          case 122: {
            CdnKey = input.ReadString();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the AttachmentPointer message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum Flags {
        [pbr::OriginalName("VOICE_MESSAGE")] VoiceMessage = 1,
        [pbr::OriginalName("BORDERLESS")] Borderless = 2,
        [pbr::OriginalName("GIF")] Gif = 3,
      }

    }
    #endregion

  }

  public sealed partial class GroupContext : pb::IMessage<GroupContext> {
    private static readonly pb::MessageParser<GroupContext> _parser = new pb::MessageParser<GroupContext>(() => new GroupContext());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GroupContext> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::libsignalservice.push.SignalServiceReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GroupContext() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GroupContext(GroupContext other) : this() {
      _hasBits0 = other._hasBits0;
      id_ = other.id_;
      type_ = other.type_;
      name_ = other.name_;
      membersE164_ = other.membersE164_.Clone();
      avatar_ = other.avatar_ != null ? other.avatar_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GroupContext Clone() {
      return new GroupContext(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private readonly static pb::ByteString IdDefaultValue = pb::ByteString.Empty;

    private pb::ByteString id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Id {
      get { return id_ ?? IdDefaultValue; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasId {
      get { return id_ != null; }
    }
    /// <summary>Clears the value of the "id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearId() {
      id_ = null;
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 2;
    private readonly static global::libsignalservice.push.GroupContext.Types.Type TypeDefaultValue = global::libsignalservice.push.GroupContext.Types.Type.Unknown;

    private global::libsignalservice.push.GroupContext.Types.Type type_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::libsignalservice.push.GroupContext.Types.Type Type {
      get { if ((_hasBits0 & 1) != 0) { return type_; } else { return TypeDefaultValue; } }
      set {
        _hasBits0 |= 1;
        type_ = value;
      }
    }
    /// <summary>Gets whether the "type" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasType {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "type" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearType() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 3;
    private readonly static string NameDefaultValue = "";

    private string name_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_ ?? NameDefaultValue; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "name" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasName {
      get { return name_ != null; }
    }
    /// <summary>Clears the value of the "name" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearName() {
      name_ = null;
    }

    /// <summary>Field number for the "membersE164" field.</summary>
    public const int MembersE164FieldNumber = 4;
    private static readonly pb::FieldCodec<string> _repeated_membersE164_codec
        = pb::FieldCodec.ForString(34);
    private readonly pbc::RepeatedField<string> membersE164_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> MembersE164 {
      get { return membersE164_; }
    }

    /// <summary>Field number for the "avatar" field.</summary>
    public const int AvatarFieldNumber = 5;
    private global::libsignalservice.push.AttachmentPointer avatar_;
    /// <summary>
    /// field 6 was removed; do not use
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::libsignalservice.push.AttachmentPointer Avatar {
      get { return avatar_; }
      set {
        avatar_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GroupContext);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GroupContext other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Type != other.Type) return false;
      if (Name != other.Name) return false;
      if(!membersE164_.Equals(other.membersE164_)) return false;
      if (!object.Equals(Avatar, other.Avatar)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasId) hash ^= Id.GetHashCode();
      if (HasType) hash ^= Type.GetHashCode();
      if (HasName) hash ^= Name.GetHashCode();
      hash ^= membersE164_.GetHashCode();
      if (avatar_ != null) hash ^= Avatar.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasId) {
        output.WriteRawTag(10);
        output.WriteBytes(Id);
      }
      if (HasType) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Type);
      }
      if (HasName) {
        output.WriteRawTag(26);
        output.WriteString(Name);
      }
      membersE164_.WriteTo(output, _repeated_membersE164_codec);
      if (avatar_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Avatar);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasId) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Id);
      }
      if (HasType) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (HasName) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      size += membersE164_.CalculateSize(_repeated_membersE164_codec);
      if (avatar_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Avatar);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GroupContext other) {
      if (other == null) {
        return;
      }
      if (other.HasId) {
        Id = other.Id;
      }
      if (other.HasType) {
        Type = other.Type;
      }
      if (other.HasName) {
        Name = other.Name;
      }
      membersE164_.Add(other.membersE164_);
      if (other.avatar_ != null) {
        if (avatar_ == null) {
          Avatar = new global::libsignalservice.push.AttachmentPointer();
        }
        Avatar.MergeFrom(other.Avatar);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Id = input.ReadBytes();
            break;
          }
          case 16: {
            Type = (global::libsignalservice.push.GroupContext.Types.Type) input.ReadEnum();
            break;
          }
          case 26: {
            Name = input.ReadString();
            break;
          }
          case 34: {
            membersE164_.AddEntriesFrom(input, _repeated_membersE164_codec);
            break;
          }
          case 42: {
            if (avatar_ == null) {
              Avatar = new global::libsignalservice.push.AttachmentPointer();
            }
            input.ReadMessage(Avatar);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the GroupContext message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum Type {
        [pbr::OriginalName("UNKNOWN")] Unknown = 0,
        [pbr::OriginalName("UPDATE")] Update = 1,
        [pbr::OriginalName("DELIVER")] Deliver = 2,
        [pbr::OriginalName("QUIT")] Quit = 3,
        [pbr::OriginalName("REQUEST_INFO")] RequestInfo = 4,
      }

    }
    #endregion

  }

  public sealed partial class GroupContextV2 : pb::IMessage<GroupContextV2> {
    private static readonly pb::MessageParser<GroupContextV2> _parser = new pb::MessageParser<GroupContextV2>(() => new GroupContextV2());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GroupContextV2> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::libsignalservice.push.SignalServiceReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GroupContextV2() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GroupContextV2(GroupContextV2 other) : this() {
      _hasBits0 = other._hasBits0;
      masterKey_ = other.masterKey_;
      revision_ = other.revision_;
      groupChange_ = other.groupChange_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GroupContextV2 Clone() {
      return new GroupContextV2(this);
    }

    /// <summary>Field number for the "masterKey" field.</summary>
    public const int MasterKeyFieldNumber = 1;
    private readonly static pb::ByteString MasterKeyDefaultValue = pb::ByteString.Empty;

    private pb::ByteString masterKey_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString MasterKey {
      get { return masterKey_ ?? MasterKeyDefaultValue; }
      set {
        masterKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "masterKey" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasMasterKey {
      get { return masterKey_ != null; }
    }
    /// <summary>Clears the value of the "masterKey" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMasterKey() {
      masterKey_ = null;
    }

    /// <summary>Field number for the "revision" field.</summary>
    public const int RevisionFieldNumber = 2;
    private readonly static uint RevisionDefaultValue = 0;

    private uint revision_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Revision {
      get { if ((_hasBits0 & 1) != 0) { return revision_; } else { return RevisionDefaultValue; } }
      set {
        _hasBits0 |= 1;
        revision_ = value;
      }
    }
    /// <summary>Gets whether the "revision" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasRevision {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "revision" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearRevision() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "groupChange" field.</summary>
    public const int GroupChangeFieldNumber = 3;
    private readonly static pb::ByteString GroupChangeDefaultValue = pb::ByteString.Empty;

    private pb::ByteString groupChange_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString GroupChange {
      get { return groupChange_ ?? GroupChangeDefaultValue; }
      set {
        groupChange_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "groupChange" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasGroupChange {
      get { return groupChange_ != null; }
    }
    /// <summary>Clears the value of the "groupChange" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearGroupChange() {
      groupChange_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GroupContextV2);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GroupContextV2 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MasterKey != other.MasterKey) return false;
      if (Revision != other.Revision) return false;
      if (GroupChange != other.GroupChange) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasMasterKey) hash ^= MasterKey.GetHashCode();
      if (HasRevision) hash ^= Revision.GetHashCode();
      if (HasGroupChange) hash ^= GroupChange.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasMasterKey) {
        output.WriteRawTag(10);
        output.WriteBytes(MasterKey);
      }
      if (HasRevision) {
        output.WriteRawTag(16);
        output.WriteUInt32(Revision);
      }
      if (HasGroupChange) {
        output.WriteRawTag(26);
        output.WriteBytes(GroupChange);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasMasterKey) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(MasterKey);
      }
      if (HasRevision) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Revision);
      }
      if (HasGroupChange) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(GroupChange);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GroupContextV2 other) {
      if (other == null) {
        return;
      }
      if (other.HasMasterKey) {
        MasterKey = other.MasterKey;
      }
      if (other.HasRevision) {
        Revision = other.Revision;
      }
      if (other.HasGroupChange) {
        GroupChange = other.GroupChange;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            MasterKey = input.ReadBytes();
            break;
          }
          case 16: {
            Revision = input.ReadUInt32();
            break;
          }
          case 26: {
            GroupChange = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ContactDetails : pb::IMessage<ContactDetails> {
    private static readonly pb::MessageParser<ContactDetails> _parser = new pb::MessageParser<ContactDetails>(() => new ContactDetails());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ContactDetails> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::libsignalservice.push.SignalServiceReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ContactDetails() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ContactDetails(ContactDetails other) : this() {
      _hasBits0 = other._hasBits0;
      number_ = other.number_;
      uuid_ = other.uuid_;
      name_ = other.name_;
      avatar_ = other.avatar_ != null ? other.avatar_.Clone() : null;
      color_ = other.color_;
      verified_ = other.verified_ != null ? other.verified_.Clone() : null;
      profileKey_ = other.profileKey_;
      blocked_ = other.blocked_;
      expireTimer_ = other.expireTimer_;
      inboxPosition_ = other.inboxPosition_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ContactDetails Clone() {
      return new ContactDetails(this);
    }

    /// <summary>Field number for the "number" field.</summary>
    public const int NumberFieldNumber = 1;
    private readonly static string NumberDefaultValue = "";

    private string number_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Number {
      get { return number_ ?? NumberDefaultValue; }
      set {
        number_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "number" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasNumber {
      get { return number_ != null; }
    }
    /// <summary>Clears the value of the "number" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearNumber() {
      number_ = null;
    }

    /// <summary>Field number for the "uuid" field.</summary>
    public const int UuidFieldNumber = 9;
    private readonly static string UuidDefaultValue = "";

    private string uuid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Uuid {
      get { return uuid_ ?? UuidDefaultValue; }
      set {
        uuid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "uuid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasUuid {
      get { return uuid_ != null; }
    }
    /// <summary>Clears the value of the "uuid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearUuid() {
      uuid_ = null;
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private readonly static string NameDefaultValue = "";

    private string name_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_ ?? NameDefaultValue; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "name" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasName {
      get { return name_ != null; }
    }
    /// <summary>Clears the value of the "name" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearName() {
      name_ = null;
    }

    /// <summary>Field number for the "avatar" field.</summary>
    public const int AvatarFieldNumber = 3;
    private global::libsignalservice.push.ContactDetails.Types.Avatar avatar_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::libsignalservice.push.ContactDetails.Types.Avatar Avatar {
      get { return avatar_; }
      set {
        avatar_ = value;
      }
    }

    /// <summary>Field number for the "color" field.</summary>
    public const int ColorFieldNumber = 4;
    private readonly static string ColorDefaultValue = "";

    private string color_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Color {
      get { return color_ ?? ColorDefaultValue; }
      set {
        color_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "color" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasColor {
      get { return color_ != null; }
    }
    /// <summary>Clears the value of the "color" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearColor() {
      color_ = null;
    }

    /// <summary>Field number for the "verified" field.</summary>
    public const int VerifiedFieldNumber = 5;
    private global::libsignalservice.push.Verified verified_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::libsignalservice.push.Verified Verified {
      get { return verified_; }
      set {
        verified_ = value;
      }
    }

    /// <summary>Field number for the "profileKey" field.</summary>
    public const int ProfileKeyFieldNumber = 6;
    private readonly static pb::ByteString ProfileKeyDefaultValue = pb::ByteString.Empty;

    private pb::ByteString profileKey_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString ProfileKey {
      get { return profileKey_ ?? ProfileKeyDefaultValue; }
      set {
        profileKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "profileKey" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasProfileKey {
      get { return profileKey_ != null; }
    }
    /// <summary>Clears the value of the "profileKey" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearProfileKey() {
      profileKey_ = null;
    }

    /// <summary>Field number for the "blocked" field.</summary>
    public const int BlockedFieldNumber = 7;
    private readonly static bool BlockedDefaultValue = false;

    private bool blocked_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Blocked {
      get { if ((_hasBits0 & 1) != 0) { return blocked_; } else { return BlockedDefaultValue; } }
      set {
        _hasBits0 |= 1;
        blocked_ = value;
      }
    }
    /// <summary>Gets whether the "blocked" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasBlocked {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "blocked" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearBlocked() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "expireTimer" field.</summary>
    public const int ExpireTimerFieldNumber = 8;
    private readonly static uint ExpireTimerDefaultValue = 0;

    private uint expireTimer_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ExpireTimer {
      get { if ((_hasBits0 & 2) != 0) { return expireTimer_; } else { return ExpireTimerDefaultValue; } }
      set {
        _hasBits0 |= 2;
        expireTimer_ = value;
      }
    }
    /// <summary>Gets whether the "expireTimer" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasExpireTimer {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "expireTimer" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearExpireTimer() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "inboxPosition" field.</summary>
    public const int InboxPositionFieldNumber = 10;
    private readonly static uint InboxPositionDefaultValue = 0;

    private uint inboxPosition_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint InboxPosition {
      get { if ((_hasBits0 & 4) != 0) { return inboxPosition_; } else { return InboxPositionDefaultValue; } }
      set {
        _hasBits0 |= 4;
        inboxPosition_ = value;
      }
    }
    /// <summary>Gets whether the "inboxPosition" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasInboxPosition {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "inboxPosition" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearInboxPosition() {
      _hasBits0 &= ~4;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ContactDetails);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ContactDetails other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Number != other.Number) return false;
      if (Uuid != other.Uuid) return false;
      if (Name != other.Name) return false;
      if (!object.Equals(Avatar, other.Avatar)) return false;
      if (Color != other.Color) return false;
      if (!object.Equals(Verified, other.Verified)) return false;
      if (ProfileKey != other.ProfileKey) return false;
      if (Blocked != other.Blocked) return false;
      if (ExpireTimer != other.ExpireTimer) return false;
      if (InboxPosition != other.InboxPosition) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasNumber) hash ^= Number.GetHashCode();
      if (HasUuid) hash ^= Uuid.GetHashCode();
      if (HasName) hash ^= Name.GetHashCode();
      if (avatar_ != null) hash ^= Avatar.GetHashCode();
      if (HasColor) hash ^= Color.GetHashCode();
      if (verified_ != null) hash ^= Verified.GetHashCode();
      if (HasProfileKey) hash ^= ProfileKey.GetHashCode();
      if (HasBlocked) hash ^= Blocked.GetHashCode();
      if (HasExpireTimer) hash ^= ExpireTimer.GetHashCode();
      if (HasInboxPosition) hash ^= InboxPosition.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasNumber) {
        output.WriteRawTag(10);
        output.WriteString(Number);
      }
      if (HasName) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (avatar_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Avatar);
      }
      if (HasColor) {
        output.WriteRawTag(34);
        output.WriteString(Color);
      }
      if (verified_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Verified);
      }
      if (HasProfileKey) {
        output.WriteRawTag(50);
        output.WriteBytes(ProfileKey);
      }
      if (HasBlocked) {
        output.WriteRawTag(56);
        output.WriteBool(Blocked);
      }
      if (HasExpireTimer) {
        output.WriteRawTag(64);
        output.WriteUInt32(ExpireTimer);
      }
      if (HasUuid) {
        output.WriteRawTag(74);
        output.WriteString(Uuid);
      }
      if (HasInboxPosition) {
        output.WriteRawTag(80);
        output.WriteUInt32(InboxPosition);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasNumber) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Number);
      }
      if (HasUuid) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Uuid);
      }
      if (HasName) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (avatar_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Avatar);
      }
      if (HasColor) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Color);
      }
      if (verified_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Verified);
      }
      if (HasProfileKey) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(ProfileKey);
      }
      if (HasBlocked) {
        size += 1 + 1;
      }
      if (HasExpireTimer) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ExpireTimer);
      }
      if (HasInboxPosition) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(InboxPosition);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ContactDetails other) {
      if (other == null) {
        return;
      }
      if (other.HasNumber) {
        Number = other.Number;
      }
      if (other.HasUuid) {
        Uuid = other.Uuid;
      }
      if (other.HasName) {
        Name = other.Name;
      }
      if (other.avatar_ != null) {
        if (avatar_ == null) {
          Avatar = new global::libsignalservice.push.ContactDetails.Types.Avatar();
        }
        Avatar.MergeFrom(other.Avatar);
      }
      if (other.HasColor) {
        Color = other.Color;
      }
      if (other.verified_ != null) {
        if (verified_ == null) {
          Verified = new global::libsignalservice.push.Verified();
        }
        Verified.MergeFrom(other.Verified);
      }
      if (other.HasProfileKey) {
        ProfileKey = other.ProfileKey;
      }
      if (other.HasBlocked) {
        Blocked = other.Blocked;
      }
      if (other.HasExpireTimer) {
        ExpireTimer = other.ExpireTimer;
      }
      if (other.HasInboxPosition) {
        InboxPosition = other.InboxPosition;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Number = input.ReadString();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 26: {
            if (avatar_ == null) {
              Avatar = new global::libsignalservice.push.ContactDetails.Types.Avatar();
            }
            input.ReadMessage(Avatar);
            break;
          }
          case 34: {
            Color = input.ReadString();
            break;
          }
          case 42: {
            if (verified_ == null) {
              Verified = new global::libsignalservice.push.Verified();
            }
            input.ReadMessage(Verified);
            break;
          }
          case 50: {
            ProfileKey = input.ReadBytes();
            break;
          }
          case 56: {
            Blocked = input.ReadBool();
            break;
          }
          case 64: {
            ExpireTimer = input.ReadUInt32();
            break;
          }
          case 74: {
            Uuid = input.ReadString();
            break;
          }
          case 80: {
            InboxPosition = input.ReadUInt32();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the ContactDetails message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class Avatar : pb::IMessage<Avatar> {
        private static readonly pb::MessageParser<Avatar> _parser = new pb::MessageParser<Avatar>(() => new Avatar());
        private pb::UnknownFieldSet _unknownFields;
        private int _hasBits0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Avatar> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::libsignalservice.push.ContactDetails.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Avatar() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Avatar(Avatar other) : this() {
          _hasBits0 = other._hasBits0;
          contentType_ = other.contentType_;
          length_ = other.length_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Avatar Clone() {
          return new Avatar(this);
        }

        /// <summary>Field number for the "contentType" field.</summary>
        public const int ContentTypeFieldNumber = 1;
        private readonly static string ContentTypeDefaultValue = "";

        private string contentType_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string ContentType {
          get { return contentType_ ?? ContentTypeDefaultValue; }
          set {
            contentType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }
        /// <summary>Gets whether the "contentType" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasContentType {
          get { return contentType_ != null; }
        }
        /// <summary>Clears the value of the "contentType" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearContentType() {
          contentType_ = null;
        }

        /// <summary>Field number for the "length" field.</summary>
        public const int LengthFieldNumber = 2;
        private readonly static uint LengthDefaultValue = 0;

        private uint length_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Length {
          get { if ((_hasBits0 & 1) != 0) { return length_; } else { return LengthDefaultValue; } }
          set {
            _hasBits0 |= 1;
            length_ = value;
          }
        }
        /// <summary>Gets whether the "length" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasLength {
          get { return (_hasBits0 & 1) != 0; }
        }
        /// <summary>Clears the value of the "length" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearLength() {
          _hasBits0 &= ~1;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Avatar);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Avatar other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (ContentType != other.ContentType) return false;
          if (Length != other.Length) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (HasContentType) hash ^= ContentType.GetHashCode();
          if (HasLength) hash ^= Length.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (HasContentType) {
            output.WriteRawTag(10);
            output.WriteString(ContentType);
          }
          if (HasLength) {
            output.WriteRawTag(16);
            output.WriteUInt32(Length);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (HasContentType) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(ContentType);
          }
          if (HasLength) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Length);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Avatar other) {
          if (other == null) {
            return;
          }
          if (other.HasContentType) {
            ContentType = other.ContentType;
          }
          if (other.HasLength) {
            Length = other.Length;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                ContentType = input.ReadString();
                break;
              }
              case 16: {
                Length = input.ReadUInt32();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  public sealed partial class GroupDetails : pb::IMessage<GroupDetails> {
    private static readonly pb::MessageParser<GroupDetails> _parser = new pb::MessageParser<GroupDetails>(() => new GroupDetails());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GroupDetails> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::libsignalservice.push.SignalServiceReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GroupDetails() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GroupDetails(GroupDetails other) : this() {
      _hasBits0 = other._hasBits0;
      id_ = other.id_;
      name_ = other.name_;
      membersE164_ = other.membersE164_.Clone();
      members_ = other.members_.Clone();
      avatar_ = other.avatar_ != null ? other.avatar_.Clone() : null;
      active_ = other.active_;
      expireTimer_ = other.expireTimer_;
      color_ = other.color_;
      blocked_ = other.blocked_;
      inboxPosition_ = other.inboxPosition_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GroupDetails Clone() {
      return new GroupDetails(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private readonly static pb::ByteString IdDefaultValue = pb::ByteString.Empty;

    private pb::ByteString id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Id {
      get { return id_ ?? IdDefaultValue; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasId {
      get { return id_ != null; }
    }
    /// <summary>Clears the value of the "id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearId() {
      id_ = null;
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private readonly static string NameDefaultValue = "";

    private string name_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_ ?? NameDefaultValue; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "name" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasName {
      get { return name_ != null; }
    }
    /// <summary>Clears the value of the "name" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearName() {
      name_ = null;
    }

    /// <summary>Field number for the "membersE164" field.</summary>
    public const int MembersE164FieldNumber = 3;
    private static readonly pb::FieldCodec<string> _repeated_membersE164_codec
        = pb::FieldCodec.ForString(26);
    private readonly pbc::RepeatedField<string> membersE164_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> MembersE164 {
      get { return membersE164_; }
    }

    /// <summary>Field number for the "members" field.</summary>
    public const int MembersFieldNumber = 9;
    private static readonly pb::FieldCodec<global::libsignalservice.push.GroupDetails.Types.Member> _repeated_members_codec
        = pb::FieldCodec.ForMessage(74, global::libsignalservice.push.GroupDetails.Types.Member.Parser);
    private readonly pbc::RepeatedField<global::libsignalservice.push.GroupDetails.Types.Member> members_ = new pbc::RepeatedField<global::libsignalservice.push.GroupDetails.Types.Member>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::libsignalservice.push.GroupDetails.Types.Member> Members {
      get { return members_; }
    }

    /// <summary>Field number for the "avatar" field.</summary>
    public const int AvatarFieldNumber = 4;
    private global::libsignalservice.push.GroupDetails.Types.Avatar avatar_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::libsignalservice.push.GroupDetails.Types.Avatar Avatar {
      get { return avatar_; }
      set {
        avatar_ = value;
      }
    }

    /// <summary>Field number for the "active" field.</summary>
    public const int ActiveFieldNumber = 5;
    private readonly static bool ActiveDefaultValue = true;

    private bool active_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Active {
      get { if ((_hasBits0 & 1) != 0) { return active_; } else { return ActiveDefaultValue; } }
      set {
        _hasBits0 |= 1;
        active_ = value;
      }
    }
    /// <summary>Gets whether the "active" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasActive {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "active" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearActive() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "expireTimer" field.</summary>
    public const int ExpireTimerFieldNumber = 6;
    private readonly static uint ExpireTimerDefaultValue = 0;

    private uint expireTimer_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ExpireTimer {
      get { if ((_hasBits0 & 2) != 0) { return expireTimer_; } else { return ExpireTimerDefaultValue; } }
      set {
        _hasBits0 |= 2;
        expireTimer_ = value;
      }
    }
    /// <summary>Gets whether the "expireTimer" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasExpireTimer {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "expireTimer" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearExpireTimer() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "color" field.</summary>
    public const int ColorFieldNumber = 7;
    private readonly static string ColorDefaultValue = "";

    private string color_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Color {
      get { return color_ ?? ColorDefaultValue; }
      set {
        color_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "color" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasColor {
      get { return color_ != null; }
    }
    /// <summary>Clears the value of the "color" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearColor() {
      color_ = null;
    }

    /// <summary>Field number for the "blocked" field.</summary>
    public const int BlockedFieldNumber = 8;
    private readonly static bool BlockedDefaultValue = false;

    private bool blocked_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Blocked {
      get { if ((_hasBits0 & 4) != 0) { return blocked_; } else { return BlockedDefaultValue; } }
      set {
        _hasBits0 |= 4;
        blocked_ = value;
      }
    }
    /// <summary>Gets whether the "blocked" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasBlocked {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "blocked" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearBlocked() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "inboxPosition" field.</summary>
    public const int InboxPositionFieldNumber = 10;
    private readonly static uint InboxPositionDefaultValue = 0;

    private uint inboxPosition_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint InboxPosition {
      get { if ((_hasBits0 & 8) != 0) { return inboxPosition_; } else { return InboxPositionDefaultValue; } }
      set {
        _hasBits0 |= 8;
        inboxPosition_ = value;
      }
    }
    /// <summary>Gets whether the "inboxPosition" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasInboxPosition {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "inboxPosition" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearInboxPosition() {
      _hasBits0 &= ~8;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GroupDetails);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GroupDetails other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Name != other.Name) return false;
      if(!membersE164_.Equals(other.membersE164_)) return false;
      if(!members_.Equals(other.members_)) return false;
      if (!object.Equals(Avatar, other.Avatar)) return false;
      if (Active != other.Active) return false;
      if (ExpireTimer != other.ExpireTimer) return false;
      if (Color != other.Color) return false;
      if (Blocked != other.Blocked) return false;
      if (InboxPosition != other.InboxPosition) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasId) hash ^= Id.GetHashCode();
      if (HasName) hash ^= Name.GetHashCode();
      hash ^= membersE164_.GetHashCode();
      hash ^= members_.GetHashCode();
      if (avatar_ != null) hash ^= Avatar.GetHashCode();
      if (HasActive) hash ^= Active.GetHashCode();
      if (HasExpireTimer) hash ^= ExpireTimer.GetHashCode();
      if (HasColor) hash ^= Color.GetHashCode();
      if (HasBlocked) hash ^= Blocked.GetHashCode();
      if (HasInboxPosition) hash ^= InboxPosition.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasId) {
        output.WriteRawTag(10);
        output.WriteBytes(Id);
      }
      if (HasName) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      membersE164_.WriteTo(output, _repeated_membersE164_codec);
      if (avatar_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Avatar);
      }
      if (HasActive) {
        output.WriteRawTag(40);
        output.WriteBool(Active);
      }
      if (HasExpireTimer) {
        output.WriteRawTag(48);
        output.WriteUInt32(ExpireTimer);
      }
      if (HasColor) {
        output.WriteRawTag(58);
        output.WriteString(Color);
      }
      if (HasBlocked) {
        output.WriteRawTag(64);
        output.WriteBool(Blocked);
      }
      members_.WriteTo(output, _repeated_members_codec);
      if (HasInboxPosition) {
        output.WriteRawTag(80);
        output.WriteUInt32(InboxPosition);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasId) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Id);
      }
      if (HasName) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      size += membersE164_.CalculateSize(_repeated_membersE164_codec);
      size += members_.CalculateSize(_repeated_members_codec);
      if (avatar_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Avatar);
      }
      if (HasActive) {
        size += 1 + 1;
      }
      if (HasExpireTimer) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ExpireTimer);
      }
      if (HasColor) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Color);
      }
      if (HasBlocked) {
        size += 1 + 1;
      }
      if (HasInboxPosition) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(InboxPosition);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GroupDetails other) {
      if (other == null) {
        return;
      }
      if (other.HasId) {
        Id = other.Id;
      }
      if (other.HasName) {
        Name = other.Name;
      }
      membersE164_.Add(other.membersE164_);
      members_.Add(other.members_);
      if (other.avatar_ != null) {
        if (avatar_ == null) {
          Avatar = new global::libsignalservice.push.GroupDetails.Types.Avatar();
        }
        Avatar.MergeFrom(other.Avatar);
      }
      if (other.HasActive) {
        Active = other.Active;
      }
      if (other.HasExpireTimer) {
        ExpireTimer = other.ExpireTimer;
      }
      if (other.HasColor) {
        Color = other.Color;
      }
      if (other.HasBlocked) {
        Blocked = other.Blocked;
      }
      if (other.HasInboxPosition) {
        InboxPosition = other.InboxPosition;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Id = input.ReadBytes();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 26: {
            membersE164_.AddEntriesFrom(input, _repeated_membersE164_codec);
            break;
          }
          case 34: {
            if (avatar_ == null) {
              Avatar = new global::libsignalservice.push.GroupDetails.Types.Avatar();
            }
            input.ReadMessage(Avatar);
            break;
          }
          case 40: {
            Active = input.ReadBool();
            break;
          }
          case 48: {
            ExpireTimer = input.ReadUInt32();
            break;
          }
          case 58: {
            Color = input.ReadString();
            break;
          }
          case 64: {
            Blocked = input.ReadBool();
            break;
          }
          case 74: {
            members_.AddEntriesFrom(input, _repeated_members_codec);
            break;
          }
          case 80: {
            InboxPosition = input.ReadUInt32();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the GroupDetails message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class Avatar : pb::IMessage<Avatar> {
        private static readonly pb::MessageParser<Avatar> _parser = new pb::MessageParser<Avatar>(() => new Avatar());
        private pb::UnknownFieldSet _unknownFields;
        private int _hasBits0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Avatar> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::libsignalservice.push.GroupDetails.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Avatar() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Avatar(Avatar other) : this() {
          _hasBits0 = other._hasBits0;
          contentType_ = other.contentType_;
          length_ = other.length_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Avatar Clone() {
          return new Avatar(this);
        }

        /// <summary>Field number for the "contentType" field.</summary>
        public const int ContentTypeFieldNumber = 1;
        private readonly static string ContentTypeDefaultValue = "";

        private string contentType_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string ContentType {
          get { return contentType_ ?? ContentTypeDefaultValue; }
          set {
            contentType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }
        /// <summary>Gets whether the "contentType" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasContentType {
          get { return contentType_ != null; }
        }
        /// <summary>Clears the value of the "contentType" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearContentType() {
          contentType_ = null;
        }

        /// <summary>Field number for the "length" field.</summary>
        public const int LengthFieldNumber = 2;
        private readonly static uint LengthDefaultValue = 0;

        private uint length_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Length {
          get { if ((_hasBits0 & 1) != 0) { return length_; } else { return LengthDefaultValue; } }
          set {
            _hasBits0 |= 1;
            length_ = value;
          }
        }
        /// <summary>Gets whether the "length" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasLength {
          get { return (_hasBits0 & 1) != 0; }
        }
        /// <summary>Clears the value of the "length" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearLength() {
          _hasBits0 &= ~1;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Avatar);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Avatar other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (ContentType != other.ContentType) return false;
          if (Length != other.Length) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (HasContentType) hash ^= ContentType.GetHashCode();
          if (HasLength) hash ^= Length.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (HasContentType) {
            output.WriteRawTag(10);
            output.WriteString(ContentType);
          }
          if (HasLength) {
            output.WriteRawTag(16);
            output.WriteUInt32(Length);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (HasContentType) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(ContentType);
          }
          if (HasLength) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Length);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Avatar other) {
          if (other == null) {
            return;
          }
          if (other.HasContentType) {
            ContentType = other.ContentType;
          }
          if (other.HasLength) {
            Length = other.Length;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                ContentType = input.ReadString();
                break;
              }
              case 16: {
                Length = input.ReadUInt32();
                break;
              }
            }
          }
        }

      }

      public sealed partial class Member : pb::IMessage<Member> {
        private static readonly pb::MessageParser<Member> _parser = new pb::MessageParser<Member>(() => new Member());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Member> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::libsignalservice.push.GroupDetails.Descriptor.NestedTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Member() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Member(Member other) : this() {
          uuid_ = other.uuid_;
          e164_ = other.e164_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Member Clone() {
          return new Member(this);
        }

        /// <summary>Field number for the "uuid" field.</summary>
        public const int UuidFieldNumber = 1;
        private readonly static string UuidDefaultValue = "";

        private string uuid_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Uuid {
          get { return uuid_ ?? UuidDefaultValue; }
          set {
            uuid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }
        /// <summary>Gets whether the "uuid" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasUuid {
          get { return uuid_ != null; }
        }
        /// <summary>Clears the value of the "uuid" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearUuid() {
          uuid_ = null;
        }

        /// <summary>Field number for the "e164" field.</summary>
        public const int E164FieldNumber = 2;
        private readonly static string E164DefaultValue = "";

        private string e164_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string E164 {
          get { return e164_ ?? E164DefaultValue; }
          set {
            e164_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }
        /// <summary>Gets whether the "e164" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasE164 {
          get { return e164_ != null; }
        }
        /// <summary>Clears the value of the "e164" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearE164() {
          e164_ = null;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Member);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Member other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Uuid != other.Uuid) return false;
          if (E164 != other.E164) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (HasUuid) hash ^= Uuid.GetHashCode();
          if (HasE164) hash ^= E164.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (HasUuid) {
            output.WriteRawTag(10);
            output.WriteString(Uuid);
          }
          if (HasE164) {
            output.WriteRawTag(18);
            output.WriteString(E164);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (HasUuid) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Uuid);
          }
          if (HasE164) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(E164);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Member other) {
          if (other == null) {
            return;
          }
          if (other.HasUuid) {
            Uuid = other.Uuid;
          }
          if (other.HasE164) {
            E164 = other.E164;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                Uuid = input.ReadString();
                break;
              }
              case 18: {
                E164 = input.ReadString();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
