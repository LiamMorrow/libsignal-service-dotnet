// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: StickerResources.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace libsignalservice.sticker {

  /// <summary>Holder for reflection information generated from StickerResources.proto</summary>
  public static partial class StickerResourcesReflection {

    #region Descriptor
    /// <summary>File descriptor for StickerResources.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static StickerResourcesReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChZTdGlja2VyUmVzb3VyY2VzLnByb3RvEgp0ZXh0c2VjdXJlIrUBCgRQYWNr",
            "Eg0KBXRpdGxlGAEgASgJEg4KBmF1dGhvchgCIAEoCRInCgVjb3ZlchgDIAEo",
            "CzIYLnRleHRzZWN1cmUuUGFjay5TdGlja2VyEioKCHN0aWNrZXJzGAQgAygL",
            "MhgudGV4dHNlY3VyZS5QYWNrLlN0aWNrZXIaOQoHU3RpY2tlchIKCgJpZBgB",
            "IAEoDRINCgVlbW9qaRgCIAEoCRITCgtjb250ZW50VHlwZRgDIAEoCUJdCjFv",
            "cmcud2hpc3BlcnN5c3RlbXMuc2lnbmFsc2VydmljZS5pbnRlcm5hbC5zdGlj",
            "a2VyQg1TdGlja2VyUHJvdG9zqgIYbGlic2lnbmFsc2VydmljZS5zdGlja2Vy"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::libsignalservice.sticker.Pack), global::libsignalservice.sticker.Pack.Parser, new[]{ "Title", "Author", "Cover", "Stickers" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::libsignalservice.sticker.Pack.Types.Sticker), global::libsignalservice.sticker.Pack.Types.Sticker.Parser, new[]{ "Id", "Emoji", "ContentType" }, null, null, null, null)})
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class Pack : pb::IMessage<Pack> {
    private static readonly pb::MessageParser<Pack> _parser = new pb::MessageParser<Pack>(() => new Pack());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Pack> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::libsignalservice.sticker.StickerResourcesReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Pack() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Pack(Pack other) : this() {
      title_ = other.title_;
      author_ = other.author_;
      cover_ = other.cover_ != null ? other.cover_.Clone() : null;
      stickers_ = other.stickers_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Pack Clone() {
      return new Pack(this);
    }

    /// <summary>Field number for the "title" field.</summary>
    public const int TitleFieldNumber = 1;
    private readonly static string TitleDefaultValue = "";

    private string title_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Title {
      get { return title_ ?? TitleDefaultValue; }
      set {
        title_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "title" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTitle {
      get { return title_ != null; }
    }
    /// <summary>Clears the value of the "title" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTitle() {
      title_ = null;
    }

    /// <summary>Field number for the "author" field.</summary>
    public const int AuthorFieldNumber = 2;
    private readonly static string AuthorDefaultValue = "";

    private string author_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Author {
      get { return author_ ?? AuthorDefaultValue; }
      set {
        author_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "author" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasAuthor {
      get { return author_ != null; }
    }
    /// <summary>Clears the value of the "author" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearAuthor() {
      author_ = null;
    }

    /// <summary>Field number for the "cover" field.</summary>
    public const int CoverFieldNumber = 3;
    private global::libsignalservice.sticker.Pack.Types.Sticker cover_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::libsignalservice.sticker.Pack.Types.Sticker Cover {
      get { return cover_; }
      set {
        cover_ = value;
      }
    }

    /// <summary>Field number for the "stickers" field.</summary>
    public const int StickersFieldNumber = 4;
    private static readonly pb::FieldCodec<global::libsignalservice.sticker.Pack.Types.Sticker> _repeated_stickers_codec
        = pb::FieldCodec.ForMessage(34, global::libsignalservice.sticker.Pack.Types.Sticker.Parser);
    private readonly pbc::RepeatedField<global::libsignalservice.sticker.Pack.Types.Sticker> stickers_ = new pbc::RepeatedField<global::libsignalservice.sticker.Pack.Types.Sticker>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::libsignalservice.sticker.Pack.Types.Sticker> Stickers {
      get { return stickers_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Pack);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Pack other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Title != other.Title) return false;
      if (Author != other.Author) return false;
      if (!object.Equals(Cover, other.Cover)) return false;
      if(!stickers_.Equals(other.stickers_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasTitle) hash ^= Title.GetHashCode();
      if (HasAuthor) hash ^= Author.GetHashCode();
      if (cover_ != null) hash ^= Cover.GetHashCode();
      hash ^= stickers_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasTitle) {
        output.WriteRawTag(10);
        output.WriteString(Title);
      }
      if (HasAuthor) {
        output.WriteRawTag(18);
        output.WriteString(Author);
      }
      if (cover_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Cover);
      }
      stickers_.WriteTo(output, _repeated_stickers_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasTitle) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Title);
      }
      if (HasAuthor) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Author);
      }
      if (cover_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Cover);
      }
      size += stickers_.CalculateSize(_repeated_stickers_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Pack other) {
      if (other == null) {
        return;
      }
      if (other.HasTitle) {
        Title = other.Title;
      }
      if (other.HasAuthor) {
        Author = other.Author;
      }
      if (other.cover_ != null) {
        if (cover_ == null) {
          Cover = new global::libsignalservice.sticker.Pack.Types.Sticker();
        }
        Cover.MergeFrom(other.Cover);
      }
      stickers_.Add(other.stickers_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Title = input.ReadString();
            break;
          }
          case 18: {
            Author = input.ReadString();
            break;
          }
          case 26: {
            if (cover_ == null) {
              Cover = new global::libsignalservice.sticker.Pack.Types.Sticker();
            }
            input.ReadMessage(Cover);
            break;
          }
          case 34: {
            stickers_.AddEntriesFrom(input, _repeated_stickers_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the Pack message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class Sticker : pb::IMessage<Sticker> {
        private static readonly pb::MessageParser<Sticker> _parser = new pb::MessageParser<Sticker>(() => new Sticker());
        private pb::UnknownFieldSet _unknownFields;
        private int _hasBits0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Sticker> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::libsignalservice.sticker.Pack.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Sticker() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Sticker(Sticker other) : this() {
          _hasBits0 = other._hasBits0;
          id_ = other.id_;
          emoji_ = other.emoji_;
          contentType_ = other.contentType_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Sticker Clone() {
          return new Sticker(this);
        }

        /// <summary>Field number for the "id" field.</summary>
        public const int IdFieldNumber = 1;
        private readonly static uint IdDefaultValue = 0;

        private uint id_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Id {
          get { if ((_hasBits0 & 1) != 0) { return id_; } else { return IdDefaultValue; } }
          set {
            _hasBits0 |= 1;
            id_ = value;
          }
        }
        /// <summary>Gets whether the "id" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasId {
          get { return (_hasBits0 & 1) != 0; }
        }
        /// <summary>Clears the value of the "id" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearId() {
          _hasBits0 &= ~1;
        }

        /// <summary>Field number for the "emoji" field.</summary>
        public const int EmojiFieldNumber = 2;
        private readonly static string EmojiDefaultValue = "";

        private string emoji_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Emoji {
          get { return emoji_ ?? EmojiDefaultValue; }
          set {
            emoji_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }
        /// <summary>Gets whether the "emoji" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasEmoji {
          get { return emoji_ != null; }
        }
        /// <summary>Clears the value of the "emoji" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearEmoji() {
          emoji_ = null;
        }

        /// <summary>Field number for the "contentType" field.</summary>
        public const int ContentTypeFieldNumber = 3;
        private readonly static string ContentTypeDefaultValue = "";

        private string contentType_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string ContentType {
          get { return contentType_ ?? ContentTypeDefaultValue; }
          set {
            contentType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }
        /// <summary>Gets whether the "contentType" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasContentType {
          get { return contentType_ != null; }
        }
        /// <summary>Clears the value of the "contentType" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearContentType() {
          contentType_ = null;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Sticker);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Sticker other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Id != other.Id) return false;
          if (Emoji != other.Emoji) return false;
          if (ContentType != other.ContentType) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (HasId) hash ^= Id.GetHashCode();
          if (HasEmoji) hash ^= Emoji.GetHashCode();
          if (HasContentType) hash ^= ContentType.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (HasId) {
            output.WriteRawTag(8);
            output.WriteUInt32(Id);
          }
          if (HasEmoji) {
            output.WriteRawTag(18);
            output.WriteString(Emoji);
          }
          if (HasContentType) {
            output.WriteRawTag(26);
            output.WriteString(ContentType);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (HasId) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Id);
          }
          if (HasEmoji) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Emoji);
          }
          if (HasContentType) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(ContentType);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Sticker other) {
          if (other == null) {
            return;
          }
          if (other.HasId) {
            Id = other.Id;
          }
          if (other.HasEmoji) {
            Emoji = other.Emoji;
          }
          if (other.HasContentType) {
            ContentType = other.ContentType;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                Id = input.ReadUInt32();
                break;
              }
              case 18: {
                Emoji = input.ReadString();
                break;
              }
              case 26: {
                ContentType = input.ReadString();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
